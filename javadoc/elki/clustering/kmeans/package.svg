<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="2077px" preserveAspectRatio="none" style="width:11270px;height:2077px;background:#FFFFFF;" version="1.1" viewBox="0 0 11270 2077" width="11270px" zoomAndPan="magnify"><defs/><g><!--MD5=[db165ef3061ef93741a143c91ec23e3f]
cluster elki.clustering.kmeans--><g id="cluster_elki.clustering.kmeans"><path d="M1015.5,154 L1193.5,154 A3.75,3.75 0 0 1 1196,156.5 L1203,176.2969 L11260.5,176.2969 A2.5,2.5 0 0 1 11263,178.7969 L11263,2049.5 A2.5,2.5 0 0 1 11260.5,2052 L1015.5,2052 A2.5,2.5 0 0 1 1013,2049.5 L1013,156.5 A2.5,2.5 0 0 1 1015.5,154 " fill="none" style="stroke:#000000;stroke-width:1.5;"/><line style="stroke:#000000;stroke-width:1.5;" x1="1013" x2="1203" y1="176.2969" y2="176.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="177" x="1017" y="168.9951">elki.clustering.kmeans</text></g><!--MD5=[6b1243d1eb00edd5f5f43e3a0dd472a2]
cluster elki.clustering.kmeans.initialization--><g id="cluster_elki.clustering.kmeans.initialization"><path d="M8.5,1730 L284.5,1730 A3.75,3.75 0 0 1 287,1732.5 L294,1752.2969 L343.5,1752.2969 A2.5,2.5 0 0 1 346,1754.7969 L346,1826.5 A2.5,2.5 0 0 1 343.5,1829 L8.5,1829 A2.5,2.5 0 0 1 6,1826.5 L6,1732.5 A2.5,2.5 0 0 1 8.5,1730 " fill="none" style="stroke:#000000;stroke-width:1.5;"/><line style="stroke:#000000;stroke-width:1.5;" x1="6" x2="294" y1="1752.2969" y2="1752.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="275" x="10" y="1744.9951">elki.clustering.kmeans.initialization</text></g><!--MD5=[5a16a86ac2d7d394fc35a681d34e2667]
cluster elki.clustering--><g id="cluster_elki.clustering"><path d="M2028.5,6 L2140.5,6 A3.75,3.75 0 0 1 2143,8.5 L2150,28.2969 L2501.5,28.2969 A2.5,2.5 0 0 1 2504,30.7969 L2504,118.5 A2.5,2.5 0 0 1 2501.5,121 L2028.5,121 A2.5,2.5 0 0 1 2026,118.5 L2026,8.5 A2.5,2.5 0 0 1 2028.5,6 " fill="none" style="stroke:#000000;stroke-width:1.5;"/><line style="stroke:#000000;stroke-width:1.5;" x1="2026" x2="2150" y1="28.2969" y2="28.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="111" x="2030" y="20.9951">elki.clustering</text></g><!--MD5=[e24b091b314caaeff31b48a0289c91ab]
cluster elki.clustering.kmeans.initialization.betula--><g id="cluster_elki.clustering.kmeans.initialization.betula"><path d="M646.5,1730 L976.5,1730 A3.75,3.75 0 0 1 979,1732.5 L986,1752.2969 L986.5,1752.2969 A2.5,2.5 0 0 1 989,1754.7969 L989,1826.5 A2.5,2.5 0 0 1 986.5,1829 L646.5,1829 A2.5,2.5 0 0 1 644,1826.5 L644,1732.5 A2.5,2.5 0 0 1 646.5,1730 " fill="none" style="stroke:#000000;stroke-width:1.5;"/><line style="stroke:#000000;stroke-width:1.5;" x1="644" x2="986" y1="1752.2969" y2="1752.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="329" x="648" y="1744.9951">elki.clustering.kmeans.initialization.betula</text></g><!--MD5=[5d0c4902e6a0285812a0dc1546ca1285]
cluster elki.clustering.kmeans.quality--><g id="cluster_elki.clustering.kmeans.quality"><path d="M372.5,1730 L607.5,1730 A3.75,3.75 0 0 1 610,1732.5 L617,1752.2969 L617.5,1752.2969 A2.5,2.5 0 0 1 620,1754.7969 L620,1826.5 A2.5,2.5 0 0 1 617.5,1829 L372.5,1829 A2.5,2.5 0 0 1 370,1826.5 L370,1732.5 A2.5,2.5 0 0 1 372.5,1730 " fill="none" style="stroke:#000000;stroke-width:1.5;"/><line style="stroke:#000000;stroke-width:1.5;" x1="370" x2="617" y1="1752.2969" y2="1752.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="234" x="374" y="1744.9951">elki.clustering.kmeans.quality</text></g><!--MD5=[a44b785a529cf2f7cb707711bab7061d]
class elki.clustering.kmeans.BisectingKMeans--><a href="BisectingKMeans.html" target="_top" title="BisectingKMeans.html" xlink:actuate="onRequest" xlink:href="BisectingKMeans.html" xlink:show="new" xlink:title="BisectingKMeans.html" xlink:type="simple"><g id="elem_elki.clustering.kmeans.BisectingKMeans"><rect codeLine="4" fill="#F1F1F1" height="178.375" id="elki.clustering.kmeans.BisectingKMeans" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="596" x="1902" y="254.5"/><ellipse cx="1989.75" cy="270.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1992.7188,276.1406 Q1992.1406,276.4375 1991.5,276.5781 Q1990.8594,276.7344 1990.1563,276.7344 Q1987.6563,276.7344 1986.3281,275.0938 Q1985.0156,273.4375 1985.0156,270.3125 Q1985.0156,267.1875 1986.3281,265.5313 Q1987.6563,263.875 1990.1563,263.875 Q1990.8594,263.875 1991.5,264.0313 Q1992.1563,264.1875 1992.7188,264.4844 L1992.7188,267.2031 Q1992.0938,266.625 1991.5,266.3594 Q1990.9063,266.0781 1990.2813,266.0781 Q1988.9375,266.0781 1988.25,267.1563 Q1987.5625,268.2188 1987.5625,270.3125 Q1987.5625,272.4063 1988.25,273.4844 Q1988.9375,274.5469 1990.2813,274.5469 Q1990.9063,274.5469 1991.5,274.2813 Q1992.0938,274 1992.7188,273.4219 L1992.7188,276.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="119" x="2010.25" y="275.3467">BisectingKMeans</text><rect fill="#FFFFFF" height="15.9688" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="291" x="2210" y="251.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="289" x="2211" y="263.6387">V extends NumberVector, M extends MeanModel</text><line style="stroke:#181818;stroke-width:0.5;" x1="1903" x2="2497" y1="286.5" y2="286.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1910" y="297.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="93" x="1922" y="303.4951">LOG: Logging</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1910" y="313.4453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="34" x="1922" y="319.792">k: int</text><line style="stroke:#181818;stroke-width:0.5;" x1="1903" x2="2497" y1="327.0938" y2="327.0938"/><ellipse cx="1913" cy="340.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="570" x="1922" y="344.0889">BisectingKMeans(int, KMeans&lt;V extends NumberVector, M extends MeanModel&gt;)</text><ellipse cx="1913" cy="357.0391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="306" x="1922" y="360.3857">getInputTypeRestriction(): TypeInformation[]</text><ellipse cx="1913" cy="373.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="545" x="1922" y="376.6826">run(Relation&lt;V extends NumberVector&gt;): Clustering&lt;M extends MeanModel&gt;</text><ellipse cx="1913" cy="389.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="443" x="1922" y="392.9795">getDistance(): NumberVectorDistance&lt;? super NumberVector&gt;</text><ellipse cx="1913" cy="405.9297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="95" x="1922" y="409.2764">setK(int): void</text><ellipse cx="1913" cy="422.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="470" x="1922" y="425.5732">setDistance(NumberVectorDistance&lt;? super NumberVector&gt;): void</text></g></a><!--MD5=[89518e52ff8ae791a0c896d4bf6677df]
class elki.clustering.kmeans.ElkanKMeans--><a href="ElkanKMeans.html" target="_top" title="ElkanKMeans.html" xlink:actuate="onRequest" xlink:href="ElkanKMeans.html" xlink:show="new" xlink:title="ElkanKMeans.html" xlink:type="simple"><g id="elem_elki.clustering.kmeans.ElkanKMeans"><rect codeLine="22" fill="#F1F1F1" height="113.1875" id="elki.clustering.kmeans.ElkanKMeans" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="724" x="10491" y="1732.5"/><ellipse cx="10725.75" cy="1748.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M10728.7188,1754.1406 Q10728.1406,1754.4375 10727.5,1754.5781 Q10726.8594,1754.7344 10726.1563,1754.7344 Q10723.6563,1754.7344 10722.3281,1753.0938 Q10721.0156,1751.4375 10721.0156,1748.3125 Q10721.0156,1745.1875 10722.3281,1743.5313 Q10723.6563,1741.875 10726.1563,1741.875 Q10726.8594,1741.875 10727.5,1742.0313 Q10728.1563,1742.1875 10728.7188,1742.4844 L10728.7188,1745.2031 Q10728.0938,1744.625 10727.5,1744.3594 Q10726.9063,1744.0781 10726.2813,1744.0781 Q10724.9375,1744.0781 10724.25,1745.1563 Q10723.5625,1746.2188 10723.5625,1748.3125 Q10723.5625,1750.4063 10724.25,1751.4844 Q10724.9375,1752.5469 10726.2813,1752.5469 Q10726.9063,1752.5469 10727.5,1752.2813 Q10728.0938,1752 10728.7188,1751.4219 L10728.7188,1754.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="92" x="10746.25" y="1753.3467">ElkanKMeans</text><rect fill="#FFFFFF" height="15.9688" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="152" x="11066" y="1729.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="150" x="11067" y="1741.6387">V extends NumberVector</text><line style="stroke:#181818;stroke-width:0.5;" x1="10492" x2="11214" y1="1764.5" y2="1764.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10499" y="1775.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="93" x="10511" y="1781.4951">LOG: Logging</text><line style="stroke:#181818;stroke-width:0.5;" x1="10492" x2="11214" y1="1788.7969" y2="1788.7969"/><ellipse cx="10502" cy="1802.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="698" x="10511" y="1805.792">ElkanKMeans(NumberVectorDistance&lt;? super NumberVector&gt;, int, int, KMeansInitialization, boolean)</text><ellipse cx="10502" cy="1818.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="486" x="10511" y="1822.0889">run(Relation&lt;V extends NumberVector&gt;): Clustering&lt;KMeansModel&gt;</text><polygon fill="#FFFF44" points="10502,1830.0391,10506,1834.0391,10502,1838.0391,10498,1834.0391" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="145" x="10511" y="1838.3857">getLogger(): Logging</text></g></a><!--MD5=[72faf95042dfa2affba3e48e91b12618]
class elki.clustering.kmeans.SimplifiedElkanKMeans--><a href="SimplifiedElkanKMeans.html" target="_top" title="SimplifiedElkanKMeans.html" xlink:actuate="onRequest" xlink:href="SimplifiedElkanKMeans.html" xlink:show="new" xlink:title="SimplifiedElkanKMeans.html" xlink:type="simple"><g id="elem_elki.clustering.kmeans.SimplifiedElkanKMeans"><rect codeLine="41" fill="#F1F1F1" height="129.4844" id="elki.clustering.kmeans.SimplifiedElkanKMeans" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="789" x="10458.5" y="1436.5"/><ellipse cx="10693.25" cy="1452.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M10696.2188,1458.1406 Q10695.6406,1458.4375 10695,1458.5781 Q10694.3594,1458.7344 10693.6563,1458.7344 Q10691.1563,1458.7344 10689.8281,1457.0938 Q10688.5156,1455.4375 10688.5156,1452.3125 Q10688.5156,1449.1875 10689.8281,1447.5313 Q10691.1563,1445.875 10693.6563,1445.875 Q10694.3594,1445.875 10695,1446.0313 Q10695.6563,1446.1875 10696.2188,1446.4844 L10696.2188,1449.2031 Q10695.5938,1448.625 10695,1448.3594 Q10694.4063,1448.0781 10693.7813,1448.0781 Q10692.4375,1448.0781 10691.75,1449.1563 Q10691.0625,1450.2188 10691.0625,1452.3125 Q10691.0625,1454.4063 10691.75,1455.4844 Q10692.4375,1456.5469 10693.7813,1456.5469 Q10694.4063,1456.5469 10695,1456.2813 Q10695.5938,1456 10696.2188,1455.4219 L10696.2188,1458.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="157" x="10713.75" y="1457.3467">SimplifiedElkanKMeans</text><rect fill="#FFFFFF" height="15.9688" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="152" x="11098.5" y="1433.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="150" x="11099.5" y="1445.6387">V extends NumberVector</text><line style="stroke:#181818;stroke-width:0.5;" x1="10459.5" x2="11246.5" y1="1468.5" y2="1468.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10466.5" y="1479.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="93" x="10478.5" y="1485.4951">LOG: Logging</text><polygon fill="none" points="10469.5,1493.4453,10473.5,1497.4453,10469.5,1501.4453,10465.5,1497.4453" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="111" x="10478.5" y="1501.792">varstat: boolean</text><line style="stroke:#181818;stroke-width:0.5;" x1="10459.5" x2="11246.5" y1="1509.0938" y2="1509.0938"/><ellipse cx="10469.5" cy="1522.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="763" x="10478.5" y="1526.0889">SimplifiedElkanKMeans(NumberVectorDistance&lt;? super NumberVector&gt;, int, int, KMeansInitialization, boolean)</text><ellipse cx="10469.5" cy="1539.0391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="486" x="10478.5" y="1542.3857">run(Relation&lt;V extends NumberVector&gt;): Clustering&lt;KMeansModel&gt;</text><polygon fill="#FFFF44" points="10469.5,1550.3359,10473.5,1554.3359,10469.5,1558.3359,10465.5,1554.3359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="145" x="10478.5" y="1558.6826">getLogger(): Logging</text></g></a><!--MD5=[686a8b363796d1ce31981992c329c650]
class elki.clustering.kmeans.ExponionKMeans--><a href="ExponionKMeans.html" target="_top" title="ExponionKMeans.html" xlink:actuate="onRequest" xlink:href="ExponionKMeans.html" xlink:show="new" xlink:title="ExponionKMeans.html" xlink:type="simple"><g id="elem_elki.clustering.kmeans.ExponionKMeans"><rect codeLine="69" fill="#F1F1F1" height="113.1875" id="elki.clustering.kmeans.ExponionKMeans" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="751" x="4376.5" y="1732.5"/><ellipse cx="4611.25" cy="1748.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M4614.2188,1754.1406 Q4613.6406,1754.4375 4613,1754.5781 Q4612.3594,1754.7344 4611.6563,1754.7344 Q4609.1563,1754.7344 4607.8281,1753.0938 Q4606.5156,1751.4375 4606.5156,1748.3125 Q4606.5156,1745.1875 4607.8281,1743.5313 Q4609.1563,1741.875 4611.6563,1741.875 Q4612.3594,1741.875 4613,1742.0313 Q4613.6563,1742.1875 4614.2188,1742.4844 L4614.2188,1745.2031 Q4613.5938,1744.625 4613,1744.3594 Q4612.4063,1744.0781 4611.7813,1744.0781 Q4610.4375,1744.0781 4609.75,1745.1563 Q4609.0625,1746.2188 4609.0625,1748.3125 Q4609.0625,1750.4063 4609.75,1751.4844 Q4610.4375,1752.5469 4611.7813,1752.5469 Q4612.4063,1752.5469 4613,1752.2813 Q4613.5938,1752 4614.2188,1751.4219 L4614.2188,1754.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="119" x="4631.75" y="1753.3467">ExponionKMeans</text><rect fill="#FFFFFF" height="15.9688" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="152" x="4978.5" y="1729.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="150" x="4979.5" y="1741.6387">V extends NumberVector</text><line style="stroke:#181818;stroke-width:0.5;" x1="4377.5" x2="5126.5" y1="1764.5" y2="1764.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4384.5" y="1775.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="93" x="4396.5" y="1781.4951">LOG: Logging</text><line style="stroke:#181818;stroke-width:0.5;" x1="4377.5" x2="5126.5" y1="1788.7969" y2="1788.7969"/><ellipse cx="4387.5" cy="1802.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="725" x="4396.5" y="1805.792">ExponionKMeans(NumberVectorDistance&lt;? super NumberVector&gt;, int, int, KMeansInitialization, boolean)</text><ellipse cx="4387.5" cy="1818.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="486" x="4396.5" y="1822.0889">run(Relation&lt;V extends NumberVector&gt;): Clustering&lt;KMeansModel&gt;</text><polygon fill="#FFFF44" points="4387.5,1830.0391,4391.5,1834.0391,4387.5,1838.0391,4383.5,1834.0391" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="145" x="4396.5" y="1838.3857">getLogger(): Logging</text></g></a><!--MD5=[3e8e91386098bf6837fec7ccac2e32c6]
class elki.clustering.kmeans.SortMeans--><a href="SortMeans.html" target="_top" title="SortMeans.html" xlink:actuate="onRequest" xlink:href="SortMeans.html" xlink:show="new" xlink:title="SortMeans.html" xlink:type="simple"><g id="elem_elki.clustering.kmeans.SortMeans"><rect codeLine="89" fill="#F1F1F1" height="113.1875" id="elki.clustering.kmeans.SortMeans" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="642" x="6867" y="1732.5"/><ellipse cx="7069.75" cy="1748.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M7072.7188,1754.1406 Q7072.1406,1754.4375 7071.5,1754.5781 Q7070.8594,1754.7344 7070.1563,1754.7344 Q7067.6563,1754.7344 7066.3281,1753.0938 Q7065.0156,1751.4375 7065.0156,1748.3125 Q7065.0156,1745.1875 7066.3281,1743.5313 Q7067.6563,1741.875 7070.1563,1741.875 Q7070.8594,1741.875 7071.5,1742.0313 Q7072.1563,1742.1875 7072.7188,1742.4844 L7072.7188,1745.2031 Q7072.0938,1744.625 7071.5,1744.3594 Q7070.9063,1744.0781 7070.2813,1744.0781 Q7068.9375,1744.0781 7068.25,1745.1563 Q7067.5625,1746.2188 7067.5625,1748.3125 Q7067.5625,1750.4063 7068.25,1751.4844 Q7068.9375,1752.5469 7070.2813,1752.5469 Q7070.9063,1752.5469 7071.5,1752.2813 Q7072.0938,1752 7072.7188,1751.4219 L7072.7188,1754.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="74" x="7090.25" y="1753.3467">SortMeans</text><rect fill="#FFFFFF" height="15.9688" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="152" x="7360" y="1729.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="150" x="7361" y="1741.6387">V extends NumberVector</text><line style="stroke:#181818;stroke-width:0.5;" x1="6868" x2="7508" y1="1764.5" y2="1764.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6875" y="1775.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="93" x="6887" y="1781.4951">LOG: Logging</text><line style="stroke:#181818;stroke-width:0.5;" x1="6868" x2="7508" y1="1788.7969" y2="1788.7969"/><ellipse cx="6878" cy="1802.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="616" x="6887" y="1805.792">SortMeans(NumberVectorDistance&lt;? super NumberVector&gt;, int, int, KMeansInitialization)</text><ellipse cx="6878" cy="1818.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="486" x="6887" y="1822.0889">run(Relation&lt;V extends NumberVector&gt;): Clustering&lt;KMeansModel&gt;</text><polygon fill="#FFFF44" points="6878,1830.0391,6882,1834.0391,6878,1838.0391,6874,1834.0391" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="145" x="6887" y="1838.3857">getLogger(): Logging</text></g></a><!--MD5=[98860d69df00030ba56bb5693d58d93e]
class elki.clustering.kmeans.HamerlyKMeans--><a href="HamerlyKMeans.html" target="_top" title="HamerlyKMeans.html" xlink:actuate="onRequest" xlink:href="HamerlyKMeans.html" xlink:show="new" xlink:title="HamerlyKMeans.html" xlink:type="simple"><g id="elem_elki.clustering.kmeans.HamerlyKMeans"><rect codeLine="108" fill="#F1F1F1" height="129.4844" id="elki.clustering.kmeans.HamerlyKMeans" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="742" x="4895" y="1436.5"/><ellipse cx="5129.75" cy="1452.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M5132.7188,1458.1406 Q5132.1406,1458.4375 5131.5,1458.5781 Q5130.8594,1458.7344 5130.1563,1458.7344 Q5127.6563,1458.7344 5126.3281,1457.0938 Q5125.0156,1455.4375 5125.0156,1452.3125 Q5125.0156,1449.1875 5126.3281,1447.5313 Q5127.6563,1445.875 5130.1563,1445.875 Q5130.8594,1445.875 5131.5,1446.0313 Q5132.1563,1446.1875 5132.7188,1446.4844 L5132.7188,1449.2031 Q5132.0938,1448.625 5131.5,1448.3594 Q5130.9063,1448.0781 5130.2813,1448.0781 Q5128.9375,1448.0781 5128.25,1449.1563 Q5127.5625,1450.2188 5127.5625,1452.3125 Q5127.5625,1454.4063 5128.25,1455.4844 Q5128.9375,1456.5469 5130.2813,1456.5469 Q5130.9063,1456.5469 5131.5,1456.2813 Q5132.0938,1456 5132.7188,1455.4219 L5132.7188,1458.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="110" x="5150.25" y="1457.3467">HamerlyKMeans</text><rect fill="#FFFFFF" height="15.9688" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="152" x="5488" y="1433.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="150" x="5489" y="1445.6387">V extends NumberVector</text><line style="stroke:#181818;stroke-width:0.5;" x1="4896" x2="5636" y1="1468.5" y2="1468.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4903" y="1479.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="93" x="4915" y="1485.4951">LOG: Logging</text><polygon fill="none" points="4906,1493.4453,4910,1497.4453,4906,1501.4453,4902,1497.4453" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="111" x="4915" y="1501.792">varstat: boolean</text><line style="stroke:#181818;stroke-width:0.5;" x1="4896" x2="5636" y1="1509.0938" y2="1509.0938"/><ellipse cx="4906" cy="1522.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="716" x="4915" y="1526.0889">HamerlyKMeans(NumberVectorDistance&lt;? super NumberVector&gt;, int, int, KMeansInitialization, boolean)</text><ellipse cx="4906" cy="1539.0391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="486" x="4915" y="1542.3857">run(Relation&lt;V extends NumberVector&gt;): Clustering&lt;KMeansModel&gt;</text><polygon fill="#FFFF44" points="4906,1550.3359,4910,1554.3359,4906,1558.3359,4902,1554.3359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="145" x="4915" y="1558.6826">getLogger(): Logging</text></g></a><!--MD5=[74832b5ff48cb9f80abed99dd722639a]
class elki.clustering.kmeans.KMeansMinusMinus--><a href="KMeansMinusMinus.html" target="_top" title="KMeansMinusMinus.html" xlink:actuate="onRequest" xlink:href="KMeansMinusMinus.html" xlink:show="new" xlink:title="KMeansMinusMinus.html" xlink:type="simple"><g id="elem_elki.clustering.kmeans.KMeansMinusMinus"><rect codeLine="137" fill="#F1F1F1" height="145.7813" id="elki.clustering.kmeans.KMeansMinusMinus" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="825" x="2620.5" y="1428"/><ellipse cx="2883.25" cy="1444" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M2886.2188,1449.6406 Q2885.6406,1449.9375 2885,1450.0781 Q2884.3594,1450.2344 2883.6563,1450.2344 Q2881.1563,1450.2344 2879.8281,1448.5938 Q2878.5156,1446.9375 2878.5156,1443.8125 Q2878.5156,1440.6875 2879.8281,1439.0313 Q2881.1563,1437.375 2883.6563,1437.375 Q2884.3594,1437.375 2885,1437.5313 Q2885.6563,1437.6875 2886.2188,1437.9844 L2886.2188,1440.7031 Q2885.5938,1440.125 2885,1439.8594 Q2884.4063,1439.5781 2883.7813,1439.5781 Q2882.4375,1439.5781 2881.75,1440.6563 Q2881.0625,1441.7188 2881.0625,1443.8125 Q2881.0625,1445.9063 2881.75,1446.9844 Q2882.4375,1448.0469 2883.7813,1448.0469 Q2884.4063,1448.0469 2885,1447.7813 Q2885.5938,1447.5 2886.2188,1446.9219 L2886.2188,1449.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="137" x="2903.75" y="1448.8467">KMeansMinusMinus</text><rect fill="#FFFFFF" height="15.9688" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="152" x="3296.5" y="1425"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="150" x="3297.5" y="1437.1387">V extends NumberVector</text><line style="stroke:#181818;stroke-width:0.5;" x1="2621.5" x2="3444.5" y1="1460" y2="1460"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2628.5" y="1470.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="93" x="2640.5" y="1476.9951">LOG: Logging</text><ellipse cx="2631.5" cy="1489.9453" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="84" x="2640.5" y="1493.292">rate: double</text><ellipse cx="2631.5" cy="1506.2422" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="131" x="2640.5" y="1509.5889">noiseFlag: boolean</text><line style="stroke:#181818;stroke-width:0.5;" x1="2621.5" x2="3444.5" y1="1516.8906" y2="1516.8906"/><ellipse cx="2631.5" cy="1530.5391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="799" x="2640.5" y="1533.8857">KMeansMinusMinus(NumberVectorDistance&lt;? super NumberVector&gt;, int, int, KMeansInitialization, double, boolean)</text><ellipse cx="2631.5" cy="1546.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="486" x="2640.5" y="1550.1826">run(Relation&lt;V extends NumberVector&gt;): Clustering&lt;KMeansModel&gt;</text><polygon fill="#FFFF44" points="2631.5,1558.1328,2635.5,1562.1328,2631.5,1566.1328,2627.5,1562.1328" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="145" x="2640.5" y="1566.4795">getLogger(): Logging</text></g></a><!--MD5=[060a894130be9b1854e593e4d7208736]
class elki.clustering.kmeans.AnnulusKMeans--><a href="AnnulusKMeans.html" target="_top" title="AnnulusKMeans.html" xlink:actuate="onRequest" xlink:href="AnnulusKMeans.html" xlink:show="new" xlink:title="AnnulusKMeans.html" xlink:type="simple"><g id="elem_elki.clustering.kmeans.AnnulusKMeans"><rect codeLine="168" fill="#F1F1F1" height="113.1875" id="elki.clustering.kmeans.AnnulusKMeans" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="743" x="3598.5" y="1732.5"/><ellipse cx="3833.25" cy="1748.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M3836.2188,1754.1406 Q3835.6406,1754.4375 3835,1754.5781 Q3834.3594,1754.7344 3833.6563,1754.7344 Q3831.1563,1754.7344 3829.8281,1753.0938 Q3828.5156,1751.4375 3828.5156,1748.3125 Q3828.5156,1745.1875 3829.8281,1743.5313 Q3831.1563,1741.875 3833.6563,1741.875 Q3834.3594,1741.875 3835,1742.0313 Q3835.6563,1742.1875 3836.2188,1742.4844 L3836.2188,1745.2031 Q3835.5938,1744.625 3835,1744.3594 Q3834.4063,1744.0781 3833.7813,1744.0781 Q3832.4375,1744.0781 3831.75,1745.1563 Q3831.0625,1746.2188 3831.0625,1748.3125 Q3831.0625,1750.4063 3831.75,1751.4844 Q3832.4375,1752.5469 3833.7813,1752.5469 Q3834.4063,1752.5469 3835,1752.2813 Q3835.5938,1752 3836.2188,1751.4219 L3836.2188,1754.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="111" x="3853.75" y="1753.3467">AnnulusKMeans</text><rect fill="#FFFFFF" height="15.9688" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="152" x="4192.5" y="1729.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="150" x="4193.5" y="1741.6387">V extends NumberVector</text><line style="stroke:#181818;stroke-width:0.5;" x1="3599.5" x2="4340.5" y1="1764.5" y2="1764.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3606.5" y="1775.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="93" x="3618.5" y="1781.4951">LOG: Logging</text><line style="stroke:#181818;stroke-width:0.5;" x1="3599.5" x2="4340.5" y1="1788.7969" y2="1788.7969"/><ellipse cx="3609.5" cy="1802.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="717" x="3618.5" y="1805.792">AnnulusKMeans(NumberVectorDistance&lt;? super NumberVector&gt;, int, int, KMeansInitialization, boolean)</text><ellipse cx="3609.5" cy="1818.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="486" x="3618.5" y="1822.0889">run(Relation&lt;V extends NumberVector&gt;): Clustering&lt;KMeansModel&gt;</text><polygon fill="#FFFF44" points="3609.5,1830.0391,3613.5,1834.0391,3609.5,1838.0391,3605.5,1834.0391" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="145" x="3618.5" y="1838.3857">getLogger(): Logging</text></g></a><!--MD5=[b066122ffec80dd43f9d08aa02e6f09f]
class elki.clustering.kmeans.FuzzyCMeans--><a href="FuzzyCMeans.html" target="_top" title="FuzzyCMeans.html" xlink:actuate="onRequest" xlink:href="FuzzyCMeans.html" xlink:show="new" xlink:title="FuzzyCMeans.html" xlink:type="simple"><g id="elem_elki.clustering.kmeans.FuzzyCMeans"><rect codeLine="190" fill="#F1F1F1" height="308.75" id="elki.clustering.kmeans.FuzzyCMeans" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="839" x="1028.5" y="189"/><ellipse cx="1318.75" cy="205" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1321.7188,210.6406 Q1321.1406,210.9375 1320.5,211.0781 Q1319.8594,211.2344 1319.1563,211.2344 Q1316.6563,211.2344 1315.3281,209.5938 Q1314.0156,207.9375 1314.0156,204.8125 Q1314.0156,201.6875 1315.3281,200.0313 Q1316.6563,198.375 1319.1563,198.375 Q1319.8594,198.375 1320.5,198.5313 Q1321.1563,198.6875 1321.7188,198.9844 L1321.7188,201.7031 Q1321.0938,201.125 1320.5,200.8594 Q1319.9063,200.5781 1319.2813,200.5781 Q1317.9375,200.5781 1317.25,201.6563 Q1316.5625,202.7188 1316.5625,204.8125 Q1316.5625,206.9063 1317.25,207.9844 Q1317.9375,209.0469 1319.2813,209.0469 Q1319.9063,209.0469 1320.5,208.7813 Q1321.0938,208.5 1321.7188,207.9219 L1321.7188,210.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="96" x="1339.25" y="209.8467">FuzzyCMeans</text><rect fill="#FFFFFF" height="15.9688" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="152" x="1718.5" y="186"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="150" x="1719.5" y="198.1387">V extends NumberVector</text><line style="stroke:#181818;stroke-width:0.5;" x1="1029.5" x2="1866.5" y1="221" y2="221"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1036.5" y="231.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="93" x="1048.5" y="237.9951">LOG: Logging</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1036.5" y="247.9453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="76" x="1048.5" y="254.292">KEY: String</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1036.5" y="264.2422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="34" x="1048.5" y="270.5889">k: int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1036.5" y="280.5391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="70" x="1048.5" y="286.8857">m: double</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1036.5" y="296.8359"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="91" x="1048.5" y="303.1826">delta: double</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1036.5" y="313.1328"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="73" x="1048.5" y="319.4795">miniter: int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1036.5" y="329.4297"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="76" x="1048.5" y="335.7764">maxiter: int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1036.5" y="345.7266"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="91" x="1048.5" y="352.0732">soft: boolean</text><ellipse cx="1039.5" cy="365.0234" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="328" x="1048.5" y="368.3701">SOFT_TYPE: SimpleTypeInformation&lt;double[]&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="1029.5" x2="1866.5" y1="375.6719" y2="375.6719"/><ellipse cx="1039.5" cy="389.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="491" x="1048.5" y="392.667">FuzzyCMeans(int, int, int, double, double, boolean, KMeansInitialization)</text><ellipse cx="1039.5" cy="405.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="469" x="1048.5" y="408.9639">run(Relation&lt;V extends NumberVector&gt;): Clustering&lt;MeanModel&gt;</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1036.5" y="418.9141"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="720" x="1048.5" y="425.2607">updateMeans(Relation&lt;V extends NumberVector&gt;, WritableDataStore&lt;double[]&gt;, double[], int): double</text><ellipse cx="1039.5" cy="438.2109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="813" x="1048.5" y="441.5576">assignProbabilitiesToInstances(Relation&lt;V extends NumberVector&gt;, double[], WritableDataStore&lt;double[]&gt;): double</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1036.5" y="451.5078"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="365" x="1048.5" y="457.8545">distance(V extends NumberVector, double[]): double</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1036.5" y="467.8047"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="250" x="1048.5" y="474.1514">distance(double[], double[]): double</text><ellipse cx="1039.5" cy="487.1016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="306" x="1048.5" y="490.4482">getInputTypeRestriction(): TypeInformation[]</text></g></a><!--MD5=[e499bed26fb5dee54b25855a8310f81f]
class elki.clustering.kmeans.MacQueenKMeans--><a href="MacQueenKMeans.html" target="_top" title="MacQueenKMeans.html" xlink:actuate="onRequest" xlink:href="MacQueenKMeans.html" xlink:show="new" xlink:title="MacQueenKMeans.html" xlink:type="simple"><g id="elem_elki.clustering.kmeans.MacQueenKMeans"><rect codeLine="226" fill="#F1F1F1" height="113.1875" id="elki.clustering.kmeans.MacQueenKMeans" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="698" x="3481" y="1444.5"/><ellipse cx="3683.75" cy="1460.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M3686.7188,1466.1406 Q3686.1406,1466.4375 3685.5,1466.5781 Q3684.8594,1466.7344 3684.1563,1466.7344 Q3681.6563,1466.7344 3680.3281,1465.0938 Q3679.0156,1463.4375 3679.0156,1460.3125 Q3679.0156,1457.1875 3680.3281,1455.5313 Q3681.6563,1453.875 3684.1563,1453.875 Q3684.8594,1453.875 3685.5,1454.0313 Q3686.1563,1454.1875 3686.7188,1454.4844 L3686.7188,1457.2031 Q3686.0938,1456.625 3685.5,1456.3594 Q3684.9063,1456.0781 3684.2813,1456.0781 Q3682.9375,1456.0781 3682.25,1457.1563 Q3681.5625,1458.2188 3681.5625,1460.3125 Q3681.5625,1462.4063 3682.25,1463.4844 Q3682.9375,1464.5469 3684.2813,1464.5469 Q3684.9063,1464.5469 3685.5,1464.2813 Q3686.0938,1464 3686.7188,1463.4219 L3686.7188,1466.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="130" x="3704.25" y="1465.3467">MacQueenKMeans</text><rect fill="#FFFFFF" height="15.9688" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="152" x="4030" y="1441.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="150" x="4031" y="1453.6387">V extends NumberVector</text><line style="stroke:#181818;stroke-width:0.5;" x1="3482" x2="4178" y1="1476.5" y2="1476.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3489" y="1487.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="93" x="3501" y="1493.4951">LOG: Logging</text><line style="stroke:#181818;stroke-width:0.5;" x1="3482" x2="4178" y1="1500.7969" y2="1500.7969"/><ellipse cx="3492" cy="1514.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="672" x="3501" y="1517.792">MacQueenKMeans(NumberVectorDistance&lt;? super NumberVector&gt;, int, int, KMeansInitialization)</text><ellipse cx="3492" cy="1530.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="486" x="3501" y="1534.0889">run(Relation&lt;V extends NumberVector&gt;): Clustering&lt;KMeansModel&gt;</text><polygon fill="#FFFF44" points="3492,1542.0391,3496,1546.0391,3492,1550.0391,3488,1546.0391" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="145" x="3501" y="1550.3857">getLogger(): Logging</text></g></a><!--MD5=[17adbb7f4fc4e0912607b190fac5d4fc]
class elki.clustering.kmeans.KDTreePruningKMeans--><a href="KDTreePruningKMeans.html" target="_top" title="KDTreePruningKMeans.html" xlink:actuate="onRequest" xlink:href="KDTreePruningKMeans.html" xlink:show="new" xlink:title="KDTreePruningKMeans.html" xlink:type="simple"><g id="elem_elki.clustering.kmeans.KDTreePruningKMeans"><rect codeLine="244" fill="#F1F1F1" height="129.4844" id="elki.clustering.kmeans.KDTreePruningKMeans" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="790" x="5672" y="1436.5"/><ellipse cx="5905.75" cy="1452.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M5908.7188,1458.1406 Q5908.1406,1458.4375 5907.5,1458.5781 Q5906.8594,1458.7344 5906.1563,1458.7344 Q5903.6563,1458.7344 5902.3281,1457.0938 Q5901.0156,1455.4375 5901.0156,1452.3125 Q5901.0156,1449.1875 5902.3281,1447.5313 Q5903.6563,1445.875 5906.1563,1445.875 Q5906.8594,1445.875 5907.5,1446.0313 Q5908.1563,1446.1875 5908.7188,1446.4844 L5908.7188,1449.2031 Q5908.0938,1448.625 5907.5,1448.3594 Q5906.9063,1448.0781 5906.2813,1448.0781 Q5904.9375,1448.0781 5904.25,1449.1563 Q5903.5625,1450.2188 5903.5625,1452.3125 Q5903.5625,1454.4063 5904.25,1455.4844 Q5904.9375,1456.5469 5906.2813,1456.5469 Q5906.9063,1456.5469 5907.5,1456.2813 Q5908.0938,1456 5908.7188,1455.4219 L5908.7188,1458.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="160" x="5926.25" y="1457.3467">KDTreePruningKMeans</text><rect fill="#FFFFFF" height="15.9688" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="152" x="6313" y="1433.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="150" x="6314" y="1445.6387">V extends NumberVector</text><line style="stroke:#181818;stroke-width:0.5;" x1="5673" x2="6461" y1="1468.5" y2="1468.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5680" y="1479.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="93" x="5692" y="1485.4951">LOG: Logging</text><polygon fill="none" points="5683,1493.4453,5687,1497.4453,5683,1501.4453,5679,1497.4453" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="78" x="5692" y="1501.792">leafsize: int</text><line style="stroke:#181818;stroke-width:0.5;" x1="5673" x2="6461" y1="1509.0938" y2="1509.0938"/><ellipse cx="5683" cy="1522.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="764" x="5692" y="1526.0889">KDTreePruningKMeans(NumberVectorDistance&lt;? super NumberVector&gt;, int, int, KMeansInitialization, Split, int)</text><ellipse cx="5683" cy="1539.0391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="486" x="5692" y="1542.3857">run(Relation&lt;V extends NumberVector&gt;): Clustering&lt;KMeansModel&gt;</text><polygon fill="#FFFF44" points="5683,1550.3359,5687,1554.3359,5683,1558.3359,5679,1554.3359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="145" x="5692" y="1558.6826">getLogger(): Logging</text></g></a><!--MD5=[fc8a3ee6ad329b4964769f227768530b]
class elki.clustering.kmeans.KDTreePruningKMeans.Split--><a href="KDTreePruningKMeans.Split.html" target="_top" title="KDTreePruningKMeans.Split.html" xlink:actuate="onRequest" xlink:href="KDTreePruningKMeans.Split.html" xlink:show="new" xlink:title="KDTreePruningKMeans.Split.html" xlink:type="simple"><g id="elem_elki.clustering.kmeans.KDTreePruningKMeans.Split"><rect codeLine="252" fill="#F1F1F1" height="113.1875" id="elki.clustering.kmeans.KDTreePruningKMeans.Split" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="225" x="5988.5" y="1732.5"/><ellipse cx="6003.5" cy="1748.5" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M6007.6094,1754.5 L5999.8906,1754.5 L5999.8906,1742.1094 L6007.6094,1742.1094 L6007.6094,1744.2656 L6002.3438,1744.2656 L6002.3438,1746.9375 L6007.1094,1746.9375 L6007.1094,1749.0938 L6002.3438,1749.0938 L6002.3438,1752.3438 L6007.6094,1752.3438 L6007.6094,1754.5 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="193" x="6017.5" y="1753.3467">KDTreePruningKMeans.Split</text><line style="stroke:#181818;stroke-width:0.5;" x1="5989.5" x2="6212.5" y1="1764.5" y2="1764.5"/><ellipse cx="5999.5" cy="1778.1484" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="68" x="6008.5" y="1781.4951">MIDPOINT</text><ellipse cx="5999.5" cy="1794.4453" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="147" x="6008.5" y="1797.792">BOUNDED_MIDPOINT</text><ellipse cx="5999.5" cy="1810.7422" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="54" x="6008.5" y="1814.0889">MEDIAN</text><ellipse cx="5999.5" cy="1827.0391" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="29" x="6008.5" y="1830.3857">SSQ</text><line style="stroke:#181818;stroke-width:0.5;" x1="5989.5" x2="6212.5" y1="1837.6875" y2="1837.6875"/></g></a><!--MD5=[6b53f502786972fb13f0a27be19c33f2]
class elki.clustering.kmeans.KDTreePruningKMeans.KDNode--><a href="KDTreePruningKMeans.KDNode.html" target="_top" title="KDTreePruningKMeans.KDNode.html" xlink:actuate="onRequest" xlink:href="KDTreePruningKMeans.KDNode.html" xlink:show="new" xlink:title="KDTreePruningKMeans.KDNode.html" xlink:type="simple"><g id="elem_elki.clustering.kmeans.KDTreePruningKMeans.KDNode"><rect codeLine="281" fill="#F1F1F1" height="145.7813" id="elki.clustering.kmeans.KDTreePruningKMeans.KDNode" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="493" x="6248.5" y="1716"/><ellipse cx="6380.25" cy="1732" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M6383.2188,1737.6406 Q6382.6406,1737.9375 6382,1738.0781 Q6381.3594,1738.2344 6380.6563,1738.2344 Q6378.1563,1738.2344 6376.8281,1736.5938 Q6375.5156,1734.9375 6375.5156,1731.8125 Q6375.5156,1728.6875 6376.8281,1727.0313 Q6378.1563,1725.375 6380.6563,1725.375 Q6381.3594,1725.375 6382,1725.5313 Q6382.6563,1725.6875 6383.2188,1725.9844 L6383.2188,1728.7031 Q6382.5938,1728.125 6382,1727.8594 Q6381.4063,1727.5781 6380.7813,1727.5781 Q6379.4375,1727.5781 6378.75,1728.6563 Q6378.0625,1729.7188 6378.0625,1731.8125 Q6378.0625,1733.9063 6378.75,1734.9844 Q6379.4375,1736.0469 6380.7813,1736.0469 Q6381.4063,1736.0469 6382,1735.7813 Q6382.5938,1735.5 6383.2188,1734.9219 L6383.2188,1737.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="221" x="6400.75" y="1736.8467">KDTreePruningKMeans.KDNode</text><line style="stroke:#181818;stroke-width:0.5;" x1="6249.5" x2="6740.5" y1="1748" y2="1748"/><polygon fill="none" points="6259.5,1757.6484,6255.5,1763.6484,6263.5,1763.6484" style="stroke:#1963A0;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="97" x="6268.5" y="1764.9951">sum: double[]</text><polygon fill="none" points="6259.5,1773.9453,6255.5,1779.9453,6263.5,1779.9453" style="stroke:#1963A0;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="92" x="6268.5" y="1781.292">mid: double[]</text><polygon fill="none" points="6259.5,1790.2422,6255.5,1796.2422,6263.5,1796.2422" style="stroke:#1963A0;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="128" x="6268.5" y="1797.5889">halfwidth: double[]</text><polygon fill="none" points="6259.5,1806.5391,6255.5,1812.5391,6263.5,1812.5391" style="stroke:#1963A0;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="57" x="6268.5" y="1813.8857">start: int</text><polygon fill="none" points="6259.5,1822.8359,6255.5,1828.8359,6263.5,1828.8359" style="stroke:#1963A0;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="53" x="6268.5" y="1830.1826">end: int</text><line style="stroke:#181818;stroke-width:0.5;" x1="6249.5" x2="6740.5" y1="1837.4844" y2="1837.4844"/><ellipse cx="6259.5" cy="1851.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="467" x="6268.5" y="1854.4795">KDNode(Relation&lt;? extends NumberVector&gt;, DBIDArrayIter, int, int)</text></g></a><!--MD5=[d220a8ac9bb2977ce8fc8782430b5245]
class elki.clustering.kmeans.GMeans--><a href="GMeans.html" target="_top" title="GMeans.html" xlink:actuate="onRequest" xlink:href="GMeans.html" xlink:show="new" xlink:title="GMeans.html" xlink:type="simple"><g id="elem_elki.clustering.kmeans.GMeans"><rect codeLine="298" fill="#F1F1F1" height="145.7813" id="elki.clustering.kmeans.GMeans" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1246" x="1184" y="1716"/><ellipse cx="1627.75" cy="1732" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1630.7188,1737.6406 Q1630.1406,1737.9375 1629.5,1738.0781 Q1628.8594,1738.2344 1628.1563,1738.2344 Q1625.6563,1738.2344 1624.3281,1736.5938 Q1623.0156,1734.9375 1623.0156,1731.8125 Q1623.0156,1728.6875 1624.3281,1727.0313 Q1625.6563,1725.375 1628.1563,1725.375 Q1628.8594,1725.375 1629.5,1725.5313 Q1630.1563,1725.6875 1630.7188,1725.9844 L1630.7188,1728.7031 Q1630.0938,1728.125 1629.5,1727.8594 Q1628.9063,1727.5781 1628.2813,1727.5781 Q1626.9375,1727.5781 1626.25,1728.6563 Q1625.5625,1729.7188 1625.5625,1731.8125 Q1625.5625,1733.9063 1626.25,1734.9844 Q1626.9375,1736.0469 1628.2813,1736.0469 Q1628.9063,1736.0469 1629.5,1735.7813 Q1630.0938,1735.5 1630.7188,1734.9219 L1630.7188,1737.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="57" x="1648.25" y="1736.8467">GMeans</text><rect fill="#FFFFFF" height="15.9688" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="291" x="2142" y="1713"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="289" x="2143" y="1725.1387">V extends NumberVector, M extends MeanModel</text><line style="stroke:#181818;stroke-width:0.5;" x1="1185" x2="2429" y1="1748" y2="1748"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1192" y="1758.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="93" x="1204" y="1764.9951">LOG: Logging</text><polygon fill="none" points="1195,1772.9453,1199,1776.9453,1195,1780.9453,1191,1776.9453" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="100" x="1204" y="1781.292">critical: double</text><line style="stroke:#181818;stroke-width:0.5;" x1="1185" x2="2429" y1="1788.5938" y2="1788.5938"/><ellipse cx="1195" cy="1802.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1220" x="1204" y="1805.5889">GMeans(NumberVectorDistance&lt;? super NumberVector&gt;, double, int, int, int, KMeans&lt;V extends NumberVector, M extends MeanModel&gt;, KMeansInitialization, RandomFactory)</text><polygon fill="#FFFF44" points="1195,1813.5391,1199,1817.5391,1195,1821.5391,1191,1817.5391" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="862" x="1204" y="1821.8857">splitCluster(Cluster&lt;M extends MeanModel&gt;, Relation&lt;V extends NumberVector&gt;): List&lt;Cluster&lt;M extends MeanModel&gt;&gt;</text><polygon fill="#FFFF44" points="1195,1829.8359,1199,1833.8359,1195,1837.8359,1191,1833.8359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="649" x="1204" y="1838.1826">splitCentroid(Cluster&lt;? extends MeanModel&gt;, Relation&lt;V extends NumberVector&gt;): double[]</text><polygon fill="#FFFF44" points="1195,1846.1328,1199,1850.1328,1195,1854.1328,1191,1850.1328" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="145" x="1204" y="1854.4795">getLogger(): Logging</text></g></a><!--MD5=[8501db4a4604e9f3835676c01fdcd4c8]
class elki.clustering.kmeans.CompareMeans--><a href="CompareMeans.html" target="_top" title="CompareMeans.html" xlink:actuate="onRequest" xlink:href="CompareMeans.html" xlink:show="new" xlink:title="CompareMeans.html" xlink:type="simple"><g id="elem_elki.clustering.kmeans.CompareMeans"><rect codeLine="314" fill="#F1F1F1" height="113.1875" id="elki.clustering.kmeans.CompareMeans" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="677" x="6497.5" y="1444.5"/><ellipse cx="6700.25" cy="1460.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M6703.2188,1466.1406 Q6702.6406,1466.4375 6702,1466.5781 Q6701.3594,1466.7344 6700.6563,1466.7344 Q6698.1563,1466.7344 6696.8281,1465.0938 Q6695.5156,1463.4375 6695.5156,1460.3125 Q6695.5156,1457.1875 6696.8281,1455.5313 Q6698.1563,1453.875 6700.6563,1453.875 Q6701.3594,1453.875 6702,1454.0313 Q6702.6563,1454.1875 6703.2188,1454.4844 L6703.2188,1457.2031 Q6702.5938,1456.625 6702,1456.3594 Q6701.4063,1456.0781 6700.7813,1456.0781 Q6699.4375,1456.0781 6698.75,1457.1563 Q6698.0625,1458.2188 6698.0625,1460.3125 Q6698.0625,1462.4063 6698.75,1463.4844 Q6699.4375,1464.5469 6700.7813,1464.5469 Q6701.4063,1464.5469 6702,1464.2813 Q6702.5938,1464 6703.2188,1463.4219 L6703.2188,1466.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="109" x="6720.75" y="1465.3467">CompareMeans</text><rect fill="#FFFFFF" height="15.9688" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="152" x="7025.5" y="1441.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="150" x="7026.5" y="1453.6387">V extends NumberVector</text><line style="stroke:#181818;stroke-width:0.5;" x1="6498.5" x2="7173.5" y1="1476.5" y2="1476.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6505.5" y="1487.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="93" x="6517.5" y="1493.4951">LOG: Logging</text><line style="stroke:#181818;stroke-width:0.5;" x1="6498.5" x2="7173.5" y1="1500.7969" y2="1500.7969"/><ellipse cx="6508.5" cy="1514.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="651" x="6517.5" y="1517.792">CompareMeans(NumberVectorDistance&lt;? super NumberVector&gt;, int, int, KMeansInitialization)</text><ellipse cx="6508.5" cy="1530.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="486" x="6517.5" y="1534.0889">run(Relation&lt;V extends NumberVector&gt;): Clustering&lt;KMeansModel&gt;</text><polygon fill="#FFFF44" points="6508.5,1542.0391,6512.5,1546.0391,6508.5,1550.0391,6504.5,1546.0391" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="145" x="6517.5" y="1550.3857">getLogger(): Logging</text></g></a><!--MD5=[7de66356723c5c81b2e8b8815b34b848]
class elki.clustering.kmeans.BetulaLloydKMeans--><a href="BetulaLloydKMeans.html" target="_top" title="BetulaLloydKMeans.html" xlink:actuate="onRequest" xlink:href="BetulaLloydKMeans.html" xlink:show="new" xlink:title="BetulaLloydKMeans.html" xlink:type="simple"><g id="elem_elki.clustering.kmeans.BetulaLloydKMeans"><rect codeLine="335" fill="#F1F1F1" height="276.1563" id="elki.clustering.kmeans.BetulaLloydKMeans" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="646" x="4214" y="1363"/><ellipse cx="4465.75" cy="1379" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M4468.7188,1384.6406 Q4468.1406,1384.9375 4467.5,1385.0781 Q4466.8594,1385.2344 4466.1563,1385.2344 Q4463.6563,1385.2344 4462.3281,1383.5938 Q4461.0156,1381.9375 4461.0156,1378.8125 Q4461.0156,1375.6875 4462.3281,1374.0313 Q4463.6563,1372.375 4466.1563,1372.375 Q4466.8594,1372.375 4467.5,1372.5313 Q4468.1563,1372.6875 4468.7188,1372.9844 L4468.7188,1375.7031 Q4468.0938,1375.125 4467.5,1374.8594 Q4466.9063,1374.5781 4466.2813,1374.5781 Q4464.9375,1374.5781 4464.25,1375.6563 Q4463.5625,1376.7188 4463.5625,1378.8125 Q4463.5625,1380.9063 4464.25,1381.9844 Q4464.9375,1383.0469 4466.2813,1383.0469 Q4466.9063,1383.0469 4467.5,1382.7813 Q4468.0938,1382.5 4468.7188,1381.9219 L4468.7188,1384.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="134" x="4486.25" y="1383.8467">BetulaLloydKMeans</text><line style="stroke:#181818;stroke-width:0.5;" x1="4215" x2="4859" y1="1395" y2="1395"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4222" y="1405.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="93" x="4234" y="1411.9951">LOG: Logging</text><polygon fill="none" points="4225,1420.9453,4221,1426.9453,4229,1426.9453" style="stroke:#1963A0;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="148" x="4234" y="1428.292">cffactory: Factory&lt;?&gt;</text><polygon fill="none" points="4225,1437.2422,4221,1443.2422,4229,1443.2422" style="stroke:#1963A0;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="121" x="4234" y="1444.5889">storeIds: boolean</text><polygon fill="none" points="4225,1453.5391,4221,1459.5391,4229,1459.5391" style="stroke:#1963A0;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="157" x="4234" y="1460.8857">ignoreWeight: boolean</text><polygon fill="none" points="4225,1469.8359,4221,1475.8359,4229,1475.8359" style="stroke:#1963A0;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="90" x="4234" y="1477.1826">diststat: long</text><line style="stroke:#181818;stroke-width:0.5;" x1="4215" x2="4859" y1="1484.4844" y2="1484.4844"/><ellipse cx="4225" cy="1498.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="620" x="4234" y="1501.4795">BetulaLloydKMeans(int, int, Factory&lt;?&gt;, AbstractCFKMeansInitialization, boolean, boolean)</text><ellipse cx="4225" cy="1514.4297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="413" x="4234" y="1517.7764">run(Relation&lt;NumberVector&gt;): Clustering&lt;KMeansModel&gt;</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4222" y="1527.7266"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="545" x="4234" y="1534.0732">kmeans(ArrayList&lt;? extends ClusterFeature&gt;, int[], int[], CFTree&lt;?&gt;): double[]</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4222" y="1544.0234"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="514" x="4234" y="1550.3701">means(int[], double[], ArrayList&lt;? extends ClusterFeature&gt;, int[]): double[]</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4222" y="1560.3203"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="592" x="4234" y="1566.667">assignToNearestCluster(int[], double[], ArrayList&lt;? extends ClusterFeature&gt;, int[]): int</text><polygon fill="#FFFF44" points="4225,1574.6172,4229,1578.6172,4225,1582.6172,4221,1578.6172" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="595" x="4234" y="1582.9639">calculateVariances(int[], double[], ArrayList&lt;? extends ClusterFeature&gt;, int[]): double[]</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4222" y="1592.9141"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="292" x="4234" y="1599.2607">distance(NumberVector, double[]): double</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4222" y="1609.2109"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="250" x="4234" y="1615.5576">distance(double[], double[]): double</text><polygon fill="#FFFF44" points="4225,1623.5078,4229,1627.5078,4225,1631.5078,4221,1627.5078" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="145" x="4234" y="1631.8545">getLogger(): Logging</text></g></a><!--MD5=[47552a9b1d5c71c0d549a5a49c1fe600]
class elki.clustering.kmeans.SingleAssignmentKMeans--><a href="SingleAssignmentKMeans.html" target="_top" title="SingleAssignmentKMeans.html" xlink:actuate="onRequest" xlink:href="SingleAssignmentKMeans.html" xlink:show="new" xlink:title="SingleAssignmentKMeans.html" xlink:type="simple"><g id="elem_elki.clustering.kmeans.SingleAssignmentKMeans"><rect codeLine="362" fill="#F1F1F1" height="113.1875" id="elki.clustering.kmeans.SingleAssignmentKMeans" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="722" x="7209" y="1444.5"/><ellipse cx="7399.25" cy="1460.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M7402.2188,1466.1406 Q7401.6406,1466.4375 7401,1466.5781 Q7400.3594,1466.7344 7399.6563,1466.7344 Q7397.1563,1466.7344 7395.8281,1465.0938 Q7394.5156,1463.4375 7394.5156,1460.3125 Q7394.5156,1457.1875 7395.8281,1455.5313 Q7397.1563,1453.875 7399.6563,1453.875 Q7400.3594,1453.875 7401,1454.0313 Q7401.6563,1454.1875 7402.2188,1454.4844 L7402.2188,1457.2031 Q7401.5938,1456.625 7401,1456.3594 Q7400.4063,1456.0781 7399.7813,1456.0781 Q7398.4375,1456.0781 7397.75,1457.1563 Q7397.0625,1458.2188 7397.0625,1460.3125 Q7397.0625,1462.4063 7397.75,1463.4844 Q7398.4375,1464.5469 7399.7813,1464.5469 Q7400.4063,1464.5469 7401,1464.2813 Q7401.5938,1464 7402.2188,1463.4219 L7402.2188,1466.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="179" x="7419.75" y="1465.3467">SingleAssignmentKMeans</text><rect fill="#FFFFFF" height="15.9688" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="152" x="7782" y="1441.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="150" x="7783" y="1453.6387">V extends NumberVector</text><line style="stroke:#181818;stroke-width:0.5;" x1="7210" x2="7930" y1="1476.5" y2="1476.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="7217" y="1487.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="93" x="7229" y="1493.4951">LOG: Logging</text><line style="stroke:#181818;stroke-width:0.5;" x1="7210" x2="7930" y1="1500.7969" y2="1500.7969"/><ellipse cx="7220" cy="1514.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="696" x="7229" y="1517.792">SingleAssignmentKMeans(NumberVectorDistance&lt;? super NumberVector&gt;, int, KMeansInitialization)</text><ellipse cx="7220" cy="1530.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="486" x="7229" y="1534.0889">run(Relation&lt;V extends NumberVector&gt;): Clustering&lt;KMeansModel&gt;</text><polygon fill="#FFFF44" points="7220,1542.0391,7224,1546.0391,7220,1550.0391,7216,1546.0391" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="145" x="7229" y="1550.3857">getLogger(): Logging</text></g></a><!--MD5=[732ebbbe9581693179bb9e3677b53dfd]
class elki.clustering.kmeans.LloydKMeans--><a href="LloydKMeans.html" target="_top" title="LloydKMeans.html" xlink:actuate="onRequest" xlink:href="LloydKMeans.html" xlink:show="new" xlink:title="LloydKMeans.html" xlink:type="simple"><g id="elem_elki.clustering.kmeans.LloydKMeans"><rect codeLine="380" fill="#F1F1F1" height="113.1875" id="elki.clustering.kmeans.LloydKMeans" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="658" x="7966" y="1444.5"/><ellipse cx="8168.75" cy="1460.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M8171.7188,1466.1406 Q8171.1406,1466.4375 8170.5,1466.5781 Q8169.8594,1466.7344 8169.1563,1466.7344 Q8166.6563,1466.7344 8165.3281,1465.0938 Q8164.0156,1463.4375 8164.0156,1460.3125 Q8164.0156,1457.1875 8165.3281,1455.5313 Q8166.6563,1453.875 8169.1563,1453.875 Q8169.8594,1453.875 8170.5,1454.0313 Q8171.1563,1454.1875 8171.7188,1454.4844 L8171.7188,1457.2031 Q8171.0938,1456.625 8170.5,1456.3594 Q8169.9063,1456.0781 8169.2813,1456.0781 Q8167.9375,1456.0781 8167.25,1457.1563 Q8166.5625,1458.2188 8166.5625,1460.3125 Q8166.5625,1462.4063 8167.25,1463.4844 Q8167.9375,1464.5469 8169.2813,1464.5469 Q8169.9063,1464.5469 8170.5,1464.2813 Q8171.0938,1464 8171.7188,1463.4219 L8171.7188,1466.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="90" x="8189.25" y="1465.3467">LloydKMeans</text><rect fill="#FFFFFF" height="15.9688" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="152" x="8475" y="1441.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="150" x="8476" y="1453.6387">V extends NumberVector</text><line style="stroke:#181818;stroke-width:0.5;" x1="7967" x2="8623" y1="1476.5" y2="1476.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="7974" y="1487.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="93" x="7986" y="1493.4951">LOG: Logging</text><line style="stroke:#181818;stroke-width:0.5;" x1="7967" x2="8623" y1="1500.7969" y2="1500.7969"/><ellipse cx="7977" cy="1514.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="632" x="7986" y="1517.792">LloydKMeans(NumberVectorDistance&lt;? super NumberVector&gt;, int, int, KMeansInitialization)</text><ellipse cx="7977" cy="1530.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="486" x="7986" y="1534.0889">run(Relation&lt;V extends NumberVector&gt;): Clustering&lt;KMeansModel&gt;</text><polygon fill="#FFFF44" points="7977,1542.0391,7981,1546.0391,7977,1550.0391,7973,1546.0391" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="145" x="7986" y="1550.3857">getLogger(): Logging</text></g></a><!--MD5=[703c8672fe0133ee18e8f2529fd761da]
class elki.clustering.kmeans.XMeans--><a href="XMeans.html" target="_top" title="XMeans.html" xlink:actuate="onRequest" xlink:href="XMeans.html" xlink:show="new" xlink:title="XMeans.html" xlink:type="simple"><g id="elem_elki.clustering.kmeans.XMeans"><rect codeLine="397" fill="#F1F1F1" height="210.9688" id="elki.clustering.kmeans.XMeans" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1556" x="1029" y="1395.5"/><ellipse cx="1627.75" cy="1411.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1630.7188,1417.1406 Q1630.1406,1417.4375 1629.5,1417.5781 Q1628.8594,1417.7344 1628.1563,1417.7344 Q1625.6563,1417.7344 1624.3281,1416.0938 Q1623.0156,1414.4375 1623.0156,1411.3125 Q1623.0156,1408.1875 1624.3281,1406.5313 Q1625.6563,1404.875 1628.1563,1404.875 Q1628.8594,1404.875 1629.5,1405.0313 Q1630.1563,1405.1875 1630.7188,1405.4844 L1630.7188,1408.2031 Q1630.0938,1407.625 1629.5,1407.3594 Q1628.9063,1407.0781 1628.2813,1407.0781 Q1626.9375,1407.0781 1626.25,1408.1563 Q1625.5625,1409.2188 1625.5625,1411.3125 Q1625.5625,1413.4063 1626.25,1414.4844 Q1626.9375,1415.5469 1628.2813,1415.5469 Q1628.9063,1415.5469 1629.5,1415.2813 Q1630.0938,1415 1630.7188,1414.4219 L1630.7188,1417.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="57" x="1648.25" y="1416.3467">XMeans</text><rect fill="#FFFFFF" height="15.9688" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="291" x="2297" y="1392.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="289" x="2298" y="1404.6387">V extends NumberVector, M extends MeanModel</text><line style="stroke:#181818;stroke-width:0.5;" x1="1030" x2="2584" y1="1427.5" y2="1427.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1037" y="1438.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="93" x="1049" y="1444.4951">LOG: Logging</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1037" y="1454.4453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="66" x="1049" y="1460.792">k_min: int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1037" y="1470.7422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="69" x="1049" y="1477.0889">k_max: int</text><polygon fill="none" points="1040,1486.0391,1036,1492.0391,1044,1492.0391" style="stroke:#1963A0;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="140" x="1049" y="1493.3857">rnd: RandomFactory</text><line style="stroke:#181818;stroke-width:0.5;" x1="1030" x2="2584" y1="1500.6875" y2="1500.6875"/><ellipse cx="1040" cy="1514.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1530" x="1049" y="1517.6826">XMeans(NumberVectorDistance&lt;? super NumberVector&gt;, int, int, int, KMeans&lt;V extends NumberVector, M extends MeanModel&gt;, KMeansInitialization, KMeansQualityMeasure&lt;V extends NumberVector&gt;, RandomFactory)</text><ellipse cx="1040" cy="1530.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="545" x="1049" y="1533.9795">run(Relation&lt;V extends NumberVector&gt;): Clustering&lt;M extends MeanModel&gt;</text><polygon fill="#FFFF44" points="1040,1541.9297,1044,1545.9297,1040,1549.9297,1036,1545.9297" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="862" x="1049" y="1550.2764">splitCluster(Cluster&lt;M extends MeanModel&gt;, Relation&lt;V extends NumberVector&gt;): List&lt;Cluster&lt;M extends MeanModel&gt;&gt;</text><polygon fill="#FFFF44" points="1040,1558.2266,1044,1562.2266,1040,1566.2266,1036,1562.2266" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="649" x="1049" y="1566.5732">splitCentroid(Cluster&lt;? extends MeanModel&gt;, Relation&lt;V extends NumberVector&gt;): double[]</text><ellipse cx="1040" cy="1579.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="306" x="1049" y="1582.8701">getInputTypeRestriction(): TypeInformation[]</text><polygon fill="#FFFF44" points="1040,1590.8203,1044,1594.8203,1040,1598.8203,1036,1594.8203" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="145" x="1049" y="1599.167">getLogger(): Logging</text></g></a><!--MD5=[bfba96be4ac722c67c3e7ac3c179bb8b]
class elki.clustering.kmeans.HartiganWongKMeans--><a href="HartiganWongKMeans.html" target="_top" title="HartiganWongKMeans.html" xlink:actuate="onRequest" xlink:href="HartiganWongKMeans.html" xlink:show="new" xlink:title="HartiganWongKMeans.html" xlink:type="simple"><g id="elem_elki.clustering.kmeans.HartiganWongKMeans"><rect codeLine="423" fill="#F1F1F1" height="113.1875" id="elki.clustering.kmeans.HartiganWongKMeans" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="512" x="8659" y="1444.5"/><ellipse cx="8757.75" cy="1460.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M8760.7188,1466.1406 Q8760.1406,1466.4375 8759.5,1466.5781 Q8758.8594,1466.7344 8758.1563,1466.7344 Q8755.6563,1466.7344 8754.3281,1465.0938 Q8753.0156,1463.4375 8753.0156,1460.3125 Q8753.0156,1457.1875 8754.3281,1455.5313 Q8755.6563,1453.875 8758.1563,1453.875 Q8758.8594,1453.875 8759.5,1454.0313 Q8760.1563,1454.1875 8760.7188,1454.4844 L8760.7188,1457.2031 Q8760.0938,1456.625 8759.5,1456.3594 Q8758.9063,1456.0781 8758.2813,1456.0781 Q8756.9375,1456.0781 8756.25,1457.1563 Q8755.5625,1458.2188 8755.5625,1460.3125 Q8755.5625,1462.4063 8756.25,1463.4844 Q8756.9375,1464.5469 8758.2813,1464.5469 Q8758.9063,1464.5469 8759.5,1464.2813 Q8760.0938,1464 8760.7188,1463.4219 L8760.7188,1466.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="152" x="8778.25" y="1465.3467">HartiganWongKMeans</text><rect fill="#FFFFFF" height="15.9688" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="152" x="9022" y="1441.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="150" x="9023" y="1453.6387">V extends NumberVector</text><line style="stroke:#181818;stroke-width:0.5;" x1="8660" x2="9170" y1="1476.5" y2="1476.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="8667" y="1487.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="93" x="8679" y="1493.4951">LOG: Logging</text><line style="stroke:#181818;stroke-width:0.5;" x1="8660" x2="9170" y1="1500.7969" y2="1500.7969"/><ellipse cx="8670" cy="1514.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="321" x="8679" y="1517.792">HartiganWongKMeans(int, KMeansInitialization)</text><ellipse cx="8670" cy="1530.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="486" x="8679" y="1534.0889">run(Relation&lt;V extends NumberVector&gt;): Clustering&lt;KMeansModel&gt;</text><polygon fill="#FFFF44" points="8670,1542.0391,8674,1546.0391,8670,1550.0391,8666,1546.0391" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="145" x="8679" y="1550.3857">getLogger(): Logging</text></g></a><!--MD5=[320734c0d1aa9dd48272d9f9317ad921]
class elki.clustering.kmeans.ShallotKMeans--><a href="ShallotKMeans.html" target="_top" title="ShallotKMeans.html" xlink:actuate="onRequest" xlink:href="ShallotKMeans.html" xlink:show="new" xlink:title="ShallotKMeans.html" xlink:type="simple"><g id="elem_elki.clustering.kmeans.ShallotKMeans"><rect codeLine="455" fill="#F1F1F1" height="113.1875" id="elki.clustering.kmeans.ShallotKMeans" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="733" x="4385.5" y="1923"/><ellipse cx="4620.25" cy="1939" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M4623.2188,1944.6406 Q4622.6406,1944.9375 4622,1945.0781 Q4621.3594,1945.2344 4620.6563,1945.2344 Q4618.1563,1945.2344 4616.8281,1943.5938 Q4615.5156,1941.9375 4615.5156,1938.8125 Q4615.5156,1935.6875 4616.8281,1934.0313 Q4618.1563,1932.375 4620.6563,1932.375 Q4621.3594,1932.375 4622,1932.5313 Q4622.6563,1932.6875 4623.2188,1932.9844 L4623.2188,1935.7031 Q4622.5938,1935.125 4622,1934.8594 Q4621.4063,1934.5781 4620.7813,1934.5781 Q4619.4375,1934.5781 4618.75,1935.6563 Q4618.0625,1936.7188 4618.0625,1938.8125 Q4618.0625,1940.9063 4618.75,1941.9844 Q4619.4375,1943.0469 4620.7813,1943.0469 Q4621.4063,1943.0469 4622,1942.7813 Q4622.5938,1942.5 4623.2188,1941.9219 L4623.2188,1944.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="101" x="4640.75" y="1943.8467">ShallotKMeans</text><rect fill="#FFFFFF" height="15.9688" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="152" x="4969.5" y="1920"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="150" x="4970.5" y="1932.1387">V extends NumberVector</text><line style="stroke:#181818;stroke-width:0.5;" x1="4386.5" x2="5117.5" y1="1955" y2="1955"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4393.5" y="1965.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="93" x="4405.5" y="1971.9951">LOG: Logging</text><line style="stroke:#181818;stroke-width:0.5;" x1="4386.5" x2="5117.5" y1="1979.2969" y2="1979.2969"/><ellipse cx="4396.5" cy="1992.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="707" x="4405.5" y="1996.292">ShallotKMeans(NumberVectorDistance&lt;? super NumberVector&gt;, int, int, KMeansInitialization, boolean)</text><ellipse cx="4396.5" cy="2009.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="486" x="4405.5" y="2012.5889">run(Relation&lt;V extends NumberVector&gt;): Clustering&lt;KMeansModel&gt;</text><polygon fill="#FFFF44" points="4396.5,2020.5391,4400.5,2024.5391,4396.5,2028.5391,4392.5,2024.5391" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="145" x="4405.5" y="2028.8857">getLogger(): Logging</text></g></a><!--MD5=[0a33868f3944db44f2cf283714de4689]
class elki.clustering.kmeans.YinYangKMeans--><a href="YinYangKMeans.html" target="_top" title="YinYangKMeans.html" xlink:actuate="onRequest" xlink:href="YinYangKMeans.html" xlink:show="new" xlink:title="YinYangKMeans.html" xlink:type="simple"><g id="elem_elki.clustering.kmeans.YinYangKMeans"><rect codeLine="474" fill="#F1F1F1" height="145.7813" id="elki.clustering.kmeans.YinYangKMeans" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="512" x="9206" y="1428"/><ellipse cx="9325.25" cy="1444" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M9328.2188,1449.6406 Q9327.6406,1449.9375 9327,1450.0781 Q9326.3594,1450.2344 9325.6563,1450.2344 Q9323.1563,1450.2344 9321.8281,1448.5938 Q9320.5156,1446.9375 9320.5156,1443.8125 Q9320.5156,1440.6875 9321.8281,1439.0313 Q9323.1563,1437.375 9325.6563,1437.375 Q9326.3594,1437.375 9327,1437.5313 Q9327.6563,1437.6875 9328.2188,1437.9844 L9328.2188,1440.7031 Q9327.5938,1440.125 9327,1439.8594 Q9326.4063,1439.5781 9325.7813,1439.5781 Q9324.4375,1439.5781 9323.75,1440.6563 Q9323.0625,1441.7188 9323.0625,1443.8125 Q9323.0625,1445.9063 9323.75,1446.9844 Q9324.4375,1448.0469 9325.7813,1448.0469 Q9326.4063,1448.0469 9327,1447.7813 Q9327.5938,1447.5 9328.2188,1446.9219 L9328.2188,1449.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="111" x="9345.75" y="1448.8467">YinYangKMeans</text><rect fill="#FFFFFF" height="15.9688" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="152" x="9569" y="1425"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="150" x="9570" y="1437.1387">V extends NumberVector</text><line style="stroke:#181818;stroke-width:0.5;" x1="9207" x2="9717" y1="1460" y2="1460"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9214" y="1470.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="93" x="9226" y="1476.9951">LOG: Logging</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9214" y="1486.9453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="212" x="9226" y="1493.292">GROUP_KMEANS_MAXITER: int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9214" y="1503.2422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="31" x="9226" y="1509.5889">t: int</text><line style="stroke:#181818;stroke-width:0.5;" x1="9207" x2="9717" y1="1516.8906" y2="1516.8906"/><ellipse cx="9217" cy="1530.5391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="330" x="9226" y="1533.8857">YinYangKMeans(int, int, KMeansInitialization, int)</text><ellipse cx="9217" cy="1546.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="486" x="9226" y="1550.1826">run(Relation&lt;V extends NumberVector&gt;): Clustering&lt;KMeansModel&gt;</text><polygon fill="#FFFF44" points="9217,1558.1328,9221,1562.1328,9217,1566.1328,9213,1562.1328" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="145" x="9226" y="1566.4795">getLogger(): Logging</text></g></a><!--MD5=[1c6bdb9fcf8bbb53b35e5650d8f3c2a4]
class elki.clustering.kmeans.KDTreeFilteringKMeans--><a href="KDTreeFilteringKMeans.html" target="_top" title="KDTreeFilteringKMeans.html" xlink:actuate="onRequest" xlink:href="KDTreeFilteringKMeans.html" xlink:show="new" xlink:title="KDTreeFilteringKMeans.html" xlink:type="simple"><g id="elem_elki.clustering.kmeans.KDTreeFilteringKMeans"><rect codeLine="511" fill="#F1F1F1" height="113.1875" id="elki.clustering.kmeans.KDTreeFilteringKMeans" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="791" x="5162.5" y="1732.5"/><ellipse cx="5396.25" cy="1748.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M5399.2188,1754.1406 Q5398.6406,1754.4375 5398,1754.5781 Q5397.3594,1754.7344 5396.6563,1754.7344 Q5394.1563,1754.7344 5392.8281,1753.0938 Q5391.5156,1751.4375 5391.5156,1748.3125 Q5391.5156,1745.1875 5392.8281,1743.5313 Q5394.1563,1741.875 5396.6563,1741.875 Q5397.3594,1741.875 5398,1742.0313 Q5398.6563,1742.1875 5399.2188,1742.4844 L5399.2188,1745.2031 Q5398.5938,1744.625 5398,1744.3594 Q5397.4063,1744.0781 5396.7813,1744.0781 Q5395.4375,1744.0781 5394.75,1745.1563 Q5394.0625,1746.2188 5394.0625,1748.3125 Q5394.0625,1750.4063 5394.75,1751.4844 Q5395.4375,1752.5469 5396.7813,1752.5469 Q5397.4063,1752.5469 5398,1752.2813 Q5398.5938,1752 5399.2188,1751.4219 L5399.2188,1754.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="161" x="5416.75" y="1753.3467">KDTreeFilteringKMeans</text><rect fill="#FFFFFF" height="15.9688" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="152" x="5804.5" y="1729.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="150" x="5805.5" y="1741.6387">V extends NumberVector</text><line style="stroke:#181818;stroke-width:0.5;" x1="5163.5" x2="5952.5" y1="1764.5" y2="1764.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5170.5" y="1775.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="93" x="5182.5" y="1781.4951">LOG: Logging</text><line style="stroke:#181818;stroke-width:0.5;" x1="5163.5" x2="5952.5" y1="1788.7969" y2="1788.7969"/><ellipse cx="5173.5" cy="1802.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="765" x="5182.5" y="1805.792">KDTreeFilteringKMeans(NumberVectorDistance&lt;? super NumberVector&gt;, int, int, KMeansInitialization, Split, int)</text><ellipse cx="5173.5" cy="1818.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="486" x="5182.5" y="1822.0889">run(Relation&lt;V extends NumberVector&gt;): Clustering&lt;KMeansModel&gt;</text><polygon fill="#FFFF44" points="5173.5,1830.0391,5177.5,1834.0391,5173.5,1838.0391,5169.5,1834.0391" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="145" x="5182.5" y="1838.3857">getLogger(): Logging</text></g></a><!--MD5=[65741f9ab1d9b71be36c274839b2c01a]
class elki.clustering.kmeans.AbstractKMeans--><a href="AbstractKMeans.html" target="_top" title="AbstractKMeans.html" xlink:actuate="onRequest" xlink:href="AbstractKMeans.html" xlink:show="new" xlink:title="AbstractKMeans.html" xlink:type="simple"><g id="elem_elki.clustering.kmeans.AbstractKMeans"><rect codeLine="530" fill="#F1F1F1" height="422.8281" id="elki.clustering.kmeans.AbstractKMeans" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="730" x="5702" y="879"/><ellipse cx="5875.25" cy="895" fill="#A9DCDF" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M5875.3594,890.3438 L5874.2031,895.4219 L5876.5313,895.4219 L5875.3594,890.3438 Z M5873.875,888.1094 L5876.8594,888.1094 L5880.2188,900.5 L5877.7656,900.5 L5877,897.4375 L5873.7188,897.4375 L5872.9688,900.5 L5870.5313,900.5 L5873.875,888.1094 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="113" x="5895.75" y="899.8467">AbstractKMeans</text><rect fill="#FFFFFF" height="15.9688" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="260" x="6175" y="876"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="258" x="6176" y="888.1387">V extends NumberVector, M extends Model</text><line style="stroke:#181818;stroke-width:0.5;" x1="5703" x2="6431" y1="911" y2="911"/><polygon fill="none" points="5713,919.6484,5717,923.6484,5713,927.6484,5709,923.6484" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="408" x="5722" y="927.9951">distance: NumberVectorDistance&lt;? super NumberVector&gt;</text><polygon fill="none" points="5713,935.9453,5717,939.9453,5713,943.9453,5709,939.9453" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="34" x="5722" y="944.292">k: int</text><polygon fill="none" points="5713,952.2422,5717,956.2422,5713,960.2422,5709,956.2422" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="76" x="5722" y="960.5889">maxiter: int</text><line style="stroke:#181818;stroke-width:0.5;" x1="5703" x2="6431" y1="967.8906" y2="967.8906"/><ellipse cx="5713" cy="981.5391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="306" x="5722" y="984.8857">AbstractKMeans(int, int, KMeansInitialization)</text><ellipse cx="5713" cy="997.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="654" x="5722" y="1001.1826">AbstractKMeans(NumberVectorDistance&lt;? super NumberVector&gt;, int, int, KMeansInitialization)</text><ellipse cx="5713" cy="1014.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="306" x="5722" y="1017.4795">getInputTypeRestriction(): TypeInformation[]</text><polygon fill="#FFFF44" points="5713,1025.4297,5717,1029.4297,5713,1033.4297,5709,1029.4297" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="410" x="5722" y="1033.7764">initialMeans(Relation&lt;V extends NumberVector&gt;): double[]</text><polygon fill="#FFFF44" points="5713,1041.7266,5717,1045.7266,5713,1049.7266,5709,1045.7266" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="610" x="5722" y="1050.0732">means(List&lt;? extends DBIDs&gt;, double[], Relation&lt;? extends NumberVector&gt;): double[]</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5710" y="1060.0234"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="653" x="5722" y="1066.3701">denseMeans(List&lt;? extends DBIDs&gt;, double[], Relation&lt;? extends NumberVector&gt;): double[]</text><ellipse cx="5713" cy="1079.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="288" x="5722" y="1082.667">plusEquals(double[], NumberVector): void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5710" y="1092.6172"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="332" x="5722" y="1098.9639">densePlusEquals(double[], NumberVector): void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5710" y="1108.9141"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="383" x="5722" y="1115.2607">sparsePlusEquals(double[], SparseNumberVector): void</text><ellipse cx="5713" cy="1128.2109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="301" x="5722" y="1131.5576">minusEquals(double[], NumberVector): void</text><ellipse cx="5713" cy="1144.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="395" x="5722" y="1147.8545">plusMinusEquals(double[], double[], NumberVector): void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5710" y="1157.8047"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="439" x="5722" y="1164.1514">densePlusMinusEquals(double[], double[], NumberVector): void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5710" y="1174.1016"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="490" x="5722" y="1180.4482">sparsePlusMinusEquals(double[], double[], SparseNumberVector): void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5710" y="1190.3984"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="704" x="5722" y="1196.7451">sparseMeans(List&lt;? extends DBIDs&gt;, double[], Relation&lt;? extends SparseNumberVector&gt;): double[]</text><polygon fill="#FFFF44" points="5713,1204.6953,5717,1208.6953,5713,1212.6953,5709,1208.6953" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="239" x="5722" y="1213.042">nearestMeans(double[], int[]): void</text><polygon fill="#FFFF44" points="5713,1220.9922,5717,1224.9922,5713,1228.9922,5709,1224.9922" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="463" x="5722" y="1229.3389">incrementalUpdateMean(double[], NumberVector, int, double): void</text><ellipse cx="5713" cy="1242.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="95" x="5722" y="1245.6357">setK(int): void</text><ellipse cx="5713" cy="1258.5859" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="443" x="5722" y="1261.9326">getDistance(): NumberVectorDistance&lt;? super NumberVector&gt;</text><ellipse cx="5713" cy="1274.8828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="470" x="5722" y="1278.2295">setDistance(NumberVectorDistance&lt;? super NumberVector&gt;): void</text><polygon fill="#FFFF44" points="5713,1286.1797,5717,1290.1797,5713,1294.1797,5709,1290.1797" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="148" x="5722" y="1294.5264">getLogger(): Logging</text></g></a><!--MD5=[71e72c8caaeda77e4222b2f16d96f4d2]
class elki.clustering.kmeans.KMeans--><a href="KMeans.html" target="_top" title="KMeans.html" xlink:actuate="onRequest" xlink:href="KMeans.html" xlink:show="new" xlink:title="KMeans.html" xlink:type="simple"><g id="elem_elki.clustering.kmeans.KMeans"><rect codeLine="604" fill="#F1F1F1" height="227.2656" id="elki.clustering.kmeans.KMeans" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="542" x="1840" y="575"/><ellipse cx="1948.25" cy="591" fill="#B4A7E5" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1944.1719,586.7656 L1944.1719,584.6094 L1951.5625,584.6094 L1951.5625,586.7656 L1949.0938,586.7656 L1949.0938,594.8438 L1951.5625,594.8438 L1951.5625,597 L1944.1719,597 L1944.1719,594.8438 L1946.6406,594.8438 L1946.6406,586.7656 L1944.1719,586.7656 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="55" x="1968.75" y="595.8467">KMeans</text><rect fill="#FFFFFF" height="15.9688" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="260" x="2125" y="572"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="258" x="2126" y="584.1387">V extends NumberVector, M extends Model</text><line style="stroke:#181818;stroke-width:0.5;" x1="1841" x2="2381" y1="607" y2="607"/><ellipse cx="1851" cy="620.6484" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="238" x="1860" y="623.9951">DISTANCE_FUNCTION_ID: OptionID</text><ellipse cx="1851" cy="636.9453" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="115" x="1860" y="640.292">INIT_ID: OptionID</text><ellipse cx="1851" cy="653.2422" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="99" x="1860" y="656.5889">K_ID: OptionID</text><ellipse cx="1851" cy="669.5391" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="153" x="1860" y="672.8857">MAXITER_ID: OptionID</text><ellipse cx="1851" cy="685.8359" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="128" x="1860" y="689.1826">SEED_ID: OptionID</text><ellipse cx="1851" cy="702.1328" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="154" x="1860" y="705.4795">VARSTAT_ID: OptionID</text><line style="stroke:#181818;stroke-width:0.5;" x1="1841" x2="2381" y1="712.7813" y2="712.7813"/><ellipse cx="1851" cy="726.4297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="516" x="1860" y="729.7764">run(Relation&lt;V extends NumberVector&gt;): Clustering&lt;M extends Model&gt;</text><ellipse cx="1851" cy="742.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="97" x="1860" y="746.0732">setK(int): void</text><ellipse cx="1851" cy="759.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="478" x="1860" y="762.3701">setDistance(NumberVectorDistance&lt;? super NumberVector&gt;): void</text><ellipse cx="1851" cy="775.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="450" x="1860" y="778.667">getDistance(): NumberVectorDistance&lt;? super NumberVector&gt;</text><ellipse cx="1851" cy="791.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="275" x="1860" y="794.9639">setInitializer(KMeansInitialization): void</text></g></a><!--MD5=[7c3ba3d8732ac2960df35f40b59f96fa]
class elki.clustering.kmeans.BestOfMultipleKMeans--><a href="BestOfMultipleKMeans.html" target="_top" title="BestOfMultipleKMeans.html" xlink:actuate="onRequest" xlink:href="BestOfMultipleKMeans.html" xlink:show="new" xlink:title="BestOfMultipleKMeans.html" xlink:type="simple"><g id="elem_elki.clustering.kmeans.BestOfMultipleKMeans"><rect codeLine="618" fill="#F1F1F1" height="178.375" id="elki.clustering.kmeans.BestOfMultipleKMeans" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="980" x="1045" y="1001.5"/><ellipse cx="1306.75" cy="1017.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1309.7188,1023.1406 Q1309.1406,1023.4375 1308.5,1023.5781 Q1307.8594,1023.7344 1307.1563,1023.7344 Q1304.6563,1023.7344 1303.3281,1022.0938 Q1302.0156,1020.4375 1302.0156,1017.3125 Q1302.0156,1014.1875 1303.3281,1012.5313 Q1304.6563,1010.875 1307.1563,1010.875 Q1307.8594,1010.875 1308.5,1011.0313 Q1309.1563,1011.1875 1309.7188,1011.4844 L1309.7188,1014.2031 Q1309.0938,1013.625 1308.5,1013.3594 Q1307.9063,1013.0781 1307.2813,1013.0781 Q1305.9375,1013.0781 1305.25,1014.1563 Q1304.5625,1015.2188 1304.5625,1017.3125 Q1304.5625,1019.4063 1305.25,1020.4844 Q1305.9375,1021.5469 1307.2813,1021.5469 Q1307.9063,1021.5469 1308.5,1021.2813 Q1309.0938,1021 1309.7188,1020.4219 L1309.7188,1023.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="155" x="1327.25" y="1022.3467">BestOfMultipleKMeans</text><rect fill="#FFFFFF" height="15.9688" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="291" x="1737" y="998.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="289" x="1738" y="1010.6387">V extends NumberVector, M extends MeanModel</text><line style="stroke:#181818;stroke-width:0.5;" x1="1046" x2="2024" y1="1033.5" y2="1033.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1053" y="1044.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="93" x="1065" y="1050.4951">LOG: Logging</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1053" y="1060.4453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="58" x="1065" y="1066.792">trials: int</text><line style="stroke:#181818;stroke-width:0.5;" x1="1046" x2="2024" y1="1074.0938" y2="1074.0938"/><ellipse cx="1056" cy="1087.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="954" x="1065" y="1091.0889">BestOfMultipleKMeans(int, KMeans&lt;V extends NumberVector, M extends MeanModel&gt;, KMeansQualityMeasure&lt;? super NumberVector&gt;)</text><ellipse cx="1056" cy="1104.0391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="306" x="1065" y="1107.3857">getInputTypeRestriction(): TypeInformation[]</text><ellipse cx="1056" cy="1120.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="545" x="1065" y="1123.6826">run(Relation&lt;V extends NumberVector&gt;): Clustering&lt;M extends MeanModel&gt;</text><ellipse cx="1056" cy="1136.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="443" x="1065" y="1139.9795">getDistance(): NumberVectorDistance&lt;? super NumberVector&gt;</text><ellipse cx="1056" cy="1152.9297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="95" x="1065" y="1156.2764">setK(int): void</text><ellipse cx="1056" cy="1169.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="470" x="1065" y="1172.5732">setDistance(NumberVectorDistance&lt;? super NumberVector&gt;): void</text></g></a><!--MD5=[d2c2661589e5e4c8d8569483c0f654ae]
class elki.clustering.kmeans.KMediansLloyd--><a href="KMediansLloyd.html" target="_top" title="KMediansLloyd.html" xlink:actuate="onRequest" xlink:href="KMediansLloyd.html" xlink:show="new" xlink:title="KMediansLloyd.html" xlink:type="simple"><g id="elem_elki.clustering.kmeans.KMediansLloyd"><rect codeLine="638" fill="#F1F1F1" height="113.1875" id="elki.clustering.kmeans.KMediansLloyd" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="670" x="9753" y="1444.5"/><ellipse cx="9955.75" cy="1460.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M9958.7188,1466.1406 Q9958.1406,1466.4375 9957.5,1466.5781 Q9956.8594,1466.7344 9956.1563,1466.7344 Q9953.6563,1466.7344 9952.3281,1465.0938 Q9951.0156,1463.4375 9951.0156,1460.3125 Q9951.0156,1457.1875 9952.3281,1455.5313 Q9953.6563,1453.875 9956.1563,1453.875 Q9956.8594,1453.875 9957.5,1454.0313 Q9958.1563,1454.1875 9958.7188,1454.4844 L9958.7188,1457.2031 Q9958.0938,1456.625 9957.5,1456.3594 Q9956.9063,1456.0781 9956.2813,1456.0781 Q9954.9375,1456.0781 9954.25,1457.1563 Q9953.5625,1458.2188 9953.5625,1460.3125 Q9953.5625,1462.4063 9954.25,1463.4844 Q9954.9375,1464.5469 9956.2813,1464.5469 Q9956.9063,1464.5469 9957.5,1464.2813 Q9958.0938,1464 9958.7188,1463.4219 L9958.7188,1466.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="102" x="9976.25" y="1465.3467">KMediansLloyd</text><rect fill="#FFFFFF" height="15.9688" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="152" x="10274" y="1441.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="150" x="10275" y="1453.6387">V extends NumberVector</text><line style="stroke:#181818;stroke-width:0.5;" x1="9754" x2="10422" y1="1476.5" y2="1476.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9761" y="1487.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="93" x="9773" y="1493.4951">LOG: Logging</text><line style="stroke:#181818;stroke-width:0.5;" x1="9754" x2="10422" y1="1500.7969" y2="1500.7969"/><ellipse cx="9764" cy="1514.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="644" x="9773" y="1517.792">KMediansLloyd(NumberVectorDistance&lt;? super NumberVector&gt;, int, int, KMeansInitialization)</text><ellipse cx="9764" cy="1530.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="469" x="9773" y="1534.0889">run(Relation&lt;V extends NumberVector&gt;): Clustering&lt;MeanModel&gt;</text><polygon fill="#FFFF44" points="9764,1542.0391,9768,1546.0391,9764,1550.0391,9760,1546.0391" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="145" x="9773" y="1550.3857">getLogger(): Logging</text></g></a><!--MD5=[8478ceb8b0debaf9b4af355048dc8d2c]
class elki.clustering.kmeans.initialization.KMeansInitialization--><g id="elem_elki.clustering.kmeans.initialization.KMeansInitialization"><rect fill="#F1F1F1" height="48" id="elki.clustering.kmeans.initialization.KMeansInitialization" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="166" x="22" y="1765"/><ellipse cx="37" cy="1781" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M39.9688,1786.6406 Q39.3906,1786.9375 38.75,1787.0781 Q38.1094,1787.2344 37.4063,1787.2344 Q34.9063,1787.2344 33.5781,1785.5938 Q32.2656,1783.9375 32.2656,1780.8125 Q32.2656,1777.6875 33.5781,1776.0313 Q34.9063,1774.375 37.4063,1774.375 Q38.1094,1774.375 38.75,1774.5313 Q39.4063,1774.6875 39.9688,1774.9844 L39.9688,1777.7031 Q39.3438,1777.125 38.75,1776.8594 Q38.1563,1776.5781 37.5313,1776.5781 Q36.1875,1776.5781 35.5,1777.6563 Q34.8125,1778.7188 34.8125,1780.8125 Q34.8125,1782.9063 35.5,1783.9844 Q36.1875,1785.0469 37.5313,1785.0469 Q38.1563,1785.0469 38.75,1784.7813 Q39.3438,1784.5 39.9688,1783.9219 L39.9688,1786.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="134" x="51" y="1785.8467">KMeansInitialization</text><line style="stroke:#181818;stroke-width:0.5;" x1="23" x2="187" y1="1797" y2="1797"/><line style="stroke:#181818;stroke-width:0.5;" x1="23" x2="187" y1="1805" y2="1805"/></g><!--MD5=[e5f1f1043f50cadc3b215e93d0088306]
class elki.clustering.kmeans.initialization.Predefined--><g id="elem_elki.clustering.kmeans.initialization.Predefined"><rect fill="#F1F1F1" height="48" id="elki.clustering.kmeans.initialization.Predefined" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="107" x="223.5" y="1765"/><ellipse cx="238.5" cy="1781" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M241.4688,1786.6406 Q240.8906,1786.9375 240.25,1787.0781 Q239.6094,1787.2344 238.9063,1787.2344 Q236.4063,1787.2344 235.0781,1785.5938 Q233.7656,1783.9375 233.7656,1780.8125 Q233.7656,1777.6875 235.0781,1776.0313 Q236.4063,1774.375 238.9063,1774.375 Q239.6094,1774.375 240.25,1774.5313 Q240.9063,1774.6875 241.4688,1774.9844 L241.4688,1777.7031 Q240.8438,1777.125 240.25,1776.8594 Q239.6563,1776.5781 239.0313,1776.5781 Q237.6875,1776.5781 237,1777.6563 Q236.3125,1778.7188 236.3125,1780.8125 Q236.3125,1782.9063 237,1783.9844 Q237.6875,1785.0469 239.0313,1785.0469 Q239.6563,1785.0469 240.25,1784.7813 Q240.8438,1784.5 241.4688,1783.9219 L241.4688,1786.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="75" x="252.5" y="1785.8467">Predefined</text><line style="stroke:#181818;stroke-width:0.5;" x1="224.5" x2="329.5" y1="1797" y2="1797"/><line style="stroke:#181818;stroke-width:0.5;" x1="224.5" x2="329.5" y1="1805" y2="1805"/></g><!--MD5=[4fc33484231348e70db2dde04bb5858c]
class elki.clustering.ClusteringAlgorithm--><a href="../ClusteringAlgorithm.html" target="_top" title="../ClusteringAlgorithm.html" xlink:actuate="onRequest" xlink:href="../ClusteringAlgorithm.html" xlink:show="new" xlink:title="../ClusteringAlgorithm.html" xlink:type="simple"><g id="elem_elki.clustering.ClusteringAlgorithm"><rect codeLine="800" fill="#F1F1F1" height="64.2969" id="elki.clustering.ClusteringAlgorithm" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="446" x="2042" y="41"/><ellipse cx="2070.95" cy="57" fill="#B4A7E5" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M2066.8719,52.7656 L2066.8719,50.6094 L2074.2625,50.6094 L2074.2625,52.7656 L2071.7938,52.7656 L2071.7938,60.8438 L2074.2625,60.8438 L2074.2625,63 L2066.8719,63 L2066.8719,60.8438 L2069.3406,60.8438 L2069.3406,52.7656 L2066.8719,52.7656 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="140" x="2088.05" y="61.8467">ClusteringAlgorithm</text><rect fill="#FFFFFF" height="15.9688" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="241" x="2250" y="38"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="239" x="2251" y="50.1387">C extends Clustering&lt;? extends Model&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="2043" x2="2487" y1="73" y2="73"/><line style="stroke:#181818;stroke-width:0.5;" x1="2043" x2="2487" y1="81" y2="81"/><ellipse cx="2053" cy="94.6484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="420" x="2062" y="97.9951">autorun(Database): C extends Clustering&lt;? extends Model&gt;</text></g></a><!--MD5=[10c627af1972ab0f26199fcd0222c77f]
class elki.clustering.kmeans.initialization.betula.AbstractCFKMeansInitialization--><g id="elem_elki.clustering.kmeans.initialization.betula.AbstractCFKMeansInitialization"><rect fill="#F1F1F1" height="48" id="elki.clustering.kmeans.initialization.betula.AbstractCFKMeansInitialization" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="241" x="731.5" y="1765"/><ellipse cx="746.5" cy="1781" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M749.4688,1786.6406 Q748.8906,1786.9375 748.25,1787.0781 Q747.6094,1787.2344 746.9063,1787.2344 Q744.4063,1787.2344 743.0781,1785.5938 Q741.7656,1783.9375 741.7656,1780.8125 Q741.7656,1777.6875 743.0781,1776.0313 Q744.4063,1774.375 746.9063,1774.375 Q747.6094,1774.375 748.25,1774.5313 Q748.9063,1774.6875 749.4688,1774.9844 L749.4688,1777.7031 Q748.8438,1777.125 748.25,1776.8594 Q747.6563,1776.5781 747.0313,1776.5781 Q745.6875,1776.5781 745,1777.6563 Q744.3125,1778.7188 744.3125,1780.8125 Q744.3125,1782.9063 745,1783.9844 Q745.6875,1785.0469 747.0313,1785.0469 Q747.6563,1785.0469 748.25,1784.7813 Q748.8438,1784.5 749.4688,1783.9219 L749.4688,1786.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="209" x="760.5" y="1785.8467">AbstractCFKMeansInitialization</text><line style="stroke:#181818;stroke-width:0.5;" x1="732.5" x2="971.5" y1="1797" y2="1797"/><line style="stroke:#181818;stroke-width:0.5;" x1="732.5" x2="971.5" y1="1805" y2="1805"/></g><!--MD5=[7408a2c40f9c85e4873c45147941cdfa]
class elki.clustering.kmeans.quality.KMeansQualityMeasure--><g id="elem_elki.clustering.kmeans.quality.KMeansQualityMeasure"><rect fill="#F1F1F1" height="48" id="elki.clustering.kmeans.quality.KMeansQualityMeasure" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="193" x="410.5" y="1765"/><ellipse cx="425.5" cy="1781" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M428.4688,1786.6406 Q427.8906,1786.9375 427.25,1787.0781 Q426.6094,1787.2344 425.9063,1787.2344 Q423.4063,1787.2344 422.0781,1785.5938 Q420.7656,1783.9375 420.7656,1780.8125 Q420.7656,1777.6875 422.0781,1776.0313 Q423.4063,1774.375 425.9063,1774.375 Q426.6094,1774.375 427.25,1774.5313 Q427.9063,1774.6875 428.4688,1774.9844 L428.4688,1777.7031 Q427.8438,1777.125 427.25,1776.8594 Q426.6563,1776.5781 426.0313,1776.5781 Q424.6875,1776.5781 424,1777.6563 Q423.3125,1778.7188 423.3125,1780.8125 Q423.3125,1782.9063 424,1783.9844 Q424.6875,1785.0469 426.0313,1785.0469 Q426.6563,1785.0469 427.25,1784.7813 Q427.8438,1784.5 428.4688,1783.9219 L428.4688,1786.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="161" x="439.5" y="1785.8467">KMeansQualityMeasure</text><line style="stroke:#181818;stroke-width:0.5;" x1="411.5" x2="602.5" y1="1797" y2="1797"/><line style="stroke:#181818;stroke-width:0.5;" x1="411.5" x2="602.5" y1="1805" y2="1805"/></g><!--MD5=[7810fdb45f3658bef80b6d01f54598f8]
reverse link elki.clustering.kmeans.KMeans to elki.clustering.kmeans.BisectingKMeans--><g id="link_elki.clustering.kmeans.KMeans_elki.clustering.kmeans.BisectingKMeans"><path codeLine="657" d="M2191.61,555.72 C2192.84,552.15 2193.98,548.57 2195,545 C2205.25,509.18 2207.81,468.28 2207.31,432.8 " fill="none" id="elki.clustering.kmeans.KMeans-backto-elki.clustering.kmeans.BisectingKMeans" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="none" points="2197.99,558.62,2184.18,574.68,2184.96,553.51,2197.99,558.62" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[227a6ebeb47558d6daa09ba97194cc6d]
link elki.clustering.kmeans.BisectingKMeans to elki.clustering.kmeans.KMeans--><g id="link_elki.clustering.kmeans.BisectingKMeans_elki.clustering.kmeans.KMeans"><path codeLine="658" d="M2143.02,432.52 C2127.15,461.72 2112.07,495.18 2104,528 C2100.73,541.3 2098.98,555.42 2098.29,569.53 " fill="none" id="elki.clustering.kmeans.BisectingKMeans-to-elki.clustering.kmeans.KMeans" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="2098.09,574.73,2102.4465,565.8971,2098.2898,569.734,2094.4529,565.5773,2098.09,574.73" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="81" x="2105" y="541.0669">innerkMeans</text></g><!--MD5=[14a21841227aac331008d15765f3d195]
link elki.clustering.kmeans.BisectingKMeans to elki.clustering.kmeans.initialization.KMeansInitialization--><g id="link_elki.clustering.kmeans.BisectingKMeans_elki.clustering.kmeans.initialization.KMeansInitialization"><path codeLine="659" d="M2044.64,432.67 C1995,457.4 1938.92,481.91 1885,498 C1565.59,593.34 397,354.16 397,687.5 C397,687.5 397,687.5 397,1502 C397,1572.5 221.1,1705.85 142.34,1762.02 " fill="none" id="elki.clustering.kmeans.BisectingKMeans-to-elki.clustering.kmeans.initialization.KMeansInitialization" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="138.21,1764.96,147.8612,1762.9966,142.2825,1762.0592,143.2199,1756.4806,138.21,1764.96" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="56" x="398" y="1095.0669">initializer</text></g><!--MD5=[344c395f1eeee4788306cdaa6f9c827e]
reverse link elki.clustering.kmeans.SimplifiedElkanKMeans to elki.clustering.kmeans.ElkanKMeans--><g id="link_elki.clustering.kmeans.SimplifiedElkanKMeans_elki.clustering.kmeans.ElkanKMeans"><path codeLine="663" d="M10853,1585.97 C10853,1633.06 10853,1690.52 10853,1732.1 " fill="none" id="elki.clustering.kmeans.SimplifiedElkanKMeans-backto-elki.clustering.kmeans.ElkanKMeans" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="10846,1585.83,10853,1565.83,10860,1585.83,10846,1585.83" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[e259a9fc27f75ca5b50a4c781c4cf8fa]
reverse link elki.clustering.kmeans.AbstractKMeans to elki.clustering.kmeans.SimplifiedElkanKMeans--><g id="link_elki.clustering.kmeans.AbstractKMeans_elki.clustering.kmeans.SimplifiedElkanKMeans"><path codeLine="668" d="M6452.18,1102.63 C7373.14,1131.29 9682.28,1215.9 10441,1363 C10526.47,1379.57 10618.68,1409.08 10694.15,1436.47 " fill="none" id="elki.clustering.kmeans.AbstractKMeans-backto-elki.clustering.kmeans.SimplifiedElkanKMeans" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="6451.8,1109.62,6432.02,1102,6452.23,1095.62,6451.8,1109.62" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[f4cf2d7a50ecd02df2f7b027dac46724]
reverse link elki.clustering.kmeans.HamerlyKMeans to elki.clustering.kmeans.ExponionKMeans--><g id="link_elki.clustering.kmeans.HamerlyKMeans_elki.clustering.kmeans.ExponionKMeans"><path codeLine="673" d="M5134.12,1575.38 C5046.27,1624.26 4932.62,1687.5 4852.17,1732.27 " fill="none" id="elki.clustering.kmeans.HamerlyKMeans-backto-elki.clustering.kmeans.ExponionKMeans" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="5130.73,1569.26,5151.61,1565.65,5137.53,1581.49,5130.73,1569.26" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[97f3248e7e3a5ba628707096d8c9382e]
reverse link elki.clustering.kmeans.CompareMeans to elki.clustering.kmeans.SortMeans--><g id="link_elki.clustering.kmeans.CompareMeans_elki.clustering.kmeans.SortMeans"><path codeLine="678" d="M6920.52,1570.67 C6981.43,1620.16 7062.58,1686.1 7119.47,1732.32 " fill="none" id="elki.clustering.kmeans.CompareMeans-backto-elki.clustering.kmeans.SortMeans" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="6915.81,1575.87,6904.7,1557.82,6924.64,1565,6915.81,1575.87" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[98dc749a669a631541d1c0b17c5faafb]
reverse link elki.clustering.kmeans.AbstractKMeans to elki.clustering.kmeans.HamerlyKMeans--><g id="link_elki.clustering.kmeans.AbstractKMeans_elki.clustering.kmeans.HamerlyKMeans"><path codeLine="683" d="M5683.93,1286.86 C5577.99,1340.89 5470.43,1395.75 5390.95,1436.28 " fill="none" id="elki.clustering.kmeans.AbstractKMeans-backto-elki.clustering.kmeans.HamerlyKMeans" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="5680.96,1280.52,5701.95,1277.67,5687.32,1292.99,5680.96,1280.52" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[3d99fbf9515f58d087efe7e9a05aaaec]
reverse link elki.clustering.kmeans.AbstractKMeans to elki.clustering.kmeans.KMeansMinusMinus--><g id="link_elki.clustering.kmeans.AbstractKMeans_elki.clustering.kmeans.KMeansMinusMinus"><path codeLine="688" d="M5681.51,1107.15 C5170.04,1133.49 4241.14,1200.73 3464,1363 C3386.37,1379.21 3302.91,1403.95 3230.3,1427.97 " fill="none" id="elki.clustering.kmeans.AbstractKMeans-backto-elki.clustering.kmeans.KMeansMinusMinus" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="5681.45,1100.15,5701.78,1106.12,5682.17,1114.13,5681.45,1100.15" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[4784c3888d5bec0c24eb7210cff1c441]
reverse link elki.clustering.kmeans.HamerlyKMeans to elki.clustering.kmeans.AnnulusKMeans--><g id="link_elki.clustering.kmeans.HamerlyKMeans_elki.clustering.kmeans.AnnulusKMeans"><path codeLine="693" d="M5089.03,1572.55 C5023.57,1596.5 4948.2,1621.57 4878,1639 C4651.68,1695.19 4589.02,1677.66 4359,1716 C4328.09,1721.15 4295.84,1726.75 4263.71,1732.48 " fill="none" id="elki.clustering.kmeans.HamerlyKMeans-backto-elki.clustering.kmeans.AnnulusKMeans" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="5086.93,1565.87,5108.12,1565.5,5091.78,1579,5086.93,1565.87" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[d7a5afc1af91d744e38f84b3684af179]
reverse link elki.clustering.ClusteringAlgorithm to elki.clustering.kmeans.FuzzyCMeans--><g id="link_elki.clustering.ClusteringAlgorithm_elki.clustering.kmeans.FuzzyCMeans"><path codeLine="698" d="M2032.86,108.99 C1983.52,118.92 1932.11,131.17 1885,146 C1846.02,158.27 1805.91,173.06 1766.53,188.96 " fill="none" id="elki.clustering.ClusteringAlgorithm-backto-elki.clustering.kmeans.FuzzyCMeans" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="none" points="2031.78,102.07,2052.76,105.09,2034.48,115.81,2031.78,102.07" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[e73c7bedfd99227f8e8eb8f003345fc9]
link elki.clustering.kmeans.FuzzyCMeans to elki.clustering.kmeans.initialization.KMeansInitialization--><g id="link_elki.clustering.kmeans.FuzzyCMeans_elki.clustering.kmeans.initialization.KMeansInitialization"><path codeLine="699" d="M1028.49,381.79 C774.29,410.87 478.89,458.19 371,528 C299.33,574.38 264,602.14 264,687.5 C264,687.5 264,687.5 264,1502 C264,1609.14 177.71,1713.63 132.27,1761.24 " fill="none" id="elki.clustering.kmeans.FuzzyCMeans-to-elki.clustering.kmeans.initialization.KMeansInitialization" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="128.8,1764.84,137.9266,1761.1379,132.2707,1761.2408,132.1678,1755.5849,128.8,1764.84" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="56" x="265" y="1095.0669">initializer</text></g><!--MD5=[47ff14fedeb19c4923a72b742f33367d]
reverse link elki.clustering.kmeans.AbstractKMeans to elki.clustering.kmeans.MacQueenKMeans--><g id="link_elki.clustering.kmeans.AbstractKMeans_elki.clustering.kmeans.MacQueenKMeans"><path codeLine="703" d="M5681.84,1123.24 C5300.42,1160.3 4701.93,1233.68 4197,1363 C4115.8,1383.8 4027.72,1416.32 3958.2,1444.47 " fill="none" id="elki.clustering.kmeans.AbstractKMeans-backto-elki.clustering.kmeans.MacQueenKMeans" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="5681.24,1116.26,5701.82,1121.31,5682.58,1130.2,5681.24,1116.26" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[6c52cb1c4ee364e81a6e51c5309c6fba]
reverse link elki.clustering.kmeans.AbstractKMeans to elki.clustering.kmeans.KDTreePruningKMeans--><g id="link_elki.clustering.kmeans.AbstractKMeans_elki.clustering.kmeans.KDTreePruningKMeans"><path codeLine="708" d="M6067,1322.08 C6067,1364.1 6067,1404.61 6067,1436.33 " fill="none" id="elki.clustering.kmeans.AbstractKMeans-backto-elki.clustering.kmeans.KDTreePruningKMeans" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="6060,1322.03,6067,1302.03,6074,1322.03,6060,1322.03" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[6d02d5527cabb733abeee2ea53e2973d]
link elki.clustering.kmeans.KDTreePruningKMeans to elki.clustering.kmeans.KDTreePruningKMeans.Split--><g id="link_elki.clustering.kmeans.KDTreePruningKMeans_elki.clustering.kmeans.KDTreePruningKMeans.Split"><path codeLine="709" d="M6060.04,1565.91 C6057.64,1601.52 6057.06,1646.51 6064,1686 C6066.41,1699.71 6070.51,1714.01 6075.13,1727.42 " fill="none" id="elki.clustering.kmeans.KDTreePruningKMeans-to-elki.clustering.kmeans.KDTreePruningKMeans.Split" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="6076.85,1732.31,6077.6219,1722.4914,6075.1837,1727.5958,6070.0793,1725.1576,6076.85,1732.31" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="26" x="6065" y="1682.0669">split</text></g><!--MD5=[625f336ae0f338cc67959fd81eb33c9b]
reverse link elki.clustering.kmeans.KDTreePruningKMeans to elki.clustering.kmeans.KDTreePruningKMeans.Split--><g id="link_elki.clustering.kmeans.KDTreePruningKMeans_elki.clustering.kmeans.KDTreePruningKMeans.Split"><path codeLine="710" d="M6082.81,1580.59 C6087.83,1608.41 6092.89,1639.99 6096,1669 C6098.22,1689.66 6099.47,1712.44 6100.16,1732.49 " fill="none" id="elki.clustering.kmeans.KDTreePruningKMeans-backto-elki.clustering.kmeans.KDTreePruningKMeans.Split" style="stroke:#181818;stroke-width:1.0;"/><ellipse cx="6081.4959" cy="1573.4264" fill="#FFFFFF" rx="8" ry="8" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="6082.9518" x2="6080.04" y1="1581.2928" y2="1565.56"/><line style="stroke:#181818;stroke-width:1.0;" x1="6073.6295" x2="6089.3623" y1="1574.8823" y2="1571.9705"/></g><!--MD5=[5df43f45af86a60a67cbea859c4962ee]
reverse link elki.clustering.kmeans.KDTreePruningKMeans to elki.clustering.kmeans.KDTreePruningKMeans.KDNode--><g id="link_elki.clustering.kmeans.KDTreePruningKMeans_elki.clustering.kmeans.KDTreePruningKMeans.KDNode"><path codeLine="714" d="M6175,1574.17 C6239.94,1617.56 6322.31,1672.61 6387.22,1715.98 " fill="none" id="elki.clustering.kmeans.KDTreePruningKMeans-backto-elki.clustering.kmeans.KDTreePruningKMeans.KDNode" style="stroke:#181818;stroke-width:1.0;"/><ellipse cx="6168.9029" cy="1570.0929" fill="#FFFFFF" rx="8" ry="8" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="6175.5558" x2="6162.25" y1="1574.5358" y2="1565.65"/><line style="stroke:#181818;stroke-width:1.0;" x1="6164.46" x2="6173.3458" y1="1576.7458" y2="1563.44"/></g><!--MD5=[01a189533c56df3968d31dcd655e29bb]
link elki.clustering.kmeans.KDTreePruningKMeans.KDNode to elki.clustering.kmeans.KDTreePruningKMeans.KDNode--><g id="link_elki.clustering.kmeans.KDTreePruningKMeans.KDNode_elki.clustering.kmeans.KDTreePruningKMeans.KDNode"><path codeLine="715" d="M6741.58,1774.01 C6763.06,1777.18 6776.5,1782.18 6776.5,1789 C6776.5,1795.24 6765.27,1799.95 6746.94,1803.13 " fill="none" id="elki.clustering.kmeans.KDTreePruningKMeans.KDNode-to-elki.clustering.kmeans.KDTreePruningKMeans.KDNode" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="6741.58,1803.99,6751.1035,1806.5007,6746.5158,1803.1911,6749.8253,1798.6034,6741.58,1803.99" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="51" x="6787" y="1786.0669">leftChild</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="60" x="6782.5" y="1801.1997">rightChild</text></g><!--MD5=[d7ba26ad01326c41638969185ae12d4c]
reverse link elki.clustering.kmeans.XMeans to elki.clustering.kmeans.GMeans--><g id="link_elki.clustering.kmeans.XMeans_elki.clustering.kmeans.GMeans"><path codeLine="719" d="M1807,1627.1 C1807,1657.41 1807,1688.82 1807,1715.75 " fill="none" id="elki.clustering.kmeans.XMeans-backto-elki.clustering.kmeans.GMeans" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1800,1626.87,1807,1606.87,1814,1626.87,1800,1626.87" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[45e68dbafca0f734c9ce6e9b5bbde782]
reverse link elki.clustering.kmeans.AbstractKMeans to elki.clustering.kmeans.CompareMeans--><g id="link_elki.clustering.kmeans.AbstractKMeans_elki.clustering.kmeans.CompareMeans"><path codeLine="722" d="M6450.06,1294.98 C6553.71,1350.04 6657.5,1405.18 6731.3,1444.38 " fill="none" id="elki.clustering.kmeans.AbstractKMeans-backto-elki.clustering.kmeans.CompareMeans" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="6446.45,1301,6432.08,1285.43,6453.02,1288.63,6446.45,1301" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[e841fe91a3be14c35d378f1bd2301917]
reverse link elki.clustering.kmeans.AbstractKMeans to elki.clustering.kmeans.BetulaLloydKMeans--><g id="link_elki.clustering.kmeans.AbstractKMeans_elki.clustering.kmeans.BetulaLloydKMeans"><path codeLine="727" d="M5682.11,1163.36 C5447.32,1211.14 5142.48,1280.24 4878,1363 C4872.06,1364.86 4866.08,1366.77 4860.07,1368.74 " fill="none" id="elki.clustering.kmeans.AbstractKMeans-backto-elki.clustering.kmeans.BetulaLloydKMeans" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="5680.75,1156.49,5701.74,1159.38,5683.53,1170.21,5680.75,1156.49" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[21cb9e79900c3bf23b5c1e493facb757]
link elki.clustering.kmeans.BetulaLloydKMeans to elki.clustering.kmeans.initialization.betula.AbstractCFKMeansInitialization--><g id="link_elki.clustering.kmeans.BetulaLloydKMeans_elki.clustering.kmeans.initialization.betula.AbstractCFKMeansInitialization"><path codeLine="728" d="M4213.9,1635.27 C4208.24,1636.6 4202.61,1637.84 4197,1639 C4023.71,1674.78 1185.58,1676.98 1013,1716 C971.58,1725.36 927.79,1745.71 896.35,1762.4 " fill="none" id="elki.clustering.kmeans.BetulaLloydKMeans-to-elki.clustering.kmeans.initialization.betula.AbstractCFKMeansInitialization" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="891.81,1764.83,901.6322,1764.1059,896.2174,1762.4689,897.8544,1757.0541,891.81,1764.83" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="75" x="3138" y="1682.0669">initialization</text></g><!--MD5=[3c56da5e775f28013f8e34552bdc6fe8]
reverse link elki.clustering.kmeans.AbstractKMeans to elki.clustering.kmeans.SingleAssignmentKMeans--><g id="link_elki.clustering.kmeans.AbstractKMeans_elki.clustering.kmeans.SingleAssignmentKMeans"><path codeLine="732" d="M6451.94,1173.28 C6670.56,1222.5 6948.39,1289.7 7192,1363 C7271.04,1386.78 7357.71,1417.82 7428.1,1444.35 " fill="none" id="elki.clustering.kmeans.AbstractKMeans-backto-elki.clustering.kmeans.SingleAssignmentKMeans" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="6450.29,1180.09,6432.31,1168.88,6453.36,1166.43,6450.29,1180.09" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[020c530bdd480b0a977eccd8de739a86]
reverse link elki.clustering.kmeans.AbstractKMeans to elki.clustering.kmeans.LloydKMeans--><g id="link_elki.clustering.kmeans.AbstractKMeans_elki.clustering.kmeans.LloydKMeans"><path codeLine="737" d="M6452.53,1120.58 C6836.7,1155.72 7440.96,1227.77 7949,1363 C8026.1,1383.52 8109.34,1416.13 8174.85,1444.38 " fill="none" id="elki.clustering.kmeans.AbstractKMeans-backto-elki.clustering.kmeans.LloydKMeans" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="6451.7,1127.53,6432.41,1118.75,6452.96,1113.59,6451.7,1127.53" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[6f8b5db6080f46d111ae6cfa6ac67d7e]
reverse link elki.clustering.kmeans.AbstractKMeans to elki.clustering.kmeans.XMeans--><g id="link_elki.clustering.kmeans.AbstractKMeans_elki.clustering.kmeans.XMeans"><path codeLine="742" d="M5681.65,1110.07 C5040.86,1143.56 3716.51,1223.84 2603,1363 C2529.43,1372.19 2452.29,1383.44 2376.2,1395.49 " fill="none" id="elki.clustering.kmeans.AbstractKMeans-backto-elki.clustering.kmeans.XMeans" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="5681.48,1103.07,5701.81,1109.02,5682.21,1117.05,5681.48,1103.07" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[a2678d78c8d8e71908e28f4609387893]
link elki.clustering.kmeans.XMeans to elki.clustering.kmeans.KMeans--><g id="link_elki.clustering.kmeans.XMeans_elki.clustering.kmeans.KMeans"><path codeLine="743" d="M1966.61,1395.24 C1996.53,1368.36 2024.25,1337.01 2043,1302 C2126.38,1146.29 2130.5,936.7 2122.91,807.46 " fill="none" id="elki.clustering.kmeans.XMeans-to-elki.clustering.kmeans.KMeans" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="2122.59,802.14,2119.1362,811.3634,2122.8895,807.131,2127.1218,810.8843,2122.59,802.14" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="82" x="2126" y="1095.0669">innerKMeans</text></g><!--MD5=[81068708befdb054281e8cec0de58563]
link elki.clustering.kmeans.XMeans to elki.clustering.kmeans.initialization.Predefined--><g id="link_elki.clustering.kmeans.XMeans_elki.clustering.kmeans.initialization.Predefined"><path codeLine="744" d="M1222.63,1606.52 C1053.99,1634.65 869.48,1663.49 699,1686 C563.96,1703.83 523.09,1672.53 394,1716 C363.57,1726.25 332.79,1745.63 310.44,1761.7 " fill="none" id="elki.clustering.kmeans.XMeans-to-elki.clustering.kmeans.initialization.Predefined" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="306.37,1764.66,316.0052,1762.6196,310.4192,1761.7268,311.3121,1756.1409,306.37,1764.66" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="82" x="820" y="1682.0669">splitInitializer</text></g><!--MD5=[8dc3ed29798f6b8c00b3452ad283af85]
link elki.clustering.kmeans.XMeans to elki.clustering.kmeans.quality.KMeansQualityMeasure--><g id="link_elki.clustering.kmeans.XMeans_elki.clustering.kmeans.quality.KMeansQualityMeasure"><path codeLine="745" d="M1553.55,1606.58 C1467.8,1637.56 1370.56,1667.99 1279,1686 C1032.7,1734.45 961.35,1667.81 715,1716 C662.93,1726.19 606.15,1746.51 565.09,1762.97 " fill="none" id="elki.clustering.kmeans.XMeans-to-elki.clustering.kmeans.quality.KMeansQualityMeasure" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="560.16,1764.96,570.0028,1765.3053,564.7974,1763.0908,567.012,1757.8854,560.16,1764.96" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="127" x="1354" y="1682.0669">informationCriterion</text></g><!--MD5=[20714771230a1e96ba932296a30925b4]
reverse link elki.clustering.kmeans.AbstractKMeans to elki.clustering.kmeans.HartiganWongKMeans--><g id="link_elki.clustering.kmeans.AbstractKMeans_elki.clustering.kmeans.HartiganWongKMeans"><path codeLine="750" d="M6452.41,1115.13 C7067.23,1155.68 8241.49,1245.62 8642,1363 C8706.12,1381.79 8773.26,1415.27 8824.91,1444.43 " fill="none" id="elki.clustering.kmeans.AbstractKMeans-backto-elki.clustering.kmeans.HartiganWongKMeans" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="6451.63,1122.09,6432.13,1113.8,6452.54,1108.12,6451.63,1122.09" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[5286c8419103f2f7fe5120b9575c1ce1]
reverse link elki.clustering.kmeans.ExponionKMeans to elki.clustering.kmeans.ShallotKMeans--><g id="link_elki.clustering.kmeans.ExponionKMeans_elki.clustering.kmeans.ShallotKMeans"><path codeLine="755" d="M4752,1865.65 C4752,1884.71 4752,1904.82 4752,1922.71 " fill="none" id="elki.clustering.kmeans.ExponionKMeans-backto-elki.clustering.kmeans.ShallotKMeans" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="4745,1865.54,4752,1845.54,4759,1865.54,4745,1865.54" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[ae381b93ed75d59bbe8dae5b2d012e71]
reverse link elki.clustering.kmeans.AbstractKMeans to elki.clustering.kmeans.YinYangKMeans--><g id="link_elki.clustering.kmeans.AbstractKMeans_elki.clustering.kmeans.YinYangKMeans"><path codeLine="760" d="M6452.35,1106.88 C7170.09,1138.51 8684.54,1220.16 9189,1363 C9241.81,1377.95 9296.54,1403.21 9343.01,1427.99 " fill="none" id="elki.clustering.kmeans.AbstractKMeans-backto-elki.clustering.kmeans.YinYangKMeans" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="6451.81,1113.86,6432.14,1105.99,6452.43,1099.87,6451.81,1113.86" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[c0a91bae1cc60f266bde307398cd826b]
reverse link elki.clustering.kmeans.KDTreePruningKMeans to elki.clustering.kmeans.KDTreeFilteringKMeans--><g id="link_elki.clustering.kmeans.KDTreePruningKMeans_elki.clustering.kmeans.KDTreeFilteringKMeans"><path codeLine="765" d="M5936.13,1575.53 C5849.17,1624.39 5736.78,1687.55 5657.19,1732.27 " fill="none" id="elki.clustering.kmeans.KDTreePruningKMeans-backto-elki.clustering.kmeans.KDTreeFilteringKMeans" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="5932.86,1569.34,5953.72,1565.65,5939.71,1581.55,5932.86,1569.34" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[cf749b0a5fd798860dec876fcbfa13b1]
reverse link elki.clustering.kmeans.KMeans to elki.clustering.kmeans.AbstractKMeans--><g id="link_elki.clustering.kmeans.KMeans_elki.clustering.kmeans.AbstractKMeans"><path codeLine="770" d="M2402.25,718.95 C3110.63,790.57 4922.46,973.77 5701.69,1052.56 " fill="none" id="elki.clustering.kmeans.KMeans-backto-elki.clustering.kmeans.AbstractKMeans" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="none" points="2401.33,725.89,2382.13,716.91,2402.74,711.96,2401.33,725.89" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[647d9fc29809d4349a547ae2023f6a82]
link elki.clustering.kmeans.AbstractKMeans to elki.clustering.kmeans.initialization.KMeansInitialization--><g id="link_elki.clustering.kmeans.AbstractKMeans_elki.clustering.kmeans.initialization.KMeansInitialization"><path codeLine="771" d="M5701.82,1113.31 C5018.09,1153.74 3498.11,1241.67 2217,1302 C2131.25,1306.04 736.68,1305.44 673,1363 C581.09,1446.07 716.16,1546.28 634,1639 C505.82,1783.65 386.27,1646.31 206,1716 C179.3,1726.32 153.09,1745.34 134.07,1761.24 " fill="none" id="elki.clustering.kmeans.AbstractKMeans-to-elki.clustering.kmeans.initialization.KMeansInitialization" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="129.88,1764.79,139.3338,1762.0285,133.6964,1761.5596,134.1652,1755.9223,129.88,1764.79" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="56" x="674" y="1505.5669">initializer</text></g><!--MD5=[52dbb283eabd7d5e752c7e11efbc35ab]
reverse link elki.clustering.ClusteringAlgorithm to elki.clustering.kmeans.KMeans--><g id="link_elki.clustering.ClusteringAlgorithm_elki.clustering.kmeans.KMeans"><path codeLine="776" d="M2448.8,110.77 C2480.07,120.66 2505.79,132.44 2516,146 C2610.14,270.95 2599.97,366 2516,498 C2484.12,548.11 2435.13,585.19 2382.1,612.56 " fill="none" id="elki.clustering.ClusteringAlgorithm-backto-elki.clustering.kmeans.KMeans" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="2446.46,117.38,2429.26,105.01,2450.42,103.95,2446.46,117.38" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[27373f7a0a23d6e13e1bad408be97bda]
reverse link elki.clustering.kmeans.KMeans to elki.clustering.kmeans.BestOfMultipleKMeans--><g id="link_elki.clustering.kmeans.KMeans_elki.clustering.kmeans.BestOfMultipleKMeans"><path codeLine="777" d="M1932.19,813.67 C1844.61,874.49 1741.21,946.3 1661.87,1001.39 " fill="none" id="elki.clustering.kmeans.KMeans-backto-elki.clustering.kmeans.BestOfMultipleKMeans" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="none" points="1928.22,807.91,1948.64,802.25,1936.2,819.41,1928.22,807.91" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[a778b4e4513a7ca991049cc92e923bb5]
link elki.clustering.kmeans.BestOfMultipleKMeans to elki.clustering.kmeans.KMeans--><g id="link_elki.clustering.kmeans.BestOfMultipleKMeans_elki.clustering.kmeans.KMeans"><path codeLine="778" d="M1611.27,1001.37 C1661.08,947.56 1729.73,880.11 1800,832 C1813.77,822.57 1828.26,813.5 1843.15,804.82 " fill="none" id="elki.clustering.kmeans.BestOfMultipleKMeans-to-elki.clustering.kmeans.KMeans" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1847.78,802.13,1837.9859,803.1674,1843.4503,804.6307,1841.987,810.095,1847.78,802.13" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="81" x="1801" y="845.0669">innerkMeans</text></g><!--MD5=[aabe30467a3e192317ff1d56dcd418cc]
link elki.clustering.kmeans.BestOfMultipleKMeans to elki.clustering.kmeans.quality.KMeansQualityMeasure--><g id="link_elki.clustering.kmeans.BestOfMultipleKMeans_elki.clustering.kmeans.quality.KMeansQualityMeasure"><path codeLine="779" d="M1238.22,1179.59 C1127.75,1222.49 1006.6,1282.56 913,1363 C803.02,1457.51 824.88,1522.15 739,1639 C722.76,1661.1 720.38,1668.82 699,1686 C659.14,1718.04 607.69,1744.74 568.08,1762.77 " fill="none" id="elki.clustering.kmeans.BestOfMultipleKMeans-to-elki.clustering.kmeans.quality.KMeansQualityMeasure" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="563.31,1764.93,573.1587,1764.8729,567.8672,1762.8728,569.8672,1757.5813,563.31,1764.93" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="97" x="914" y="1505.5669">qualityMeasure</text></g><!--MD5=[919c034abaffd77b26802f62901166bf]
link elki.clustering.kmeans.BestOfMultipleKMeans to elki.clustering.kmeans.initialization.KMeansInitialization--><g id="link_elki.clustering.kmeans.BestOfMultipleKMeans_elki.clustering.kmeans.initialization.KMeansInitialization"><path codeLine="780" d="M1069.13,1179.5 C861.44,1227.24 646.81,1291.14 572,1363 C457.98,1472.52 550,1591.84 423,1686 C344.79,1743.99 296.48,1680.04 206,1716 C179.4,1726.57 153.19,1745.58 134.13,1761.42 " fill="none" id="elki.clustering.kmeans.BestOfMultipleKMeans-to-elki.clustering.kmeans.initialization.KMeansInitialization" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="129.94,1764.95,139.4048,1762.2266,133.7694,1761.735,134.2609,1756.0996,129.94,1764.95" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="56" x="573" y="1505.5669">initializer</text></g><!--MD5=[255c313437ffb9d8a55a3eb18a86ba59]
reverse link elki.clustering.kmeans.AbstractKMeans to elki.clustering.kmeans.KMediansLloyd--><g id="link_elki.clustering.kmeans.AbstractKMeans_elki.clustering.kmeans.KMediansLloyd"><path codeLine="785" d="M6452.46,1105.54 C7262.9,1137.41 9119.45,1223.5 9736,1363 C9816.91,1381.31 9903.81,1414.97 9971.02,1444.35 " fill="none" id="elki.clustering.kmeans.AbstractKMeans-backto-elki.clustering.kmeans.KMediansLloyd" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="6452.04,1112.52,6432.33,1104.75,6452.59,1098.54,6452.04,1112.52" style="stroke:#181818;stroke-width:1.0;"/></g><rect fill="none" height="11.6406" style="stroke:none;stroke-width:1.0;" width="186" x="5535" y="2058"/><text fill="#888888" font-family="sans-serif" font-size="10" lengthAdjust="spacing" textLength="186" x="5535" y="2067.2822">UMLDoclet 2.0.19, PlantUML 1.2022.8</text><!--MD5=[1955214bcd989392d00af1473f65e08d]
@startuml
    remove .*\.(Instance|Par|Parameterizer|Factory)$
    namespace elki.clustering.kmeans {

        class BisectingKMeans<V extends NumberVector, M extends MeanModel> [[BisectingKMeans.html]] {
            {static} -LOG: Logging
            -k: int
            +BisectingKMeans(int, KMeans<V extends NumberVector, M extends MeanModel>)
            +getInputTypeRestriction(): TypeInformation[]
            +run(Relation<V extends NumberVector>): Clustering<M extends MeanModel>
            +getDistance(): NumberVectorDistance<? super NumberVector>
            +setK(int): void
            +setDistance(NumberVectorDistance<? super NumberVector>): void
        }

        class elki.clustering.kmeans.BisectingKMeans.Par<V extends NumberVector, M extends MeanModel> {
            {static} +KMEANS_ID: OptionID
            #k: int
            +configure(Parameterization): void
            +make(): BisectingKMeans<V extends NumberVector, M extends MeanModel>
        }

        class ElkanKMeans<V extends NumberVector> [[ElkanKMeans.html]] {
            {static} -LOG: Logging
            +ElkanKMeans(NumberVectorDistance<? super NumberVector>, int, int, KMeansInitialization, boolean)
            +run(Relation<V extends NumberVector>): Clustering<KMeansModel>
            #getLogger(): Logging
        }

        class elki.clustering.kmeans.ElkanKMeans.Instance [[ElkanKMeans.Instance.html]] {
            ~cdist: double[]
            +Instance(Relation<? extends NumberVector>, NumberVectorDistance<?>, double[])
            #initialAssignToNearestCluster(): int
            #assignToNearestCluster(): int
            #getLogger(): Logging
        }

        class elki.clustering.kmeans.ElkanKMeans.Par<V extends NumberVector> [[ElkanKMeans.Par.html]] {
            +make(): ElkanKMeans<V extends NumberVector>
        }

        class SimplifiedElkanKMeans<V extends NumberVector> [[SimplifiedElkanKMeans.html]] {
            {static} -LOG: Logging
            #varstat: boolean
            +SimplifiedElkanKMeans(NumberVectorDistance<? super NumberVector>, int, int, KMeansInitialization, boolean)
            +run(Relation<V extends NumberVector>): Clustering<KMeansModel>
            #getLogger(): Logging
        }

        class elki.clustering.kmeans.SimplifiedElkanKMeans.Instance [[SimplifiedElkanKMeans.Instance.html]] {
            ~sums: double[]
            ~newmeans: double[]
            ~upper: WritableDoubleDataStore
            ~lower: WritableDataStore<double[]>
            ~sep: double[]
            +Instance(Relation<? extends NumberVector>, NumberVectorDistance<?>, double[])
            #iterate(int): int
            #initialAssignToNearestCluster(): int
            #assignToNearestCluster(): int
            #updateBounds(double[]): void
            #getLogger(): Logging
        }

        class elki.clustering.kmeans.SimplifiedElkanKMeans.Par<V extends NumberVector> [[SimplifiedElkanKMeans.Par.html]] {
            #needsMetric(): boolean
            +configure(Parameterization): void
            +make(): SimplifiedElkanKMeans<V extends NumberVector>
        }

        class ExponionKMeans<V extends NumberVector> [[ExponionKMeans.html]] {
            {static} -LOG: Logging
            +ExponionKMeans(NumberVectorDistance<? super NumberVector>, int, int, KMeansInitialization, boolean)
            +run(Relation<V extends NumberVector>): Clustering<KMeansModel>
            #getLogger(): Logging
        }

        class elki.clustering.kmeans.ExponionKMeans.Instance [[ExponionKMeans.Instance.html]] {
            ~cdist: double[]
            ~cnum: int[]
            +Instance(Relation<? extends NumberVector>, NumberVectorDistance<?>, double[])
            #initialAssignToNearestCluster(): int
            #assignToNearestCluster(): int
            #getLogger(): Logging
        }

        class elki.clustering.kmeans.ExponionKMeans.Par<V extends NumberVector> [[ExponionKMeans.Par.html]] {
            +make(): ExponionKMeans<V extends NumberVector>
        }

        class SortMeans<V extends NumberVector> [[SortMeans.html]] {
            {static} -LOG: Logging
            +SortMeans(NumberVectorDistance<? super NumberVector>, int, int, KMeansInitialization)
            +run(Relation<V extends NumberVector>): Clustering<KMeansModel>
            #getLogger(): Logging
        }

        class elki.clustering.kmeans.SortMeans.Instance [[SortMeans.Instance.html]] {
            ~cnum: int[]
            +Instance(Relation<? extends NumberVector>, NumberVectorDistance<?>, double[])
            #assignToNearestCluster(): int
            #getLogger(): Logging
        }

        class elki.clustering.kmeans.SortMeans.Par<V extends NumberVector> [[SortMeans.Par.html]] {
            #needsMetric(): boolean
            +make(): SortMeans<V extends NumberVector>
        }

        class HamerlyKMeans<V extends NumberVector> [[HamerlyKMeans.html]] {
            {static} -LOG: Logging
            #varstat: boolean
            +HamerlyKMeans(NumberVectorDistance<? super NumberVector>, int, int, KMeansInitialization, boolean)
            +run(Relation<V extends NumberVector>): Clustering<KMeansModel>
            #getLogger(): Logging
        }

        class elki.clustering.kmeans.HamerlyKMeans.Instance [[HamerlyKMeans.Instance.html]] {
            ~sums: double[]
            ~newmeans: double[]
            ~upper: WritableDoubleDataStore
            ~lower: WritableDoubleDataStore
            ~sep: double[]
            +Instance(Relation<? extends NumberVector>, NumberVectorDistance<?>, double[])
            #iterate(int): int
            #initialAssignToNearestCluster(): int
            #assignToNearestCluster(): int
            #recomputeSeperation(double[]): void
            #updateBounds(double[]): void
            #getLogger(): Logging
        }

        class elki.clustering.kmeans.HamerlyKMeans.Par<V extends NumberVector> [[HamerlyKMeans.Par.html]] {
            #needsMetric(): boolean
            +configure(Parameterization): void
            +make(): HamerlyKMeans<V extends NumberVector>
        }

        class KMeansMinusMinus<V extends NumberVector> [[KMeansMinusMinus.html]] {
            {static} -LOG: Logging
            +rate: double
            +noiseFlag: boolean
            +KMeansMinusMinus(NumberVectorDistance<? super NumberVector>, int, int, KMeansInitialization, double, boolean)
            +run(Relation<V extends NumberVector>): Clustering<KMeansModel>
            #getLogger(): Logging
        }

        class elki.clustering.kmeans.KMeansMinusMinus.Instance [[KMeansMinusMinus.Instance.html]] {
            ~minHeap: DoubleMinHeap
            ~heapsize: int
            ~prevvartotal: double
            ~clusters: List<ModifiableDoubleDBIDList>
            +Instance(Relation<? extends NumberVector>, NumberVectorDistance<?>, double[])
            #iterate(int): int
            #buildResultWithNoise(): Clustering<KMeansModel>
            #assignToNearestCluster(): int
            #meansWithTreshhold(double): double[]
            #getLogger(): Logging
        }

        class elki.clustering.kmeans.KMeansMinusMinus.Par<V extends NumberVector> [[KMeansMinusMinus.Par.html]] {
            {static} +RATE_ID: OptionID
            {static} +NOISE_FLAG_ID: OptionID
            -rate: double
            -noiseFlag: boolean
            +configure(Parameterization): void
            +make(): KMeansMinusMinus<V extends NumberVector>
        }

        class AnnulusKMeans<V extends NumberVector> [[AnnulusKMeans.html]] {
            {static} -LOG: Logging
            +AnnulusKMeans(NumberVectorDistance<? super NumberVector>, int, int, KMeansInitialization, boolean)
            +run(Relation<V extends NumberVector>): Clustering<KMeansModel>
            #getLogger(): Logging
        }

        class elki.clustering.kmeans.AnnulusKMeans.Instance [[AnnulusKMeans.Instance.html]] {
            ~second: WritableIntegerDataStore
            ~cdist: double[]
            ~cnum: int[]
            +Instance(Relation<? extends NumberVector>, NumberVectorDistance<?>, double[])
            #initialAssignToNearestCluster(): int
            #orderMeans(): void
            #assignToNearestCluster(): int
            #getLogger(): Logging
        }

        class elki.clustering.kmeans.AnnulusKMeans.Par<V extends NumberVector> [[AnnulusKMeans.Par.html]] {
            +make(): AnnulusKMeans<V extends NumberVector>
        }

        class FuzzyCMeans<V extends NumberVector> [[FuzzyCMeans.html]] {
            {static} -LOG: Logging
            {static} -KEY: String
            -k: int
            -m: double
            -delta: double
            -miniter: int
            -maxiter: int
            -soft: boolean
            {static} +SOFT_TYPE: SimpleTypeInformation<double[]>
            +FuzzyCMeans(int, int, int, double, double, boolean, KMeansInitialization)
            +run(Relation<V extends NumberVector>): Clustering<MeanModel>
            -updateMeans(Relation<V extends NumberVector>, WritableDataStore<double[]>, double[], int): double
            +assignProbabilitiesToInstances(Relation<V extends NumberVector>, double[], WritableDataStore<double[]>): double
            -distance(V extends NumberVector, double[]): double
            -distance(double[], double[]): double
            +getInputTypeRestriction(): TypeInformation[]
        }

        class elki.clustering.kmeans.FuzzyCMeans.Par [[FuzzyCMeans.Par.html]] {
            {static} +K_ID: OptionID
            {static} +DELTA_ID: OptionID
            {static} +MINITER_ID: OptionID
            {static} +M_ID: OptionID
            {static} +SOFT_ID: OptionID
            {static} +INIT_ID: OptionID
            #k: int
            #delta: double
            #miniter: int
            #maxiter: int
            #m: double
            #soft: boolean
            +configure(Parameterization): void
            +make(): FuzzyCMeans<NumberVector>
        }

        class MacQueenKMeans<V extends NumberVector> [[MacQueenKMeans.html]] {
            {static} -LOG: Logging
            +MacQueenKMeans(NumberVectorDistance<? super NumberVector>, int, int, KMeansInitialization)
            +run(Relation<V extends NumberVector>): Clustering<KMeansModel>
            #getLogger(): Logging
        }

        class elki.clustering.kmeans.MacQueenKMeans.Instance [[MacQueenKMeans.Instance.html]] {
            +Instance(Relation<? extends NumberVector>, NumberVectorDistance<?>, double[])
            #iterate(int): int
            #getLogger(): Logging
            -updateMeanAndAssignment(int, NumberVector, DBIDIter): boolean
        }

        class elki.clustering.kmeans.MacQueenKMeans.Par<V extends NumberVector> [[MacQueenKMeans.Par.html]] {
            +make(): MacQueenKMeans<V extends NumberVector>
        }

        class KDTreePruningKMeans<V extends NumberVector> [[KDTreePruningKMeans.html]] {
            {static} -LOG: Logging
            #leafsize: int
            +KDTreePruningKMeans(NumberVectorDistance<? super NumberVector>, int, int, KMeansInitialization, Split, int)
            +run(Relation<V extends NumberVector>): Clustering<KMeansModel>
            #getLogger(): Logging
        }

        enum elki.clustering.kmeans.KDTreePruningKMeans.Split [[KDTreePruningKMeans.Split.html]] {
            {static} +MIDPOINT
            {static} +BOUNDED_MIDPOINT
            {static} +MEDIAN
            {static} +SSQ
        }

        class elki.clustering.kmeans.KDTreePruningKMeans.Instance [[KDTreePruningKMeans.Instance.html]] {
            #sorted: ArrayModifiableDBIDs
            #iter: DBIDArrayMIter
            #indices: int[]
            #clusterSums: double[]
            #clusterSizes: int[]
            +Instance(Relation<? extends NumberVector>, NumberVectorDistance<?>, double[])
            +run(int): void
            #buildTreeMidpoint(Relation<? extends NumberVector>, int, int): KDNode
            #buildTreeBoundedMidpoint(Relation<? extends NumberVector>, int, int, SortDBIDsBySingleDimension): KDNode
            #buildTreeMedian(Relation<? extends NumberVector>, int, int, SortDBIDsBySingleDimension): KDNode
            #buildTreeSSQ(Relation<? extends NumberVector>, int, int, SortDBIDsBySingleDimension): KDNode
            #iterate(int): int
            #traversal(KDNode, int): int
            #labelSubtree(double[], int, int, int): int
            #pruning(KDNode, int): int
            #getMinMaxDist(double[], double[], int): double
            #mindist(double[], double[], double[]): double
            #traverseLeaf(int, int, int): int
            #getLogger(): Logging
        }

        class elki.clustering.kmeans.KDTreePruningKMeans.KDNode [[KDTreePruningKMeans.KDNode.html]] {
            ~sum: double[]
            ~mid: double[]
            ~halfwidth: double[]
            ~start: int
            ~end: int
            +KDNode(Relation<? extends NumberVector>, DBIDArrayIter, int, int)
        }

        class elki.clustering.kmeans.KDTreePruningKMeans.Par<V extends NumberVector> [[KDTreePruningKMeans.Par.html]] {
            {static} +SPLIT_ID: OptionID
            {static} +LEAFSIZE_ID: OptionID
            #leafsize: int
            +configure(Parameterization): void
            +make(): KDTreePruningKMeans<V extends NumberVector>
        }

        class GMeans<V extends NumberVector, M extends MeanModel> [[GMeans.html]] {
            {static} -LOG: Logging
            #critical: double
            +GMeans(NumberVectorDistance<? super NumberVector>, double, int, int, int, KMeans<V extends NumberVector, M extends MeanModel>, KMeansInitialization, RandomFactory)
            #splitCluster(Cluster<M extends MeanModel>, Relation<V extends NumberVector>): List<Cluster<M extends MeanModel>>
            #splitCentroid(Cluster<? extends MeanModel>, Relation<V extends NumberVector>): double[]
            #getLogger(): Logging
        }

        class elki.clustering.kmeans.GMeans.Par<V extends NumberVector, M extends MeanModel> [[GMeans.Par.html]] {
            {static} +CRITICAL_ID: OptionID
            #critical: double
            #configureInformationCriterion(Parameterization): void
            +make(): GMeans<V extends NumberVector, M extends MeanModel>
        }

        class CompareMeans<V extends NumberVector> [[CompareMeans.html]] {
            {static} -LOG: Logging
            +CompareMeans(NumberVectorDistance<? super NumberVector>, int, int, KMeansInitialization)
            +run(Relation<V extends NumberVector>): Clustering<KMeansModel>
            #getLogger(): Logging
        }

        class elki.clustering.kmeans.CompareMeans.Instance [[CompareMeans.Instance.html]] {
            ~cdist: double[]
            +Instance(Relation<? extends NumberVector>, NumberVectorDistance<?>, double[])
            #iterate(int): int
            #recomputeSeperation(double[], double[]): void
            #assignToNearestCluster(): int
            #getLogger(): Logging
        }

        class elki.clustering.kmeans.CompareMeans.Par<V extends NumberVector> [[CompareMeans.Par.html]] {
            #needsMetric(): boolean
            +make(): CompareMeans<V extends NumberVector>
        }

        class BetulaLloydKMeans [[BetulaLloydKMeans.html]] {
            {static} -LOG: Logging
            ~cffactory: Factory<?>
            ~storeIds: boolean
            ~ignoreWeight: boolean
            ~diststat: long
            +BetulaLloydKMeans(int, int, Factory<?>, AbstractCFKMeansInitialization, boolean, boolean)
            +run(Relation<NumberVector>): Clustering<KMeansModel>
            -kmeans(ArrayList<? extends ClusterFeature>, int[], int[], CFTree<?>): double[]
            -means(int[], double[], ArrayList<? extends ClusterFeature>, int[]): double[]
            -assignToNearestCluster(int[], double[], ArrayList<? extends ClusterFeature>, int[]): int
            #calculateVariances(int[], double[], ArrayList<? extends ClusterFeature>, int[]): double[]
            -distance(NumberVector, double[]): double
            -distance(double[], double[]): double
            #getLogger(): Logging
        }

        class elki.clustering.kmeans.BetulaLloydKMeans.Par [[BetulaLloydKMeans.Par.html]] {
            {static} +STORE_IDS_ID: OptionID
            {static} +IGNORE_WEIGHT_ID: OptionID
            ~cffactory: Factory<?>
            ~storeIds: boolean
            ~ignoreWeight: boolean
            +configure(Parameterization): void
            +make(): BetulaLloydKMeans
        }

        class SingleAssignmentKMeans<V extends NumberVector> [[SingleAssignmentKMeans.html]] {
            {static} -LOG: Logging
            +SingleAssignmentKMeans(NumberVectorDistance<? super NumberVector>, int, KMeansInitialization)
            +run(Relation<V extends NumberVector>): Clustering<KMeansModel>
            #getLogger(): Logging
        }

        class elki.clustering.kmeans.SingleAssignmentKMeans.Instance [[SingleAssignmentKMeans.Instance.html]] {
            +Instance(Relation<? extends NumberVector>, NumberVectorDistance<?>, double[])
            #iterate(int): int
            #getLogger(): Logging
        }

        class elki.clustering.kmeans.SingleAssignmentKMeans.Par<V extends NumberVector> [[SingleAssignmentKMeans.Par.html]] {
            +configure(Parameterization): void
            +make(): SingleAssignmentKMeans<V extends NumberVector>
        }

        class LloydKMeans<V extends NumberVector> [[LloydKMeans.html]] {
            {static} -LOG: Logging
            +LloydKMeans(NumberVectorDistance<? super NumberVector>, int, int, KMeansInitialization)
            +run(Relation<V extends NumberVector>): Clustering<KMeansModel>
            #getLogger(): Logging
        }

        class elki.clustering.kmeans.LloydKMeans.Instance [[LloydKMeans.Instance.html]] {
            +Instance(Relation<? extends NumberVector>, NumberVectorDistance<?>, double[])
            #iterate(int): int
            #getLogger(): Logging
        }

        class elki.clustering.kmeans.LloydKMeans.Par<V extends NumberVector> [[LloydKMeans.Par.html]] {
            +make(): LloydKMeans<V extends NumberVector>
        }

        class XMeans<V extends NumberVector, M extends MeanModel> [[XMeans.html]] {
            {static} -LOG: Logging
            -k_min: int
            -k_max: int
            ~rnd: RandomFactory
            +XMeans(NumberVectorDistance<? super NumberVector>, int, int, int, KMeans<V extends NumberVector, M extends MeanModel>, KMeansInitialization, KMeansQualityMeasure<V extends NumberVector>, RandomFactory)
            +run(Relation<V extends NumberVector>): Clustering<M extends MeanModel>
            #splitCluster(Cluster<M extends MeanModel>, Relation<V extends NumberVector>): List<Cluster<M extends MeanModel>>
            #splitCentroid(Cluster<? extends MeanModel>, Relation<V extends NumberVector>): double[]
            +getInputTypeRestriction(): TypeInformation[]
            #getLogger(): Logging
        }

        class elki.clustering.kmeans.XMeans.Par<V extends NumberVector, M extends MeanModel> {
            {static} +INNER_KMEANS_ID: OptionID
            {static} +K_MIN_ID: OptionID
            {static} +SEED_ID: OptionID
            {static} +INFORMATION_CRITERION_ID: OptionID
            #k_min: int
            #k_max: int
            #random: RandomFactory
            +configure(Parameterization): void
            #configureInformationCriterion(Parameterization): void
            +make(): XMeans<V extends NumberVector, M extends MeanModel>
        }

        class HartiganWongKMeans<V extends NumberVector> [[HartiganWongKMeans.html]] {
            {static} -LOG: Logging
            +HartiganWongKMeans(int, KMeansInitialization)
            +run(Relation<V extends NumberVector>): Clustering<KMeansModel>
            #getLogger(): Logging
        }

        class elki.clustering.kmeans.HartiganWongKMeans.Instance [[HartiganWongKMeans.Instance.html]] {
            ~secondary: WritableIntegerDataStore
            ~r1s: WritableDoubleDataStore
            ~ncp: int[]
            ~live: int[]
            ~itran: boolean[]
            ~an1: double[]
            ~an2: double[]
            -optries: int
            +Instance(Relation<? extends NumberVector>, NumberVectorDistance<?>, double[])
            #iterate(int): int
            -initialAssignToNearestCluster(): int
            -initialize(): void
            -optimalTransfer(): int
            -quickTransfer(): int
            -cacheR1(DBIDIter, NumberVector, int): double
            -transfer(DBIDRef, NumberVector, int, int): void
            #getLogger(): Logging
        }

        class elki.clustering.kmeans.HartiganWongKMeans.Parameterizer<V extends NumberVector> [[HartiganWongKMeans.Parameterizer.html]] {
            +configure(Parameterization): void
            +make(): HartiganWongKMeans<V extends NumberVector>
        }

        class ShallotKMeans<V extends NumberVector> [[ShallotKMeans.html]] {
            {static} -LOG: Logging
            +ShallotKMeans(NumberVectorDistance<? super NumberVector>, int, int, KMeansInitialization, boolean)
            +run(Relation<V extends NumberVector>): Clustering<KMeansModel>
            #getLogger(): Logging
        }

        class elki.clustering.kmeans.ShallotKMeans.Instance [[ShallotKMeans.Instance.html]] {
            ~second: WritableIntegerDataStore
            +Instance(Relation<? extends NumberVector>, NumberVectorDistance<?>, double[])
            #initialAssignToNearestCluster(): int
            #assignToNearestCluster(): int
            #getLogger(): Logging
        }

        class elki.clustering.kmeans.ShallotKMeans.Par<V extends NumberVector> [[ShallotKMeans.Par.html]] {
            +make(): ShallotKMeans<V extends NumberVector>
        }

        class YinYangKMeans<V extends NumberVector> [[YinYangKMeans.html]] {
            {static} -LOG: Logging
            {static} -GROUP_KMEANS_MAXITER: int
            -t: int
            +YinYangKMeans(int, int, KMeansInitialization, int)
            +run(Relation<V extends NumberVector>): Clustering<KMeansModel>
            #getLogger(): Logging
        }

        class elki.clustering.kmeans.YinYangKMeans.Instance [[YinYangKMeans.Instance.html]] {
            ~groups: int[]
            ~gdrift: double[]
            ~cdrift: double[]
            ~sums: double[]
            ~glabel: int[]
            ~upper: WritableDoubleDataStore
            ~lower: WritableDataStore<double[]>
            +Instance(Relation<? extends NumberVector>, NumberVectorDistance<?>, double[], int)
            +run(int): void
            -groupKMeans(int): int[]
            -initialGroupAssignment(int, double[], int[]): void
            -updateGroupAssignment(int, double[], int[]): boolean
            #iterate(int): int
            -updateCenters(): void
            #assignToNearestCluster(): int
            -initialAssignToNearestCluster(): int
            #getLogger(): Logging
        }

        class elki.clustering.kmeans.YinYangKMeans.Par<V extends NumberVector> [[YinYangKMeans.Par.html]] {
            {static} +T_ID: OptionID
            #t: int
            #needsMetric(): boolean
            +configure(Parameterization): void
            +make(): YinYangKMeans<V extends NumberVector>
        }

        class KDTreeFilteringKMeans<V extends NumberVector> [[KDTreeFilteringKMeans.html]] {
            {static} -LOG: Logging
            +KDTreeFilteringKMeans(NumberVectorDistance<? super NumberVector>, int, int, KMeansInitialization, Split, int)
            +run(Relation<V extends NumberVector>): Clustering<KMeansModel>
            #getLogger(): Logging
        }

        class elki.clustering.kmeans.KDTreeFilteringKMeans.Instance [[KDTreeFilteringKMeans.Instance.html]] {
            +Instance(Relation<? extends NumberVector>, NumberVectorDistance<?>, double[])
            #pruning(KDNode, int): int
            #getNearestCenter(double[], int): int
            #isFarther(double[], double[], double[], double[]): boolean
            #getLogger(): Logging
        }

        class elki.clustering.kmeans.KDTreeFilteringKMeans.Par<V extends NumberVector> [[KDTreeFilteringKMeans.Par.html]] {
            +make(): KDTreeFilteringKMeans<V extends NumberVector>
        }

        abstract class AbstractKMeans<V extends NumberVector, M extends Model> [[AbstractKMeans.html]] {
            #distance: NumberVectorDistance<? super NumberVector>
            #k: int
            #maxiter: int
            +AbstractKMeans(int, int, KMeansInitialization)
            +AbstractKMeans(NumberVectorDistance<? super NumberVector>, int, int, KMeansInitialization)
            +getInputTypeRestriction(): TypeInformation[]
            #initialMeans(Relation<V extends NumberVector>): double[]
            {static} #means(List<? extends DBIDs>, double[], Relation<? extends NumberVector>): double[]
            {static} -denseMeans(List<? extends DBIDs>, double[], Relation<? extends NumberVector>): double[]
            {static} +plusEquals(double[], NumberVector): void
            {static} -densePlusEquals(double[], NumberVector): void
            {static} -sparsePlusEquals(double[], SparseNumberVector): void
            {static} +minusEquals(double[], NumberVector): void
            {static} +plusMinusEquals(double[], double[], NumberVector): void
            {static} -densePlusMinusEquals(double[], double[], NumberVector): void
            {static} -sparsePlusMinusEquals(double[], double[], SparseNumberVector): void
            {static} -sparseMeans(List<? extends DBIDs>, double[], Relation<? extends SparseNumberVector>): double[]
            {static} #nearestMeans(double[], int[]): void
            {static} #incrementalUpdateMean(double[], NumberVector, int, double): void
            +setK(int): void
            +getDistance(): NumberVectorDistance<? super NumberVector>
            +setDistance(NumberVectorDistance<? super NumberVector>): void
            {abstract} #getLogger(): Logging
        }

        abstract class elki.clustering.kmeans.AbstractKMeans.Instance [[AbstractKMeans.Instance.html]] {
            #means: double[]
            #clusters: List<ModifiableDBIDs>
            #assignment: WritableIntegerDataStore
            #varsum: double[]
            #relation: Relation<? extends NumberVector>
            #diststat: long
            -df: NumberVectorDistance<?>
            #k: int
            #isSquared: boolean
            #key: String
            +Instance(Relation<? extends NumberVector>, NumberVectorDistance<?>, double[])
            #distance(NumberVector, NumberVector): double
            #distance(NumberVector, double[]): double
            #distance(double[], double[]): double
            #sqrtdistance(NumberVector, NumberVector): double
            #sqrtdistance(NumberVector, double[]): double
            #sqrtdistance(double[], double[]): double
            +run(int): void
            {abstract} #iterate(int): int
            #meansFromSums(double[], double[], double[]): void
            #copyMeans(double[], double[]): void
            #assignToNearestCluster(): int
            #recomputeSeperation(double[], double[]): void
            #initialSeperation(double[]): void
            #computeSquaredSeparation(double[]): void
            #movedDistance(double[], double[], double[]): void
            +buildResult(): Clustering<KMeansModel>
            +buildResult(boolean, Relation<? extends NumberVector>): Clustering<KMeansModel>
            #recomputeVariance(Relation<? extends NumberVector>): void
            {abstract} #getLogger(): Logging
        }

        abstract class elki.clustering.kmeans.AbstractKMeans.Par<V extends NumberVector> [[AbstractKMeans.Par.html]] {
            #k: int
            #maxiter: int
            #varstat: boolean
            #distance: NumberVectorDistance<? super NumberVector>
            +configure(Parameterization): void
            #getParameterK(Parameterization): void
            #getParameterDistance(Parameterization): void
            #needsMetric(): boolean
            #getParameterInitialization(Parameterization): void
            #getParameterMaxIter(Parameterization): void
            #getParameterVarstat(Parameterization): void
            {abstract} +make(): AbstractKMeans<V extends NumberVector, ?>
        }

        interface KMeans<V extends NumberVector, M extends Model> [[KMeans.html]] {
            {static} +DISTANCE_FUNCTION_ID: OptionID
            {static} +INIT_ID: OptionID
            {static} +K_ID: OptionID
            {static} +MAXITER_ID: OptionID
            {static} +SEED_ID: OptionID
            {static} +VARSTAT_ID: OptionID
            {abstract} +run(Relation<V extends NumberVector>): Clustering<M extends Model>
            {abstract} +setK(int): void
            {abstract} +setDistance(NumberVectorDistance<? super NumberVector>): void
            {abstract} +getDistance(): NumberVectorDistance<? super NumberVector>
            {abstract} +setInitializer(KMeansInitialization): void
        }

        class BestOfMultipleKMeans<V extends NumberVector, M extends MeanModel> [[BestOfMultipleKMeans.html]] {
            {static} -LOG: Logging
            -trials: int
            +BestOfMultipleKMeans(int, KMeans<V extends NumberVector, M extends MeanModel>, KMeansQualityMeasure<? super NumberVector>)
            +getInputTypeRestriction(): TypeInformation[]
            +run(Relation<V extends NumberVector>): Clustering<M extends MeanModel>
            +getDistance(): NumberVectorDistance<? super NumberVector>
            +setK(int): void
            +setDistance(NumberVectorDistance<? super NumberVector>): void
        }

        class elki.clustering.kmeans.BestOfMultipleKMeans.Par<V extends NumberVector, M extends MeanModel> {
            {static} +TRIALS_ID: OptionID
            {static} +KMEANS_ID: OptionID
            {static} +QUALITYMEASURE_ID: OptionID
            #trials: int
            +configure(Parameterization): void
            +make(): BestOfMultipleKMeans<V extends NumberVector, M extends MeanModel>
        }

        class KMediansLloyd<V extends NumberVector> [[KMediansLloyd.html]] {
            {static} -LOG: Logging
            +KMediansLloyd(NumberVectorDistance<? super NumberVector>, int, int, KMeansInitialization)
            +run(Relation<V extends NumberVector>): Clustering<MeanModel>
            #getLogger(): Logging
        }

        class elki.clustering.kmeans.KMediansLloyd.Instance [[KMediansLloyd.Instance.html]] {
            +Instance(Relation<? extends NumberVector>, NumberVectorDistance<?>, double[])
            #iterate(int): int
            #buildMediansResult(): Clustering<MeanModel>
            #medians(List<? extends DBIDs>, double[], Relation<? extends NumberVector>): double[]
            #getLogger(): Logging
        }

        class elki.clustering.kmeans.KMediansLloyd.Par<V extends NumberVector> [[KMediansLloyd.Par.html]] {
            +make(): KMediansLloyd<V extends NumberVector>
        }

        KMeans <|.. BisectingKMeans
        BisectingKMeans - -> KMeans: innerkMeans
        BisectingKMeans - -> elki.clustering.kmeans.initialization.KMeansInitialization: initializer
        elki.utilities.optionhandling.Parameterizer <|.. elki.clustering.kmeans.BisectingKMeans.Par
        BisectingKMeans +- - elki.clustering.kmeans.BisectingKMeans.Par
        elki.clustering.kmeans.BisectingKMeans.Par - -> KMeans: kMeansVariant
        SimplifiedElkanKMeans <|- - ElkanKMeans
        elki.clustering.kmeans.SimplifiedElkanKMeans.Instance <|- - elki.clustering.kmeans.ElkanKMeans.Instance
        ElkanKMeans +- - elki.clustering.kmeans.ElkanKMeans.Instance
        elki.clustering.kmeans.SimplifiedElkanKMeans.Par <|- - elki.clustering.kmeans.ElkanKMeans.Par
        ElkanKMeans +- - elki.clustering.kmeans.ElkanKMeans.Par
        AbstractKMeans <|- - SimplifiedElkanKMeans
        elki.clustering.kmeans.AbstractKMeans.Instance <|- - elki.clustering.kmeans.SimplifiedElkanKMeans.Instance
        SimplifiedElkanKMeans +- - elki.clustering.kmeans.SimplifiedElkanKMeans.Instance
        elki.clustering.kmeans.AbstractKMeans.Par <|- - elki.clustering.kmeans.SimplifiedElkanKMeans.Par
        SimplifiedElkanKMeans +- - elki.clustering.kmeans.SimplifiedElkanKMeans.Par
        HamerlyKMeans <|- - ExponionKMeans
        elki.clustering.kmeans.HamerlyKMeans.Instance <|- - elki.clustering.kmeans.ExponionKMeans.Instance
        ExponionKMeans +- - elki.clustering.kmeans.ExponionKMeans.Instance
        elki.clustering.kmeans.HamerlyKMeans.Par <|- - elki.clustering.kmeans.ExponionKMeans.Par
        ExponionKMeans +- - elki.clustering.kmeans.ExponionKMeans.Par
        CompareMeans <|- - SortMeans
        elki.clustering.kmeans.CompareMeans.Instance <|- - elki.clustering.kmeans.SortMeans.Instance
        SortMeans +- - elki.clustering.kmeans.SortMeans.Instance
        elki.clustering.kmeans.AbstractKMeans.Par <|- - elki.clustering.kmeans.SortMeans.Par
        SortMeans +- - elki.clustering.kmeans.SortMeans.Par
        AbstractKMeans <|- - HamerlyKMeans
        elki.clustering.kmeans.AbstractKMeans.Instance <|- - elki.clustering.kmeans.HamerlyKMeans.Instance
        HamerlyKMeans +- - elki.clustering.kmeans.HamerlyKMeans.Instance
        elki.clustering.kmeans.AbstractKMeans.Par <|- - elki.clustering.kmeans.HamerlyKMeans.Par
        HamerlyKMeans +- - elki.clustering.kmeans.HamerlyKMeans.Par
        AbstractKMeans <|- - KMeansMinusMinus
        elki.clustering.kmeans.AbstractKMeans.Instance <|- - elki.clustering.kmeans.KMeansMinusMinus.Instance
        KMeansMinusMinus +- - elki.clustering.kmeans.KMeansMinusMinus.Instance
        elki.clustering.kmeans.AbstractKMeans.Par <|- - elki.clustering.kmeans.KMeansMinusMinus.Par
        KMeansMinusMinus +- - elki.clustering.kmeans.KMeansMinusMinus.Par
        HamerlyKMeans <|- - AnnulusKMeans
        elki.clustering.kmeans.HamerlyKMeans.Instance <|- - elki.clustering.kmeans.AnnulusKMeans.Instance
        AnnulusKMeans +- - elki.clustering.kmeans.AnnulusKMeans.Instance
        elki.clustering.kmeans.HamerlyKMeans.Par <|- - elki.clustering.kmeans.AnnulusKMeans.Par
        AnnulusKMeans +- - elki.clustering.kmeans.AnnulusKMeans.Par
        elki.clustering.ClusteringAlgorithm <|.. FuzzyCMeans
        FuzzyCMeans - -> elki.clustering.kmeans.initialization.KMeansInitialization: initializer
        elki.utilities.optionhandling.Parameterizer <|.. elki.clustering.kmeans.FuzzyCMeans.Par
        FuzzyCMeans +- - elki.clustering.kmeans.FuzzyCMeans.Par
        elki.clustering.kmeans.FuzzyCMeans.Par - -> elki.clustering.kmeans.initialization.KMeansInitialization: initializer
        AbstractKMeans <|- - MacQueenKMeans
        elki.clustering.kmeans.AbstractKMeans.Instance <|- - elki.clustering.kmeans.MacQueenKMeans.Instance
        MacQueenKMeans +- - elki.clustering.kmeans.MacQueenKMeans.Instance
        elki.clustering.kmeans.AbstractKMeans.Par <|- - elki.clustering.kmeans.MacQueenKMeans.Par
        MacQueenKMeans +- - elki.clustering.kmeans.MacQueenKMeans.Par
        AbstractKMeans <|- - KDTreePruningKMeans
        KDTreePruningKMeans - -> elki.clustering.kmeans.KDTreePruningKMeans.Split: split
        KDTreePruningKMeans +- - elki.clustering.kmeans.KDTreePruningKMeans.Split
        elki.clustering.kmeans.AbstractKMeans.Instance <|- - elki.clustering.kmeans.KDTreePruningKMeans.Instance
        KDTreePruningKMeans +- - elki.clustering.kmeans.KDTreePruningKMeans.Instance
        elki.clustering.kmeans.KDTreePruningKMeans.Instance - -> elki.clustering.kmeans.KDTreePruningKMeans.KDNode: root
        KDTreePruningKMeans +- - elki.clustering.kmeans.KDTreePruningKMeans.KDNode
        elki.clustering.kmeans.KDTreePruningKMeans.KDNode - -> elki.clustering.kmeans.KDTreePruningKMeans.KDNode: leftChild\nrightChild
        elki.clustering.kmeans.AbstractKMeans.Par <|- - elki.clustering.kmeans.KDTreePruningKMeans.Par
        KDTreePruningKMeans +- - elki.clustering.kmeans.KDTreePruningKMeans.Par
        elki.clustering.kmeans.KDTreePruningKMeans.Par - -> elki.clustering.kmeans.KDTreePruningKMeans.Split: split
        XMeans <|- - GMeans
        elki.clustering.kmeans.XMeans.Par <|- - elki.clustering.kmeans.GMeans.Par
        GMeans +- - elki.clustering.kmeans.GMeans.Par
        AbstractKMeans <|- - CompareMeans
        elki.clustering.kmeans.AbstractKMeans.Instance <|- - elki.clustering.kmeans.CompareMeans.Instance
        CompareMeans +- - elki.clustering.kmeans.CompareMeans.Instance
        elki.clustering.kmeans.AbstractKMeans.Par <|- - elki.clustering.kmeans.CompareMeans.Par
        CompareMeans +- - elki.clustering.kmeans.CompareMeans.Par
        AbstractKMeans <|- - BetulaLloydKMeans
        BetulaLloydKMeans - -> elki.clustering.kmeans.initialization.betula.AbstractCFKMeansInitialization: initialization
        elki.clustering.kmeans.AbstractKMeans.Par <|- - elki.clustering.kmeans.BetulaLloydKMeans.Par
        BetulaLloydKMeans +- - elki.clustering.kmeans.BetulaLloydKMeans.Par
        elki.clustering.kmeans.BetulaLloydKMeans.Par - -> elki.clustering.kmeans.initialization.betula.AbstractCFKMeansInitialization: initialization
        AbstractKMeans <|- - SingleAssignmentKMeans
        elki.clustering.kmeans.AbstractKMeans.Instance <|- - elki.clustering.kmeans.SingleAssignmentKMeans.Instance
        SingleAssignmentKMeans +- - elki.clustering.kmeans.SingleAssignmentKMeans.Instance
        elki.clustering.kmeans.AbstractKMeans.Par <|- - elki.clustering.kmeans.SingleAssignmentKMeans.Par
        SingleAssignmentKMeans +- - elki.clustering.kmeans.SingleAssignmentKMeans.Par
        AbstractKMeans <|- - LloydKMeans
        elki.clustering.kmeans.AbstractKMeans.Instance <|- - elki.clustering.kmeans.LloydKMeans.Instance
        LloydKMeans +- - elki.clustering.kmeans.LloydKMeans.Instance
        elki.clustering.kmeans.AbstractKMeans.Par <|- - elki.clustering.kmeans.LloydKMeans.Par
        LloydKMeans +- - elki.clustering.kmeans.LloydKMeans.Par
        AbstractKMeans <|- - XMeans
        XMeans - -> KMeans: innerKMeans
        XMeans - -> elki.clustering.kmeans.initialization.Predefined: splitInitializer
        XMeans - -> elki.clustering.kmeans.quality.KMeansQualityMeasure: informationCriterion
        elki.clustering.kmeans.AbstractKMeans.Par <|- - elki.clustering.kmeans.XMeans.Par
        XMeans +- - elki.clustering.kmeans.XMeans.Par
        elki.clustering.kmeans.XMeans.Par - -> KMeans: innerKMeans
        elki.clustering.kmeans.XMeans.Par - -> elki.clustering.kmeans.quality.KMeansQualityMeasure: informationCriterion
        AbstractKMeans <|- - HartiganWongKMeans
        elki.clustering.kmeans.AbstractKMeans.Instance <|- - elki.clustering.kmeans.HartiganWongKMeans.Instance
        HartiganWongKMeans +- - elki.clustering.kmeans.HartiganWongKMeans.Instance
        elki.clustering.kmeans.AbstractKMeans.Par <|- - elki.clustering.kmeans.HartiganWongKMeans.Parameterizer
        HartiganWongKMeans +- - elki.clustering.kmeans.HartiganWongKMeans.Parameterizer
        ExponionKMeans <|- - ShallotKMeans
        elki.clustering.kmeans.ExponionKMeans.Instance <|- - elki.clustering.kmeans.ShallotKMeans.Instance
        ShallotKMeans +- - elki.clustering.kmeans.ShallotKMeans.Instance
        elki.clustering.kmeans.HamerlyKMeans.Par <|- - elki.clustering.kmeans.ShallotKMeans.Par
        ShallotKMeans +- - elki.clustering.kmeans.ShallotKMeans.Par
        AbstractKMeans <|- - YinYangKMeans
        elki.clustering.kmeans.AbstractKMeans.Instance <|- - elki.clustering.kmeans.YinYangKMeans.Instance
        YinYangKMeans +- - elki.clustering.kmeans.YinYangKMeans.Instance
        elki.clustering.kmeans.AbstractKMeans.Par <|- - elki.clustering.kmeans.YinYangKMeans.Par
        YinYangKMeans +- - elki.clustering.kmeans.YinYangKMeans.Par
        KDTreePruningKMeans <|- - KDTreeFilteringKMeans
        elki.clustering.kmeans.KDTreePruningKMeans.Instance <|- - elki.clustering.kmeans.KDTreeFilteringKMeans.Instance
        KDTreeFilteringKMeans +- - elki.clustering.kmeans.KDTreeFilteringKMeans.Instance
        elki.clustering.kmeans.KDTreePruningKMeans.Par <|- - elki.clustering.kmeans.KDTreeFilteringKMeans.Par
        KDTreeFilteringKMeans +- - elki.clustering.kmeans.KDTreeFilteringKMeans.Par
        KMeans <|.. AbstractKMeans
        AbstractKMeans - -> elki.clustering.kmeans.initialization.KMeansInitialization: initializer
        AbstractKMeans +- - elki.clustering.kmeans.AbstractKMeans.Instance
        elki.utilities.optionhandling.Parameterizer <|.. elki.clustering.kmeans.AbstractKMeans.Par
        AbstractKMeans +- - elki.clustering.kmeans.AbstractKMeans.Par
        elki.clustering.kmeans.AbstractKMeans.Par - -> elki.clustering.kmeans.initialization.KMeansInitialization: initializer
        elki.clustering.ClusteringAlgorithm <|- - KMeans
        KMeans <|.. BestOfMultipleKMeans
        BestOfMultipleKMeans - -> KMeans: innerkMeans
        BestOfMultipleKMeans - -> elki.clustering.kmeans.quality.KMeansQualityMeasure: qualityMeasure
        BestOfMultipleKMeans - -> elki.clustering.kmeans.initialization.KMeansInitialization: initializer
        elki.utilities.optionhandling.Parameterizer <|.. elki.clustering.kmeans.BestOfMultipleKMeans.Par
        BestOfMultipleKMeans +- - elki.clustering.kmeans.BestOfMultipleKMeans.Par
        elki.clustering.kmeans.BestOfMultipleKMeans.Par - -> KMeans: kMeansVariant
        elki.clustering.kmeans.BestOfMultipleKMeans.Par - -> elki.clustering.kmeans.quality.KMeansQualityMeasure: qualityMeasure
        AbstractKMeans <|- - KMediansLloyd
        elki.clustering.kmeans.AbstractKMeans.Instance <|- - elki.clustering.kmeans.KMediansLloyd.Instance
        KMediansLloyd +- - elki.clustering.kmeans.KMediansLloyd.Instance
        elki.clustering.kmeans.AbstractKMeans.Par <|- - elki.clustering.kmeans.KMediansLloyd.Par
        KMediansLloyd +- - elki.clustering.kmeans.KMediansLloyd.Par
    }

    namespace elki.utilities.optionhandling {
        interface Parameterizer [[../../utilities/optionhandling/Parameterizer.html]] {
            +configure(Parameterization): void
            {abstract} +make(): Object
        }
    }

    namespace elki.clustering {
        interface ClusteringAlgorithm<C extends Clustering<? extends Model>> [[../ClusteringAlgorithm.html]] {
            +autorun(Database): C extends Clustering<? extends Model>
        }
    }

    center footer UMLDoclet 2.0.19, PlantUML 1.2022.8
@enduml

PlantUML version 1.2022.8(Sun Sep 25 11:00:33 CEST 2022)
(APACHE source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: de
Country: DE
--></g></svg>