@startuml
    remove .*\.(Instance|Par|Parameterizer|Factory)$
    namespace elki.application.benchmark {

        class RangeQueryBenchmark<O extends NumberVector> [[RangeQueryBenchmark.html]] {
            {static} -LOG: Logging
            #radius: double
            #queries: DatabaseConnection
            #sampling: double
            #random: RandomFactory
            +RangeQueryBenchmark(InputStep, Distance<? super NumberVector>, double, double, RandomFactory)
            +RangeQueryBenchmark(InputStep, Distance<? super NumberVector>, DatabaseConnection, double, RandomFactory)
            +run(): void
            -logIndexStatistics(Database): void
            #run(RangeSearcher<DBIDRef>, Relation<O extends NumberVector>, double, Duration, MeanVariance): int
            #run(RangeSearcher<DBIDRef>, Relation<O extends NumberVector>, Relation<NumberVector>, Duration, MeanVariance): int
            #run(RangeSearcher<O extends NumberVector>, Relation<O extends NumberVector>, DatabaseConnection, Duration, MeanVariance): int
            #processResult(DoubleDBIDList, MeanVariance): int
            {static} +main(String[]): void
        }

        class elki.application.benchmark.RangeQueryBenchmark.Par<O extends NumberVector> {
            {static} +RADIUS_ID: OptionID
            {static} +QUERY_ID: OptionID
            {static} +SAMPLING_ID: OptionID
            {static} +RANDOM_ID: OptionID
            #queries: DatabaseConnection
            #sampling: double
            #radius: double
            #random: RandomFactory
            +configure(Parameterization): void
            +make(): RangeQueryBenchmark<O extends NumberVector>
        }

        class ValidateApproximativeKNNIndex<O> [[ValidateApproximativeKNNIndex.html]] {
            {static} -LOG: Logging
            #k: int
            #queries: DatabaseConnection
            #sampling: double
            #forcelinear: boolean
            #random: RandomFactory
            #pattern: Pattern
            +ValidateApproximativeKNNIndex(InputStep, Distance<? super O>, int, DatabaseConnection, double, boolean, RandomFactory, Pattern)
            +run(): void
        }

        class elki.application.benchmark.ValidateApproximativeKNNIndex.Par<O> {
            {static} +K_ID: OptionID
            {static} +QUERY_ID: OptionID
            {static} +SAMPLING_ID: OptionID
            {static} +FORCE_ID: OptionID
            {static} +RANDOM_ID: OptionID
            {static} +PATTERN_ID: OptionID
            #k: int
            #queries: DatabaseConnection
            #sampling: double
            #forcelinear: boolean
            #random: RandomFactory
            #pattern: Pattern
            +configure(Parameterization): void
            +make(): ValidateApproximativeKNNIndex<O>
        }

        class KNNBenchmark<O> [[KNNBenchmark.html]] {
            {static} -LOG: Logging
            #k: int
            #queries: DatabaseConnection
            #sampling: double
            #random: RandomFactory
            +KNNBenchmark(InputStep, Distance<? super O>, int, DatabaseConnection, double, RandomFactory)
            +run(): void
            -logIndexStatistics(Database): void
            -run(KNNSearcher<DBIDRef>, Relation<O>, Duration, MeanVariance, MeanVariance): int
            -run(KNNSearcher<O>, Duration, MeanVariance, MeanVariance): int
            {static} +main(String[]): void
        }

        class elki.application.benchmark.KNNBenchmark.Par<O> {
            {static} +K_ID: OptionID
            {static} +QUERY_ID: OptionID
            {static} +SAMPLING_ID: OptionID
            {static} +RANDOM_ID: OptionID
            #k: int
            #queries: DatabaseConnection
            #sampling: double
            #random: RandomFactory
            +configure(Parameterization): void
            +make(): KNNBenchmark<O>
        }

        class PrioritySearchBenchmark<O> [[PrioritySearchBenchmark.html]] {
            {static} -LOG: Logging
            #k: int
            #queries: DatabaseConnection
            #sampling: double
            #random: RandomFactory
            +PrioritySearchBenchmark(InputStep, Distance<? super O>, int, DatabaseConnection, double, RandomFactory)
            +run(): void
            -logIndexStatistics(Database): void
            -run(PrioritySearcher<DBIDRef>, Relation<O>, Duration, MeanVariance, MeanVariance): int
            -run(PrioritySearcher<O>, Duration, MeanVariance, MeanVariance): int
            {static} +main(String[]): void
        }

        class elki.application.benchmark.PrioritySearchBenchmark.Par<O> {
            {static} +K_ID: OptionID
            {static} +QUERY_ID: OptionID
            {static} +SAMPLING_ID: OptionID
            {static} +RANDOM_ID: OptionID
            #k: int
            #queries: DatabaseConnection
            #sampling: double
            #random: RandomFactory
            +configure(Parameterization): void
            +make(): PrioritySearchBenchmark<O>
        }

        elki.application.AbstractDistanceBasedApplication <|-- RangeQueryBenchmark
        elki.application.AbstractDistanceBasedApplication.Par <|-- elki.application.benchmark.RangeQueryBenchmark.Par
        RangeQueryBenchmark +-- elki.application.benchmark.RangeQueryBenchmark.Par
        elki.application.AbstractDistanceBasedApplication <|-- ValidateApproximativeKNNIndex
        elki.application.AbstractDistanceBasedApplication.Par <|-- elki.application.benchmark.ValidateApproximativeKNNIndex.Par
        ValidateApproximativeKNNIndex +-- elki.application.benchmark.ValidateApproximativeKNNIndex.Par
        elki.application.AbstractDistanceBasedApplication <|-- KNNBenchmark
        elki.application.AbstractDistanceBasedApplication.Par <|-- elki.application.benchmark.KNNBenchmark.Par
        KNNBenchmark +-- elki.application.benchmark.KNNBenchmark.Par
        elki.application.AbstractDistanceBasedApplication <|-- PrioritySearchBenchmark
        elki.application.AbstractDistanceBasedApplication.Par <|-- elki.application.benchmark.PrioritySearchBenchmark.Par
        PrioritySearchBenchmark +-- elki.application.benchmark.PrioritySearchBenchmark.Par
    }

    namespace elki.application {
        abstract class AbstractDistanceBasedApplication<O> [[../AbstractDistanceBasedApplication.html]] {
            #distance: Distance<? super O>
            #inputstep: InputStep
        }
        abstract class elki.application.AbstractDistanceBasedApplication.Par<O> {
            #inputstep: InputStep
            #distance: Distance<? super O>
        }
    }

    center footer UMLDoclet 2.0.19, PlantUML 1.2022.8
@enduml
