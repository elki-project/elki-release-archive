@startuml
    remove .*\.(Instance|Par|Parameterizer|Factory)$
    namespace elki.utilities.io {

        class ParseUtil [[ParseUtil.html]] {
            {static} -LOG: Logging
            {static} +EMPTY_STRING: NumberFormatException
            {static} +EXPONENT_OVERFLOW: NumberFormatException
            {static} +INVALID_EXPONENT: NumberFormatException
            {static} +TRAILING_CHARACTERS: NumberFormatException
            {static} +PRECISION_OVERFLOW: NumberFormatException
            {static} +NOT_A_NUMBER: NumberFormatException
            {static} -INFINITY_PATTERN: char[]
            {static} -INFINITY_LENGTH: int
            {static} +parseDouble(byte[], int, int): double
            {static} +parseDouble(CharSequence): double
            {static} +parseDouble(CharSequence, int, int): double
            {static} +parseLongBase10(CharSequence): long
            {static} +parseLongBase10(CharSequence, int, int): long
            {static} +parseIntBase10(CharSequence): int
            {static} +parseIntBase10(CharSequence, int, int): int
            {static} -matchInf(byte[], byte, int, int): boolean
            {static} -matchInf(CharSequence, char, int, int): boolean
            {static} -matchNaN(byte[], byte, int, int): boolean
            {static} -matchNaN(CharSequence, char, int, int): boolean
        }

        class elki.utilities.io.ParseUtil.PreallocatedException [[ParseUtil.PreallocatedException.html]] {
            {static} -serialVersionUID: long
            +PreallocatedException(String)
            +fillInStackTrace(): Throwable
        }

        class LineReader [[LineReader.html]] {
            {static} -BUFFER_SIZE: int
            ~in: Reader
            ~buffer: char[]
            ~pos: int
            ~end: int
            +LineReader(InputStream)
            +LineReader(Reader)
            +LineReader(InputStream, int)
            +LineReader(Reader, int)
            +readLine(Appendable): boolean
            +close(): void
        }

        class Tokenizer [[Tokenizer.html]] {
            {static} -LOG: Logging
            {static} +QUOTE_CHAR: String
            -quoteChars: char[]
            -matcher: Matcher
            -input: CharSequence
            -send: int
            -start: int
            -end: int
            -index: int
            -quoted: boolean
            +Tokenizer(Pattern, String)
            +initialize(CharSequence, int, int): void
            +valid(): boolean
            +advance(): Tokenizer
            +getSubstring(): String
            +getStrippedSubstring(): String
            +getDouble(): double
            +getIntBase10(): int
            +getLongBase10(): long
            +isEmpty(): boolean
            -isQuote(int): char
            +isQuoted(): boolean
            +getStart(): int
            +getEnd(): int
            +getLength(): int
            +getChar(int): char
            +cleanup(): void
        }

        class FileUtil [[FileUtil.html]] {
            {static} +getFilenameExtension(Path): String
            {static} +getFilenameExtension(String): String
            {static} +open(URI, OpenOption...): InputStream
            {static} +exists(URI): boolean
            {static} +openSystemFile(String): InputStream
            {static} +tryGzipInput(InputStream): InputStream
            {static} +locateFile(String, String): File
            {static} +slurp(InputStream): String
        }

        interface ByteBufferSerializer<T> [[ByteBufferSerializer.html]] {
            {abstract} +fromByteBuffer(ByteBuffer): T
            {abstract} +toByteBuffer(ByteBuffer, T): void
            {abstract} +getByteSize(T): int
        }

        class TokenizedReader [[TokenizedReader.html]] {
            -comment: Matcher
            +TokenizedReader(Pattern, String, Pattern)
            +nextLineExceptComments(): boolean
            +nextLine(): boolean
            +reset(): void
            +close(): void
        }

        class ByteBufferInputStream [[ByteBufferInputStream.html]] {
            ~buffer: ByteBuffer
            +ByteBufferInputStream(ByteBuffer)
            +read(): int
            +read(byte[], int, int): int
        }

        interface FixedSizeByteBufferSerializer<T> [[FixedSizeByteBufferSerializer.html]] {
            {abstract} +getFixedByteSize(): int
        }

        class FormatUtil [[FormatUtil.html]] {
            {static} +NF: NumberFormat
            {static} +NF0: NumberFormat
            {static} +NF2: NumberFormat
            {static} +NF3: NumberFormat
            {static} +NF4: NumberFormat
            {static} +NF6: NumberFormat
            {static} +NF8: NumberFormat
            {static} +NF16: NumberFormat
            {static} -WHITESPACE_BUFFER: String
            {static} -WHITESPACE_BUFFER_LENGTH: int
            {static} +NEWLINE: String
            {static} +NONBREAKING_SPACE: char
            {static} -TIME_UNIT_SIZES: long[]
            {static} -TIME_UNIT_NAMES: String[]
            {static} -TIME_UNIT_DIGITS: int[]
            {static} -width: int
            {static} -ZEROPADDING: char[]
            {static} -SPACEPADDING: char[]
            {static} +makeNumberFormat(int): NumberFormat
            {static} +format(double[]): String
            {static} +format(double[], String): String
            {static} +format(double[], NumberFormat): String
            {static} +format(double[], String, NumberFormat): String
            {static} +format(double[], int, int): String
            {static} +formatTo(StringBuilder, double[], String): StringBuilder
            {static} +formatTo(StringBuilder, double[], String, NumberFormat): StringBuilder
            {static} +formatTo(StringBuilder, float[], String): StringBuilder
            {static} +formatTo(StringBuilder, float[], String, NumberFormat): StringBuilder
            {static} +formatTo(StringBuilder, int[], String): StringBuilder
            {static} +formatTo(StringBuilder, long[], String): StringBuilder
            {static} +formatTo(StringBuilder, short[], String): StringBuilder
            {static} +formatTo(StringBuilder, byte[], String): StringBuilder
            {static} +formatTo(StringBuilder, boolean[], String): StringBuilder
            {static} +formatTo(StringBuilder, boolean): StringBuilder
            {static} +formatBit(StringBuilder, boolean): StringBuilder
            {static} +format(float[], String, NumberFormat): String
            {static} +format(float[], String): String
            {static} +format(float[]): String
            {static} +format(int[], String): String
            {static} +format(int[]): String
            {static} +format(long[]): String
            {static} +format(byte[]): String
            {static} +format(boolean[], String): String
            {static} +format(boolean): String
            {static} +formatTo(StringBuilder, double[], String, String, String, NumberFormat): StringBuilder
            {static} +format(double[]): String
            {static} +format(double[], String, String, String, NumberFormat): String
            {static} +format(double[], int, int, String, String, String): String
            {static} +format(double[], String): String
            {static} +format(double[], NumberFormat): String
            {static} +format(Collection<String>, String): String
            {static} +format(String[], String): String
            {static} +findSplitpoint(String, int): int
            {static} -nextPosition(int, int): int
            {static} +splitAtLastBlank(String, int): List<String>
            {static} +whitespace(int): String
            {static} +whitespace(StringBuilder, int): StringBuilder
            {static} +pad(String, int): String
            {static} +padRightAligned(String, int): String
            {static} +getConsoleWidth(): int
            {static} +formatTimeDelta(long, CharSequence): String
            {static} +appendZeros(StringBuilder, int): StringBuilder
            {static} +appendSpace(StringBuilder, int): StringBuilder
            {static} +stringSize(int): int
            {static} +stringSize(long): int
            {static} +endsWith(CharSequence, CharSequence): boolean
        }

        class ByteBufferOutputStream [[ByteBufferOutputStream.html]] {
            ~buffer: ByteBuffer
            +ByteBufferOutputStream(ByteBuffer)
            +write(int): void
            +write(byte[], int, int): void
        }

        class BufferedLineReader [[BufferedLineReader.html]] {
            #buf: StringBuilder
            #lineNumber: int
            +BufferedLineReader()
            +BufferedLineReader(LineReader)
            +BufferedLineReader(InputStream)
            +BufferedLineReader(InputStreamReader)
            +reset(): void
            +reset(LineReader): void
            +reset(InputStream): void
            +reset(InputStreamReader): void
            +getBuffer(): CharSequence
            +getLineNumber(): int
            +nextLine(): boolean
            +close(): void
            {static} +lengthWithoutLinefeed(CharSequence): int
        }

        class ByteArrayUtil [[ByteArrayUtil.html]] {
            {static} +SIZE_BYTE: int
            {static} +SIZE_SHORT: int
            {static} +SIZE_INT: int
            {static} +SIZE_LONG: int
            {static} +SIZE_FLOAT: int
            {static} +SIZE_DOUBLE: int
            {static} +writeShort(byte[], int, int): int
            {static} +writeInt(byte[], int, int): int
            {static} +writeLong(byte[], int, long): int
            {static} +writeFloat(byte[], int, float): int
            {static} +writeDouble(byte[], int, double): int
            {static} +readShort(byte[], int): short
            {static} +readUnsignedShort(byte[], int): int
            {static} +readInt(byte[], int): int
            {static} +readLong(byte[], int): long
            {static} +readFloat(byte[], int): float
            {static} +readDouble(byte[], int): double
            {static} +writeSignedVarint(ByteBuffer, int): void
            {static} +writeSignedVarintLong(ByteBuffer, long): void
            {static} +writeUnsignedVarint(ByteBuffer, int): void
            {static} +writeUnsignedVarintLong(ByteBuffer, long): void
            {static} +writeString(ByteBuffer, String): void
            {static} +getSignedVarintSize(int): int
            {static} +getUnsignedVarintSize(int): int
            {static} +getSignedVarintLongSize(long): int
            {static} +getUnsignedVarintLongSize(long): int
            {static} +getStringSize(String): int
            {static} +readSignedVarint(ByteBuffer): int
            {static} +readUnsignedVarint(ByteBuffer): int
            {static} +readSignedVarintLong(ByteBuffer): long
            {static} +readUnsignedVarintLong(ByteBuffer): long
            {static} +readString(ByteBuffer): String
        }

        class elki.utilities.io.ByteArrayUtil.ByteSerializer [[ByteArrayUtil.ByteSerializer.html]] {
            +--fromByteBuffer--(ByteBuffer): Byte
            +--toByteBuffer--(ByteBuffer, Byte): void
            +--getByteSize--(Byte): int
            +getFixedByteSize(): int
        }

        class elki.utilities.io.ByteArrayUtil.ShortSerializer [[ByteArrayUtil.ShortSerializer.html]] {
            +--fromByteBuffer--(ByteBuffer): Short
            +--toByteBuffer--(ByteBuffer, Short): void
            +--getByteSize--(Short): int
            +getFixedByteSize(): int
        }

        class elki.utilities.io.ByteArrayUtil.IntegerSerializer [[ByteArrayUtil.IntegerSerializer.html]] {
            +--fromByteBuffer--(ByteBuffer): Integer
            +--toByteBuffer--(ByteBuffer, Integer): void
            +--getByteSize--(Integer): int
            +getFixedByteSize(): int
        }

        class elki.utilities.io.ByteArrayUtil.LongSerializer [[ByteArrayUtil.LongSerializer.html]] {
            +--fromByteBuffer--(ByteBuffer): Long
            +--toByteBuffer--(ByteBuffer, Long): void
            +--getByteSize--(Long): int
            +getFixedByteSize(): int
        }

        class elki.utilities.io.ByteArrayUtil.FloatSerializer [[ByteArrayUtil.FloatSerializer.html]] {
            +--fromByteBuffer--(ByteBuffer): Float
            +--toByteBuffer--(ByteBuffer, Float): void
            +--getByteSize--(Float): int
            +getFixedByteSize(): int
        }

        class elki.utilities.io.ByteArrayUtil.DoubleSerializer [[ByteArrayUtil.DoubleSerializer.html]] {
            +--fromByteBuffer--(ByteBuffer): Double
            +--toByteBuffer--(ByteBuffer, Double): void
            +--getByteSize--(Double): int
            +getFixedByteSize(): int
        }

        class elki.utilities.io.ByteArrayUtil.StringSerializer [[ByteArrayUtil.StringSerializer.html]] {
            ~charset: Charset
            ~encoder: CharsetEncoder
            ~decoder: CharsetDecoder
            +fromByteBuffer(ByteBuffer): String
            +toByteBuffer(ByteBuffer, String): void
            +getByteSize(String): int
        }

        class elki.utilities.io.ByteArrayUtil.VarintSerializer [[ByteArrayUtil.VarintSerializer.html]] {
            +--fromByteBuffer--(ByteBuffer): Integer
            +--toByteBuffer--(ByteBuffer, Integer): void
            +--getByteSize--(Integer): int
        }

        java.lang.NumberFormatException <|-- elki.utilities.io.ParseUtil.PreallocatedException
        ParseUtil +-- elki.utilities.io.ParseUtil.PreallocatedException
        java.lang.AutoCloseable <|.. LineReader
        elki.utilities.datastructures.iterator.Iter <|.. Tokenizer
        BufferedLineReader <|-- TokenizedReader
        TokenizedReader --> Tokenizer: tokenizer
        java.io.InputStream <|-- ByteBufferInputStream
        ByteBufferSerializer <|-- FixedSizeByteBufferSerializer
        java.io.OutputStream <|-- ByteBufferOutputStream
        java.lang.AutoCloseable <|.. BufferedLineReader
        BufferedLineReader --> LineReader: reader
        ByteArrayUtil --> elki.utilities.io.ByteArrayUtil.ByteSerializer: BYTE_SERIALIZER
        ByteArrayUtil --> elki.utilities.io.ByteArrayUtil.ShortSerializer: SHORT_SERIALIZER
        ByteArrayUtil --> elki.utilities.io.ByteArrayUtil.IntegerSerializer: INT_SERIALIZER
        ByteArrayUtil --> elki.utilities.io.ByteArrayUtil.LongSerializer: LONG_SERIALIZER
        ByteArrayUtil --> elki.utilities.io.ByteArrayUtil.FloatSerializer: FLOAT_SERIALIZER
        ByteArrayUtil --> elki.utilities.io.ByteArrayUtil.DoubleSerializer: DOUBLE_SERIALIZER
        ByteArrayUtil --> elki.utilities.io.ByteArrayUtil.StringSerializer: STRING_SERIALIZER
        ByteArrayUtil --> elki.utilities.io.ByteArrayUtil.VarintSerializer: VARINT_SERIALIZER
        FixedSizeByteBufferSerializer <|.. elki.utilities.io.ByteArrayUtil.ByteSerializer
        ByteArrayUtil +-- elki.utilities.io.ByteArrayUtil.ByteSerializer
        FixedSizeByteBufferSerializer <|.. elki.utilities.io.ByteArrayUtil.ShortSerializer
        ByteArrayUtil +-- elki.utilities.io.ByteArrayUtil.ShortSerializer
        FixedSizeByteBufferSerializer <|.. elki.utilities.io.ByteArrayUtil.IntegerSerializer
        ByteArrayUtil +-- elki.utilities.io.ByteArrayUtil.IntegerSerializer
        FixedSizeByteBufferSerializer <|.. elki.utilities.io.ByteArrayUtil.LongSerializer
        ByteArrayUtil +-- elki.utilities.io.ByteArrayUtil.LongSerializer
        FixedSizeByteBufferSerializer <|.. elki.utilities.io.ByteArrayUtil.FloatSerializer
        ByteArrayUtil +-- elki.utilities.io.ByteArrayUtil.FloatSerializer
        FixedSizeByteBufferSerializer <|.. elki.utilities.io.ByteArrayUtil.DoubleSerializer
        ByteArrayUtil +-- elki.utilities.io.ByteArrayUtil.DoubleSerializer
        ByteBufferSerializer <|.. elki.utilities.io.ByteArrayUtil.StringSerializer
        ByteArrayUtil +-- elki.utilities.io.ByteArrayUtil.StringSerializer
        ByteBufferSerializer <|.. elki.utilities.io.ByteArrayUtil.VarintSerializer
        ByteArrayUtil +-- elki.utilities.io.ByteArrayUtil.VarintSerializer
    }

    namespace java.lang {
        class NumberFormatException {
            {static} ~serialVersionUID: long
        }
        interface AutoCloseable {
            {abstract} +close(): void
        }
    }

    namespace elki.utilities.datastructures.iterator {
        interface Iter [[../datastructures/iterator/Iter.html]] {
            {abstract} +valid(): boolean
            {abstract} +advance(): Iter
        }
    }

    namespace java.io {
        abstract class InputStream {
            {static} -MAX_SKIP_BUFFER_SIZE: int
            {static} -DEFAULT_BUFFER_SIZE: int
            {static} -MAX_BUFFER_SIZE: int
            {abstract} +read(): int
        }
        abstract class OutputStream {
            {abstract} +write(int): void
        }
    }

    center footer UMLDoclet 2.0.19, PlantUML 1.2022.8
@enduml
