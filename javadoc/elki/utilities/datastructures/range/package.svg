<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="723px" preserveAspectRatio="none" style="width:1001px;height:723px;background:#FFFFFF;" version="1.1" viewBox="0 0 1001 723" width="1001px" zoomAndPan="magnify"><defs/><g><!--MD5=[db865b33548906aed69941961f7e79cb]
cluster elki.utilities.datastructures.range--><g id="cluster_elki.utilities.datastructures.range"><path d="M8.5,6 L271.5,6 A3.75,3.75 0 0 1 274,8.5 L281,28.2969 L991.5,28.2969 A2.5,2.5 0 0 1 994,30.7969 L994,695.5 A2.5,2.5 0 0 1 991.5,698 L8.5,698 A2.5,2.5 0 0 1 6,695.5 L6,8.5 A2.5,2.5 0 0 1 8.5,6 " fill="none" style="stroke:#000000;stroke-width:1.5;"/><line style="stroke:#000000;stroke-width:1.5;" x1="6" x2="281" y1="28.2969" y2="28.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="262" x="10" y="20.9951">elki.utilities.datastructures.range</text></g><!--MD5=[62eb34d15ac68ecfe27222ecd6c4927d]
class elki.utilities.datastructures.range.CombinedIntGenerator--><a href="CombinedIntGenerator.html" target="_top" title="CombinedIntGenerator.html" xlink:actuate="onRequest" xlink:href="CombinedIntGenerator.html" xlink:show="new" xlink:title="CombinedIntGenerator.html" xlink:type="simple"><g id="elem_elki.utilities.datastructures.range.CombinedIntGenerator"><rect codeLine="4" fill="#F1F1F1" height="194.6719" id="elki.utilities.datastructures.range.CombinedIntGenerator" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="373" x="377.5" y="41"/><ellipse cx="480.75" cy="57" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M483.7188,62.6406 Q483.1406,62.9375 482.5,63.0781 Q481.8594,63.2344 481.1563,63.2344 Q478.6563,63.2344 477.3281,61.5938 Q476.0156,59.9375 476.0156,56.8125 Q476.0156,53.6875 477.3281,52.0313 Q478.6563,50.375 481.1563,50.375 Q481.8594,50.375 482.5,50.5313 Q483.1563,50.6875 483.7188,50.9844 L483.7188,53.7031 Q483.0938,53.125 482.5,52.8594 Q481.9063,52.5781 481.2813,52.5781 Q479.9375,52.5781 479.25,53.6563 Q478.5625,54.7188 478.5625,56.8125 Q478.5625,58.9063 479.25,59.9844 Q479.9375,61.0469 481.2813,61.0469 Q481.9063,61.0469 482.5,60.7813 Q483.0938,60.5 483.7188,59.9219 L483.7188,62.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="158" x="501.25" y="61.8467">CombinedIntGenerator</text><line style="stroke:#181818;stroke-width:0.5;" x1="378.5" x2="749.5" y1="73" y2="73"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="385.5" y="83.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="51" x="397.5" y="89.9951">min: int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="385.5" y="99.9453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="54" x="397.5" y="106.292">max: int</text><line style="stroke:#181818;stroke-width:0.5;" x1="378.5" x2="749.5" y1="113.5938" y2="113.5938"/><ellipse cx="388.5" cy="127.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="267" x="397.5" y="130.5889">CombinedIntGenerator(IntGenerator...)</text><ellipse cx="388.5" cy="143.5391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="347" x="397.5" y="146.8857">CombinedIntGenerator(Collection&lt;IntGenerator&gt;)</text><ellipse cx="388.5" cy="159.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="83" x="397.5" y="163.1826">getMin(): int</text><ellipse cx="388.5" cy="176.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="86" x="397.5" y="179.4795">getMax(): int</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="385.5" y="189.4297"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="147" x="397.5" y="195.7764">updateMinMax(): void</text><ellipse cx="388.5" cy="208.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="188" x="397.5" y="212.0732">forEach(IntConsumer): void</text><ellipse cx="388.5" cy="225.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="269" x="397.5" y="228.3701">serializeTo(StringBuilder): StringBuilder</text></g></a><!--MD5=[d2b236d8c5eebccca71a139455e2de6d]
class elki.utilities.datastructures.range.StaticIntGenerator--><a href="StaticIntGenerator.html" target="_top" title="StaticIntGenerator.html" xlink:actuate="onRequest" xlink:href="StaticIntGenerator.html" xlink:show="new" xlink:title="StaticIntGenerator.html" xlink:type="simple"><g id="elem_elki.utilities.datastructures.range.StaticIntGenerator"><rect codeLine="16" fill="#F1F1F1" height="194.6719" id="elki.utilities.datastructures.range.StaticIntGenerator" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="295" x="22.5" y="487"/><ellipse cx="103.25" cy="503" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M106.2188,508.6406 Q105.6406,508.9375 105,509.0781 Q104.3594,509.2344 103.6563,509.2344 Q101.1563,509.2344 99.8281,507.5938 Q98.5156,505.9375 98.5156,502.8125 Q98.5156,499.6875 99.8281,498.0313 Q101.1563,496.375 103.6563,496.375 Q104.3594,496.375 105,496.5313 Q105.6563,496.6875 106.2188,496.9844 L106.2188,499.7031 Q105.5938,499.125 105,498.8594 Q104.4063,498.5781 103.7813,498.5781 Q102.4375,498.5781 101.75,499.6563 Q101.0625,500.7188 101.0625,502.8125 Q101.0625,504.9063 101.75,505.9844 Q102.4375,507.0469 103.7813,507.0469 Q104.4063,507.0469 105,506.7813 Q105.5938,506.5 106.2188,505.9219 L106.2188,508.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="125" x="123.75" y="507.8467">StaticIntGenerator</text><line style="stroke:#181818;stroke-width:0.5;" x1="23.5" x2="316.5" y1="519" y2="519"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="30.5" y="529.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="51" x="42.5" y="535.9951">min: int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="30.5" y="545.9453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="54" x="42.5" y="552.292">max: int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="30.5" y="562.2422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="80" x="42.5" y="568.5889">values: int[]</text><line style="stroke:#181818;stroke-width:0.5;" x1="23.5" x2="316.5" y1="575.8906" y2="575.8906"/><ellipse cx="33.5" cy="589.5391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="164" x="42.5" y="592.8857">StaticIntGenerator(int...)</text><ellipse cx="33.5" cy="605.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="83" x="42.5" y="609.1826">getMin(): int</text><ellipse cx="33.5" cy="622.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="86" x="42.5" y="625.4795">getMax(): int</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="30.5" y="635.4297"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="147" x="42.5" y="641.7764">updateMinMax(): void</text><ellipse cx="33.5" cy="654.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="188" x="42.5" y="658.0732">forEach(IntConsumer): void</text><ellipse cx="33.5" cy="671.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="269" x="42.5" y="674.3701">serializeTo(StringBuilder): StringBuilder</text></g></a><!--MD5=[4ed935c1a87fa0ce8f8d54bee0fce548]
class elki.utilities.datastructures.range.ExponentialIntGenerator--><a href="ExponentialIntGenerator.html" target="_top" title="ExponentialIntGenerator.html" xlink:actuate="onRequest" xlink:href="ExponentialIntGenerator.html" xlink:show="new" xlink:title="ExponentialIntGenerator.html" xlink:type="simple"><g id="elem_elki.utilities.datastructures.range.ExponentialIntGenerator"><rect codeLine="28" fill="#F1F1F1" height="178.375" id="elki.utilities.datastructures.range.ExponentialIntGenerator" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="295" x="352.5" y="495.5"/><ellipse cx="412.25" cy="511.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M415.2188,517.1406 Q414.6406,517.4375 414,517.5781 Q413.3594,517.7344 412.6563,517.7344 Q410.1563,517.7344 408.8281,516.0938 Q407.5156,514.4375 407.5156,511.3125 Q407.5156,508.1875 408.8281,506.5313 Q410.1563,504.875 412.6563,504.875 Q413.3594,504.875 414,505.0313 Q414.6563,505.1875 415.2188,505.4844 L415.2188,508.2031 Q414.5938,507.625 414,507.3594 Q413.4063,507.0781 412.7813,507.0781 Q411.4375,507.0781 410.75,508.1563 Q410.0625,509.2188 410.0625,511.3125 Q410.0625,513.4063 410.75,514.4844 Q411.4375,515.5469 412.7813,515.5469 Q413.4063,515.5469 414,515.2813 Q414.5938,515 415.2188,514.4219 L415.2188,517.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="167" x="432.75" y="516.3467">ExponentialIntGenerator</text><line style="stroke:#181818;stroke-width:0.5;" x1="353.5" x2="646.5" y1="527.5" y2="527.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="360.5" y="538.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="57" x="372.5" y="544.4951">start: int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="360.5" y="554.4453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="65" x="372.5" y="560.792">factor: int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="360.5" y="570.7422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="53" x="372.5" y="577.0889">end: int</text><line style="stroke:#181818;stroke-width:0.5;" x1="353.5" x2="646.5" y1="584.3906" y2="584.3906"/><ellipse cx="363.5" cy="598.0391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="244" x="372.5" y="601.3857">ExponentialIntGenerator(int, int, int)</text><ellipse cx="363.5" cy="614.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="83" x="372.5" y="617.6826">getMin(): int</text><ellipse cx="363.5" cy="630.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="86" x="372.5" y="633.9795">getMax(): int</text><ellipse cx="363.5" cy="646.9297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="188" x="372.5" y="650.2764">forEach(IntConsumer): void</text><ellipse cx="363.5" cy="663.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="269" x="372.5" y="666.5732">serializeTo(StringBuilder): StringBuilder</text></g></a><!--MD5=[5c46f1b411e6991e4fb49b547ead4275]
class elki.utilities.datastructures.range.LinearIntGenerator--><a href="LinearIntGenerator.html" target="_top" title="LinearIntGenerator.html" xlink:actuate="onRequest" xlink:href="LinearIntGenerator.html" xlink:show="new" xlink:title="LinearIntGenerator.html" xlink:type="simple"><g id="elem_elki.utilities.datastructures.range.LinearIntGenerator"><rect codeLine="39" fill="#F1F1F1" height="178.375" id="elki.utilities.datastructures.range.LinearIntGenerator" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="295" x="682.5" y="495.5"/><ellipse cx="761.75" cy="511.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M764.7188,517.1406 Q764.1406,517.4375 763.5,517.5781 Q762.8594,517.7344 762.1563,517.7344 Q759.6563,517.7344 758.3281,516.0938 Q757.0156,514.4375 757.0156,511.3125 Q757.0156,508.1875 758.3281,506.5313 Q759.6563,504.875 762.1563,504.875 Q762.8594,504.875 763.5,505.0313 Q764.1563,505.1875 764.7188,505.4844 L764.7188,508.2031 Q764.0938,507.625 763.5,507.3594 Q762.9063,507.0781 762.2813,507.0781 Q760.9375,507.0781 760.25,508.1563 Q759.5625,509.2188 759.5625,511.3125 Q759.5625,513.4063 760.25,514.4844 Q760.9375,515.5469 762.2813,515.5469 Q762.9063,515.5469 763.5,515.2813 Q764.0938,515 764.7188,514.4219 L764.7188,517.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="128" x="782.25" y="516.3467">LinearIntGenerator</text><line style="stroke:#181818;stroke-width:0.5;" x1="683.5" x2="976.5" y1="527.5" y2="527.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="690.5" y="538.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="57" x="702.5" y="544.4951">start: int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="690.5" y="554.4453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="57" x="702.5" y="560.792">step: int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="690.5" y="570.7422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="57" x="702.5" y="577.0889">stop: int</text><line style="stroke:#181818;stroke-width:0.5;" x1="683.5" x2="976.5" y1="584.3906" y2="584.3906"/><ellipse cx="693.5" cy="598.0391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="205" x="702.5" y="601.3857">LinearIntGenerator(int, int, int)</text><ellipse cx="693.5" cy="614.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="83" x="702.5" y="617.6826">getMin(): int</text><ellipse cx="693.5" cy="630.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="86" x="702.5" y="633.9795">getMax(): int</text><ellipse cx="693.5" cy="646.9297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="188" x="702.5" y="650.2764">forEach(IntConsumer): void</text><ellipse cx="693.5" cy="663.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="269" x="702.5" y="666.5732">serializeTo(StringBuilder): StringBuilder</text></g></a><!--MD5=[c73c3020400051c9e64e71baaec06864]
class elki.utilities.datastructures.range.IntGenerator--><a href="IntGenerator.html" target="_top" title="IntGenerator.html" xlink:actuate="onRequest" xlink:href="IntGenerator.html" xlink:show="new" xlink:title="IntGenerator.html" xlink:type="simple"><g id="elem_elki.utilities.datastructures.range.IntGenerator"><rect codeLine="50" fill="#F1F1F1" height="113.1875" id="elki.utilities.datastructures.range.IntGenerator" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="303" x="348.5" y="313"/><ellipse cx="451.25" cy="329" fill="#B4A7E5" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M447.1719,324.7656 L447.1719,322.6094 L454.5625,322.6094 L454.5625,324.7656 L452.0938,324.7656 L452.0938,332.8438 L454.5625,332.8438 L454.5625,335 L447.1719,335 L447.1719,332.8438 L449.6406,332.8438 L449.6406,324.7656 L447.1719,324.7656 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="89" x="471.75" y="333.8467">IntGenerator</text><line style="stroke:#181818;stroke-width:0.5;" x1="349.5" x2="650.5" y1="345" y2="345"/><line style="stroke:#181818;stroke-width:0.5;" x1="349.5" x2="650.5" y1="353" y2="353"/><ellipse cx="359.5" cy="366.6484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="85" x="368.5" y="369.9951">getMin(): int</text><ellipse cx="359.5" cy="382.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="89" x="368.5" y="386.292">getMax(): int</text><ellipse cx="359.5" cy="399.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="193" x="368.5" y="402.5889">forEach(IntConsumer): void</text><ellipse cx="359.5" cy="415.5391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="277" x="368.5" y="418.8857">serializeTo(StringBuilder): StringBuilder</text></g></a><!--MD5=[81838d3eb4190f06a75bae66be43effe]
class elki.utilities.datastructures.range.ParseIntRanges--><a href="ParseIntRanges.html" target="_top" title="ParseIntRanges.html" xlink:actuate="onRequest" xlink:href="ParseIntRanges.html" xlink:show="new" xlink:title="ParseIntRanges.html" xlink:type="simple"><g id="elem_elki.utilities.datastructures.range.ParseIntRanges"><rect codeLine="57" fill="#F1F1F1" height="80.5938" id="elki.utilities.datastructures.range.ParseIntRanges" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="281" x="48.5" y="98"/><ellipse cx="130.25" cy="114" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M133.2188,119.6406 Q132.6406,119.9375 132,120.0781 Q131.3594,120.2344 130.6563,120.2344 Q128.1563,120.2344 126.8281,118.5938 Q125.5156,116.9375 125.5156,113.8125 Q125.5156,110.6875 126.8281,109.0313 Q128.1563,107.375 130.6563,107.375 Q131.3594,107.375 132,107.5313 Q132.6563,107.6875 133.2188,107.9844 L133.2188,110.7031 Q132.5938,110.125 132,109.8594 Q131.4063,109.5781 130.7813,109.5781 Q129.4375,109.5781 128.75,110.6563 Q128.0625,111.7188 128.0625,113.8125 Q128.0625,115.9063 128.75,116.9844 Q129.4375,118.0469 130.7813,118.0469 Q131.4063,118.0469 132,117.7813 Q132.5938,117.5 133.2188,116.9219 L133.2188,119.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="109" x="150.75" y="118.8467">ParseIntRanges</text><line style="stroke:#181818;stroke-width:0.5;" x1="49.5" x2="328.5" y1="130" y2="130"/><line style="stroke:#181818;stroke-width:0.5;" x1="49.5" x2="328.5" y1="138" y2="138"/><ellipse cx="59.5" cy="151.6484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="255" x="68.5" y="154.9951">parseIntRanges(String): IntGenerator</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="56.5" y="164.9453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="68.5" y="171.292">nextSep(String, int): int</text></g></a><!--MD5=[8a2f7a14b748d9ab1e18ac319b9066c1]
reverse link elki.utilities.datastructures.range.IntGenerator to elki.utilities.datastructures.range.CombinedIntGenerator--><g id="link_elki.utilities.datastructures.range.IntGenerator_elki.utilities.datastructures.range.CombinedIntGenerator"><path codeLine="62" d="M561.12,294.91 C562.98,291 564.63,287.02 566,283 C571.03,268.26 573.48,252.17 574.32,236.26 " fill="none" id="elki.utilities.datastructures.range.IntGenerator-backto-elki.utilities.datastructures.range.CombinedIntGenerator" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="none" points="567.02,298.7,551.07,312.65,554.84,291.8,567.02,298.7" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[e1ecf4b19822b2e611ecc7d2f5afcbe1]
link elki.utilities.datastructures.range.CombinedIntGenerator to elki.utilities.datastructures.range.IntGenerator--><g id="link_elki.utilities.datastructures.range.CombinedIntGenerator_elki.utilities.datastructures.range.IntGenerator"><path codeLine="63" d="M497.3,236.13 C492.75,245.91 488.85,255.95 486,266 C482.23,279.31 481.99,293.89 483.51,307.78 " fill="none" id="elki.utilities.datastructures.range.CombinedIntGenerator-to-elki.utilities.datastructures.range.IntGenerator" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="484.14,312.86,487.0028,303.4364,483.5251,307.898,479.0636,304.4202,484.14,312.86" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="70" x="487" y="279.0669">generators</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="7" x="474.7805" y="302.1065">*</text></g><!--MD5=[363903f30be2af8cec215864d39fe01c]
reverse link elki.utilities.datastructures.range.IntGenerator to elki.utilities.datastructures.range.StaticIntGenerator--><g id="link_elki.utilities.datastructures.range.IntGenerator_elki.utilities.datastructures.range.StaticIntGenerator"><path codeLine="64" d="M396.76,437.14 C371.69,453.32 344.39,470.94 317.71,488.16 " fill="none" id="elki.utilities.datastructures.range.IntGenerator-backto-elki.utilities.datastructures.range.StaticIntGenerator" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="none" points="393.13,431.15,413.73,426.19,400.72,442.91,393.13,431.15" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[d661e5ee92348aaabd8898845b59367c]
reverse link elki.utilities.datastructures.range.IntGenerator to elki.utilities.datastructures.range.ExponentialIntGenerator--><g id="link_elki.utilities.datastructures.range.IntGenerator_elki.utilities.datastructures.range.ExponentialIntGenerator"><path codeLine="65" d="M500,446.29 C500,462.11 500,478.92 500,495.16 " fill="none" id="elki.utilities.datastructures.range.IntGenerator-backto-elki.utilities.datastructures.range.ExponentialIntGenerator" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="none" points="493,446.19,500,426.19,507,446.18,493,446.19" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[098fb2b1853c4a5e5ebee5e7dfc75a95]
reverse link elki.utilities.datastructures.range.IntGenerator to elki.utilities.datastructures.range.LinearIntGenerator--><g id="link_elki.utilities.datastructures.range.IntGenerator_elki.utilities.datastructures.range.LinearIntGenerator"><path codeLine="66" d="M603.2,437.11 C631.79,455.56 663.27,475.88 693.45,495.36 " fill="none" id="elki.utilities.datastructures.range.IntGenerator-backto-elki.utilities.datastructures.range.LinearIntGenerator" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="none" points="599.28,442.91,586.27,426.19,606.87,431.15,599.28,442.91" style="stroke:#181818;stroke-width:1.0;"/></g><rect fill="none" height="11.6406" style="stroke:none;stroke-width:1.0;" width="186" x="400.5" y="704"/><text fill="#888888" font-family="sans-serif" font-size="10" lengthAdjust="spacing" textLength="186" x="400.5" y="713.2822">UMLDoclet 2.0.19, PlantUML 1.2022.8</text><!--MD5=[c75cdd7fb623975e75c97e9da9fb5e22]
@startuml
    remove .*\.(Instance|Par|Parameterizer|Factory)$
    namespace elki.utilities.datastructures.range {

        class CombinedIntGenerator [[CombinedIntGenerator.html]] {
            -min: int
            -max: int
            +CombinedIntGenerator(IntGenerator...)
            +CombinedIntGenerator(Collection<IntGenerator>)
            +getMin(): int
            +getMax(): int
            -updateMinMax(): void
            +forEach(IntConsumer): void
            +serializeTo(StringBuilder): StringBuilder
        }

        class StaticIntGenerator [[StaticIntGenerator.html]] {
            -min: int
            -max: int
            -values: int[]
            +StaticIntGenerator(int...)
            +getMin(): int
            +getMax(): int
            -updateMinMax(): void
            +forEach(IntConsumer): void
            +serializeTo(StringBuilder): StringBuilder
        }

        class ExponentialIntGenerator [[ExponentialIntGenerator.html]] {
            -start: int
            -factor: int
            -end: int
            +ExponentialIntGenerator(int, int, int)
            +getMin(): int
            +getMax(): int
            +forEach(IntConsumer): void
            +serializeTo(StringBuilder): StringBuilder
        }

        class LinearIntGenerator [[LinearIntGenerator.html]] {
            -start: int
            -step: int
            -stop: int
            +LinearIntGenerator(int, int, int)
            +getMin(): int
            +getMax(): int
            +forEach(IntConsumer): void
            +serializeTo(StringBuilder): StringBuilder
        }

        interface IntGenerator [[IntGenerator.html]] {
            {abstract} +getMin(): int
            {abstract} +getMax(): int
            {abstract} +forEach(IntConsumer): void
            {abstract} +serializeTo(StringBuilder): StringBuilder
        }

        class ParseIntRanges [[ParseIntRanges.html]] {
            {static} +parseIntRanges(String): IntGenerator
            {static} -nextSep(String, int): int
        }

        IntGenerator <|.. CombinedIntGenerator
        CombinedIntGenerator - -> "*" IntGenerator: generators
        IntGenerator <|.. StaticIntGenerator
        IntGenerator <|.. ExponentialIntGenerator
        IntGenerator <|.. LinearIntGenerator
    }

    center footer UMLDoclet 2.0.19, PlantUML 1.2022.8
@enduml

PlantUML version 1.2022.8(Sun Sep 25 11:00:33 CEST 2022)
(APACHE source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: de
Country: DE
--></g></svg>