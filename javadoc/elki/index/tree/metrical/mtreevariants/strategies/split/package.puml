@startuml
    remove .*\.(Instance|Par|Parameterizer|Factory)$
    namespace elki.index.tree.metrical.mtreevariants.strategies.split {

        class MSTSplit<E extends MTreeEntry, N extends AbstractMTreeNode<?, N, E extends MTreeEntry>> [[MSTSplit.html]] {
            +split(AbstractMTree<?, N extends AbstractMTreeNode<?, N, E extends MTreeEntry>, E extends MTreeEntry, ?>, N extends AbstractMTreeNode<?, N extends AbstractMTreeNode<?,N,E>, E extends MTreeEntry>): Assignments<E extends MTreeEntry>
            {static} -coverRadius(double[], int[], int): double
            {static} -mstPartition(double[]): int[]
            {static} -thresholdLength(double[], int[]): double
            {static} -edgelength(double[], int[], int): double
            {static} -omitEdge(int[], int[], int[], int): void
            {static} -follow(int, int[]): int
        }

        class FarthestPointsSplit<E extends MTreeEntry, N extends AbstractMTreeNode<?, N, E extends MTreeEntry>> [[FarthestPointsSplit.html]] {
            +FarthestPointsSplit(DistributionStrategy)
            +split(AbstractMTree<?, N extends AbstractMTreeNode<?, N, E extends MTreeEntry>, E extends MTreeEntry, ?>, N extends AbstractMTreeNode<?, N extends AbstractMTreeNode<?,N,E>, E extends MTreeEntry>): Assignments<E extends MTreeEntry>
        }

        class elki.index.tree.metrical.mtreevariants.strategies.split.FarthestPointsSplit.Par<E extends MTreeEntry, N extends AbstractMTreeNode<?, N, E extends MTreeEntry>> {
            +make(): FarthestPointsSplit<E extends MTreeEntry, N extends AbstractMTreeNode<?, N, E extends MTreeEntry>>
        }

        interface MTreeSplit<E extends MTreeEntry, N extends AbstractMTreeNode<?, N, E extends MTreeEntry>> [[MTreeSplit.html]] {
            {abstract} +split(AbstractMTree<?, N extends AbstractMTreeNode<?, N, E extends MTreeEntry>, E extends MTreeEntry, ?>, N extends AbstractMTreeNode<?, N extends AbstractMTreeNode<?,N,E>, E extends MTreeEntry>): Assignments<E extends MTreeEntry>
        }

        class MRadSplit<E extends MTreeEntry, N extends AbstractMTreeNode<?, N, E extends MTreeEntry>> [[MRadSplit.html]] {
            +MRadSplit(DistributionStrategy)
            +split(AbstractMTree<?, N extends AbstractMTreeNode<?, N, E extends MTreeEntry>, E extends MTreeEntry, ?>, N extends AbstractMTreeNode<?, N extends AbstractMTreeNode<?,N,E>, E extends MTreeEntry>): Assignments<E extends MTreeEntry>
        }

        class elki.index.tree.metrical.mtreevariants.strategies.split.MRadSplit.Par<E extends MTreeEntry, N extends AbstractMTreeNode<?, N, E extends MTreeEntry>> {
            +make(): MRadSplit<E extends MTreeEntry, N extends AbstractMTreeNode<?, N, E extends MTreeEntry>>
        }

        class MMRadSplit<E extends MTreeEntry, N extends AbstractMTreeNode<?, N, E extends MTreeEntry>> [[MMRadSplit.html]] {
            +MMRadSplit(DistributionStrategy)
            +split(AbstractMTree<?, N extends AbstractMTreeNode<?, N, E extends MTreeEntry>, E extends MTreeEntry, ?>, N extends AbstractMTreeNode<?, N extends AbstractMTreeNode<?,N,E>, E extends MTreeEntry>): Assignments<E extends MTreeEntry>
        }

        class elki.index.tree.metrical.mtreevariants.strategies.split.MMRadSplit.Par<E extends MTreeEntry, N extends AbstractMTreeNode<?, N, E extends MTreeEntry>> {
            +make(): MMRadSplit<E extends MTreeEntry, N extends AbstractMTreeNode<?, N, E extends MTreeEntry>>
        }

        class RandomSplit<E extends MTreeEntry, N extends AbstractMTreeNode<?, N, E extends MTreeEntry>> [[RandomSplit.html]] {
            -random: Random
            +RandomSplit(DistributionStrategy, RandomFactory)
            +split(AbstractMTree<?, N extends AbstractMTreeNode<?, N, E extends MTreeEntry>, E extends MTreeEntry, ?>, N extends AbstractMTreeNode<?, N extends AbstractMTreeNode<?,N,E>, E extends MTreeEntry>): Assignments<E extends MTreeEntry>
        }

        class elki.index.tree.metrical.mtreevariants.strategies.split.RandomSplit.Par<E extends MTreeEntry, N extends AbstractMTreeNode<?, N, E extends MTreeEntry>> {
            {static} +RANDOM_ID: OptionID
            ~rnd: RandomFactory
            +configure(Parameterization): void
            +make(): RandomSplit<E extends MTreeEntry, N extends AbstractMTreeNode<?, N, E extends MTreeEntry>>
        }

        class MLBDistSplit<E extends MTreeEntry, N extends AbstractMTreeNode<?, N, E extends MTreeEntry>> [[MLBDistSplit.html]] {
            +MLBDistSplit(DistributionStrategy)
            +split(AbstractMTree<?, N extends AbstractMTreeNode<?, N, E extends MTreeEntry>, E extends MTreeEntry, ?>, N extends AbstractMTreeNode<?, N extends AbstractMTreeNode<?,N,E>, E extends MTreeEntry>): Assignments<E extends MTreeEntry>
        }

        class elki.index.tree.metrical.mtreevariants.strategies.split.MLBDistSplit.Par<E extends MTreeEntry, N extends AbstractMTreeNode<?, N, E extends MTreeEntry>> {
            +make(): MLBDistSplit<E extends MTreeEntry, N extends AbstractMTreeNode<?, N, E extends MTreeEntry>>
        }

        abstract class AbstractMTreeSplit<E extends MTreeEntry, N extends AbstractMTreeNode<?, N, E extends MTreeEntry>> [[AbstractMTreeSplit.html]] {
            +AbstractMTreeSplit(DistributionStrategy)
            {static} #computeDistanceMatrix(AbstractMTree<?, N extends AbstractMTreeNode<?, N, E extends MTreeEntry>, E extends MTreeEntry, ?>, N extends AbstractMTreeNode<?, N extends AbstractMTreeNode<?,N,E>, E extends MTreeEntry>): double[]
        }

        abstract class elki.index.tree.metrical.mtreevariants.strategies.split.AbstractMTreeSplit.Par<E extends MTreeEntry, N extends AbstractMTreeNode<?, N, E extends MTreeEntry>> {
            {static} +DISTRIBUTOR_ID: OptionID
            +configure(Parameterization): void
            {abstract} +make(): MTreeSplit<E extends MTreeEntry, N extends AbstractMTreeNode<?, N, E extends MTreeEntry>>
        }

        MTreeSplit <|.. MSTSplit
        AbstractMTreeSplit <|-- FarthestPointsSplit
        elki.index.tree.metrical.mtreevariants.strategies.split.AbstractMTreeSplit.Par <|-- elki.index.tree.metrical.mtreevariants.strategies.split.FarthestPointsSplit.Par
        FarthestPointsSplit +-- elki.index.tree.metrical.mtreevariants.strategies.split.FarthestPointsSplit.Par
        AbstractMTreeSplit <|-- MRadSplit
        elki.index.tree.metrical.mtreevariants.strategies.split.AbstractMTreeSplit.Par <|-- elki.index.tree.metrical.mtreevariants.strategies.split.MRadSplit.Par
        MRadSplit +-- elki.index.tree.metrical.mtreevariants.strategies.split.MRadSplit.Par
        AbstractMTreeSplit <|-- MMRadSplit
        elki.index.tree.metrical.mtreevariants.strategies.split.AbstractMTreeSplit.Par <|-- elki.index.tree.metrical.mtreevariants.strategies.split.MMRadSplit.Par
        MMRadSplit +-- elki.index.tree.metrical.mtreevariants.strategies.split.MMRadSplit.Par
        AbstractMTreeSplit <|-- RandomSplit
        elki.index.tree.metrical.mtreevariants.strategies.split.AbstractMTreeSplit.Par <|-- elki.index.tree.metrical.mtreevariants.strategies.split.RandomSplit.Par
        RandomSplit +-- elki.index.tree.metrical.mtreevariants.strategies.split.RandomSplit.Par
        AbstractMTreeSplit <|-- MLBDistSplit
        elki.index.tree.metrical.mtreevariants.strategies.split.AbstractMTreeSplit.Par <|-- elki.index.tree.metrical.mtreevariants.strategies.split.MLBDistSplit.Par
        MLBDistSplit +-- elki.index.tree.metrical.mtreevariants.strategies.split.MLBDistSplit.Par
        MTreeSplit <|.. AbstractMTreeSplit
        AbstractMTreeSplit --> elki.index.tree.metrical.mtreevariants.strategies.split.distribution.DistributionStrategy: distributor
        elki.utilities.optionhandling.Parameterizer <|.. elki.index.tree.metrical.mtreevariants.strategies.split.AbstractMTreeSplit.Par
        AbstractMTreeSplit +-- elki.index.tree.metrical.mtreevariants.strategies.split.AbstractMTreeSplit.Par
        elki.index.tree.metrical.mtreevariants.strategies.split.AbstractMTreeSplit.Par --> elki.index.tree.metrical.mtreevariants.strategies.split.distribution.DistributionStrategy: distributor
    }

    namespace elki.utilities.optionhandling {
        interface Parameterizer [[../../../../../../utilities/optionhandling/Parameterizer.html]] {
            +configure(Parameterization): void
            {abstract} +make(): Object
        }
    }

    center footer UMLDoclet 2.0.19, PlantUML 1.2022.8
@enduml
