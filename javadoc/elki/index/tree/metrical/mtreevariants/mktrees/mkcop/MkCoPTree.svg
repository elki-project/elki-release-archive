<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="586px" preserveAspectRatio="none" style="width:872px;height:586px;background:#FFFFFF;" version="1.1" viewBox="0 0 872 586" width="872px" zoomAndPan="magnify"><defs/><g><!--MD5=[3a2cbba32e9f56679514306af4bcb5fd]
class elki.index.tree.metrical.mtreevariants.mktrees.mkcop.MkCoPTree--><a href="MkCoPTree.html" target="_top" title="MkCoPTree.html" xlink:actuate="onRequest" xlink:href="MkCoPTree.html" xlink:show="new" xlink:title="MkCoPTree.html" xlink:type="simple"><g id="elem_elki.index.tree.metrical.mtreevariants.mktrees.mkcop.MkCoPTree"><rect codeLine="6" fill="#F1F1F1" height="428.7656" id="elki.index.tree.metrical.mtreevariants.mktrees.mkcop.MkCoPTree" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="852" x="9" y="132"/><ellipse cx="289.75" cy="150.9688" fill="#A9DCDF" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M289.8594,146.3125 L288.7031,151.3906 L291.0313,151.3906 L289.8594,146.3125 Z M288.375,144.0781 L291.3594,144.0781 L294.7188,156.4688 L292.2656,156.4688 L291.5,153.4063 L288.2188,153.4063 L287.4688,156.4688 L285.0313,156.4688 L288.375,144.0781 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="79" x="405.75" y="149.9951">MkCoPTree</text><text fill="#000000" font-family="sans-serif" font-size="10" font-style="italic" lengthAdjust="spacing" textLength="270" x="310.25" y="162.5791">elki.index.tree.metrical.mtreevariants.mktrees.mkcop</text><rect fill="#FFFFFF" height="15.9688" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="10" x="854" y="129"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="8" x="855" y="141.1387">O</text><line style="stroke:#181818;stroke-width:0.5;" x1="10" x2="860" y1="169.9375" y2="169.9375"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="180.5859"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="93" x="29" y="186.9326">LOG: Logging</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="196.8828"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="103" x="29" y="203.2295">log_k: double[]</text><line style="stroke:#181818;stroke-width:0.5;" x1="10" x2="860" y1="210.5313" y2="210.5313"/><ellipse cx="20" cy="224.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="826" x="29" y="227.5264">MkCoPTree(Relation&lt;O&gt;, PageFile&lt;MkCoPTreeNode&lt;O&gt;&gt;, MkTreeSettings&lt;O, MkCoPTreeNode&lt;O&gt;, MkCoPEntry&gt;)</text><polygon fill="#FFFF44" points="20,235.4766,24,239.4766,20,243.4766,16,239.4766" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="192" x="29" y="243.8232">preInsert(MkCoPEntry): void</text><ellipse cx="20" cy="256.7734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="233" x="29" y="260.1201">insert(MkCoPEntry, boolean): void</text><ellipse cx="20" cy="273.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="231" x="29" y="276.417">insertAll(List&lt;MkCoPEntry&gt;): void</text><ellipse cx="20" cy="289.3672" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="332" x="29" y="292.7139">reverseKNNQuery(DBIDRef, int): DoubleDBIDList</text><ellipse cx="20" cy="305.6641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="96" x="29" y="309.0107">getKmax(): int</text><polygon fill="#FFFF44" points="20,316.9609,24,320.9609,20,324.9609,16,320.9609" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="255" x="29" y="325.3076">initializeCapacities(MkCoPEntry): void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="335.2578"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="580" x="29" y="341.6045">doReverseKNNQuery(int, DBIDRef, ModifiableDoubleDBIDList, ModifiableDBIDs): void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="351.5547"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="521" x="29" y="357.9014">adjustApproximatedKNNDistances(MkCoPEntry, Map&lt;DBID, KNNList&gt;): void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="367.8516"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="397" x="29" y="374.1982">ssqerr(int, int, double[], double[], double, double): double</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="384.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="504" x="29" y="390.4951">optimize(int, int, double, double, double, double, double, double): double</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="400.4453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="399" x="29" y="406.792">approximateKnnDistances(MkCoPLeafEntry, KNNList): void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="416.7422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="728" x="29" y="423.0889">approximateLowerHull(ConvexHull, double[], double, double, double[], double, double): ApproximationLine</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="433.0391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="505" x="29" y="439.3857">approximateUpperHull(ConvexHull, double[], double[]): ApproximationLine</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="449.3359"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="769" x="29" y="455.6826">approximateUpperHullPaper(ConvexHull, double[], double, double, double[], double, double): ApproximationLine</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="465.6328"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="752" x="29" y="471.9795">approximateUpperHullOld(ConvexHull, double[], double, double, double[], double, double): ApproximationLine</text><polygon fill="#FFFF44" points="20,479.9297,24,483.9297,20,487.9297,16,483.9297" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="310" x="29" y="488.2764">createNewLeafNode(): MkCoPTreeNode&lt;O&gt;</text><polygon fill="#FFFF44" points="20,496.2266,24,500.2266,20,504.2266,16,500.2266" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="344" x="29" y="504.5732">createNewDirectoryNode(): MkCoPTreeNode&lt;O&gt;</text><polygon fill="#FFFF44" points="20,512.5234,24,516.5234,20,520.5234,16,516.5234" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="524" x="29" y="520.8701">createNewDirectoryEntry(MkCoPTreeNode&lt;O&gt;, DBID, double): MkCoPEntry</text><polygon fill="#FFFF44" points="20,528.8203,24,532.8203,20,536.8203,16,532.8203" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="29" y="537.167">createRootEntry(): MkCoPEntry</text><polygon fill="#FFFF44" points="20,545.1172,24,549.1172,20,553.1172,16,549.1172" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="145" x="29" y="553.4639">getLogger(): Logging</text></g></a><!--MD5=[91f1993301d71f5b58ff9476738a2524]
class elki.index.tree.metrical.mtreevariants.mktrees.AbstractMkTree--><a href="../AbstractMkTree.html" target="_top" title="../AbstractMkTree.html" xlink:actuate="onRequest" xlink:href="../AbstractMkTree.html" xlink:show="new" xlink:title="../AbstractMkTree.html" xlink:type="simple"><g id="elem_elki.index.tree.metrical.mtreevariants.mktrees.AbstractMkTree"><rect codeLine="32" fill="#F1F1F1" height="62.2344" id="elki.index.tree.metrical.mtreevariants.mktrees.AbstractMkTree" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="827" x="21.5" y="10"/><ellipse cx="36.5" cy="28.9688" fill="#A9DCDF" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M36.6094,24.3125 L35.4531,29.3906 L37.7813,29.3906 L36.6094,24.3125 Z M35.125,22.0781 L38.1094,22.0781 L41.4688,34.4688 L39.0156,34.4688 L38.25,31.4063 L34.9688,31.4063 L34.2188,34.4688 L31.7813,34.4688 L35.125,22.0781 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="110" x="112" y="27.9951">AbstractMkTree</text><text fill="#000000" font-family="sans-serif" font-size="10" font-style="italic" lengthAdjust="spacing" textLength="233" x="50.5" y="40.5791">elki.index.tree.metrical.mtreevariants.mktrees</text><rect fill="#FFFFFF" height="15.9688" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="560" x="291.5" y="7"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="558" x="292.5" y="19.1387">O, MkCoPTreeNode&lt;O&gt;, MkCoPEntry, MkTreeSettings&lt;O, MkCoPTreeNode&lt;O&gt;, MkCoPEntry&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="22.5" x2="847.5" y1="47.9375" y2="47.9375"/><ellipse cx="32.5" cy="61.5859" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="341" x="41.5" y="64.9326">reverseKNNQuery(DBIDRef, int): DoubleDBIDList</text></g></a><!--MD5=[335bf8f92afd60ecd490cbb2ed9d2a45]
reverse link elki.index.tree.metrical.mtreevariants.mktrees.AbstractMkTree to elki.index.tree.metrical.mtreevariants.mktrees.mkcop.MkCoPTree--><g id="link_elki.index.tree.metrical.mtreevariants.mktrees.AbstractMkTree_elki.index.tree.metrical.mtreevariants.mktrees.mkcop.MkCoPTree"><path codeLine="36" d="M435,92.35 C435,104.2 435,117.57 435,131.82 " fill="none" id="elki.index.tree.metrical.mtreevariants.mktrees.AbstractMkTree-backto-elki.index.tree.metrical.mtreevariants.mktrees.mkcop.MkCoPTree" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="428,92.21,435,72.21,442,92.21,428,92.21" style="stroke:#181818;stroke-width:1.0;"/></g><rect fill="none" height="11.6406" style="stroke:none;stroke-width:1.0;" width="186" x="336" y="566.7656"/><text fill="#888888" font-family="sans-serif" font-size="10" lengthAdjust="spacing" textLength="186" x="336" y="576.0479">UMLDoclet 2.0.19, PlantUML 1.2022.8</text><!--MD5=[9ff47d5597cb30acc757419c00fa53a9]
@startuml
    remove .*\.(Instance|Par|Parameterizer|Factory)$
    set namespaceSeparator none
    hide empty fields
    hide empty methods

    abstract class "<size:14>MkCoPTree\n<size:10>elki.index.tree.metrical.mtreevariants.mktrees.mkcop" as elki.index.tree.metrical.mtreevariants.mktrees.mkcop.MkCoPTree<O> [[MkCoPTree.html]] {
        {static} -LOG: Logging
        -log_k: double[]
        +MkCoPTree(Relation<O>, PageFile<MkCoPTreeNode<O>>, MkTreeSettings<O, MkCoPTreeNode<O>, MkCoPEntry>)
        #preInsert(MkCoPEntry): void
        +insert(MkCoPEntry, boolean): void
        +insertAll(List<MkCoPEntry>): void
        +reverseKNNQuery(DBIDRef, int): DoubleDBIDList
        +getKmax(): int
        #initializeCapacities(MkCoPEntry): void
        -doReverseKNNQuery(int, DBIDRef, ModifiableDoubleDBIDList, ModifiableDBIDs): void
        -adjustApproximatedKNNDistances(MkCoPEntry, Map<DBID, KNNList>): void
        -ssqerr(int, int, double[], double[], double, double): double
        -optimize(int, int, double, double, double, double, double, double): double
        -approximateKnnDistances(MkCoPLeafEntry, KNNList): void
        -approximateLowerHull(ConvexHull, double[], double, double, double[], double, double): ApproximationLine
        -approximateUpperHull(ConvexHull, double[], double[]): ApproximationLine
        -approximateUpperHullPaper(ConvexHull, double[], double, double, double[], double, double): ApproximationLine
        -approximateUpperHullOld(ConvexHull, double[], double, double, double[], double, double): ApproximationLine
        #createNewLeafNode(): MkCoPTreeNode<O>
        #createNewDirectoryNode(): MkCoPTreeNode<O>
        #createNewDirectoryEntry(MkCoPTreeNode<O>, DBID, double): MkCoPEntry
        #createRootEntry(): MkCoPEntry
        #getLogger(): Logging
    }

    abstract class "<size:14>AbstractMkTree\n<size:10>elki.index.tree.metrical.mtreevariants.mktrees" as elki.index.tree.metrical.mtreevariants.mktrees.AbstractMkTree<O, MkCoPTreeNode<O>, MkCoPEntry, MkTreeSettings<O, MkCoPTreeNode<O>, MkCoPEntry>> [[../AbstractMkTree.html]] {
        {abstract} +reverseKNNQuery(DBIDRef, int): DoubleDBIDList
    }

    elki.index.tree.metrical.mtreevariants.mktrees.AbstractMkTree <|- - elki.index.tree.metrical.mtreevariants.mktrees.mkcop.MkCoPTree

    center footer UMLDoclet 2.0.19, PlantUML 1.2022.8
@enduml

PlantUML version 1.2022.8(Sun Sep 25 11:00:33 CEST 2022)
(APACHE source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: de
Country: DE
--></g></svg>