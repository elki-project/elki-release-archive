@startuml
    remove .*\.(Instance|Par|Parameterizer|Factory)$
    set namespaceSeparator none
    hide empty fields
    hide empty methods

    abstract class "<size:14>AbstractNode\n<size:10>elki.index.tree" as elki.index.tree.AbstractNode<E> [[AbstractNode.html]] {
        #numEntries: int
        #entries: Object[]
        #isLeaf: boolean
        +AbstractNode()
        +AbstractNode(int, boolean)
        +children(IndexTreePath<E>): Iterator<IndexTreePath<E>>
        +getNumEntries(): int
        +isLeaf(): boolean
        +getEntry(int): E
        +writeExternal(ObjectOutput): void
        +readExternal(ObjectInput): void
        +addEntry(E): int
        +deleteEntry(int): boolean
        +deleteAllEntries(): void
        +getCapacity(): int
        +removeMask(long[]): void
        +splitTo(AbstractNode<E>, List<E>, int): void
        +splitTo(AbstractNode<E>, List<E>, List<E>): void
        +splitByMask(AbstractNode<E>, long[]): void
    }

    abstract class "<size:14>AbstractExternalizablePage\n<size:10>elki.persistent" as elki.persistent.AbstractExternalizablePage [[../../persistent/AbstractExternalizablePage.html]]
    interface "<size:14>Node\n<size:10>elki.index.tree" as elki.index.tree.Node<E> [[Node.html]] {
        {abstract} +children(IndexTreePath<E>): Iterator<IndexTreePath<E>>
        {abstract} +getNumEntries(): int
        {abstract} +isLeaf(): boolean
        {abstract} +getEntry(int): E
        {abstract} +addEntry(E): int
    }

    elki.persistent.AbstractExternalizablePage <|-- elki.index.tree.AbstractNode
    elki.index.tree.Node <|.. elki.index.tree.AbstractNode

    center footer UMLDoclet 2.0.19, PlantUML 1.2022.8
@enduml
