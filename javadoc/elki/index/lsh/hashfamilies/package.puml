@startuml
    remove .*\.(Instance|Par|Parameterizer|Factory)$
    namespace elki.index.lsh.hashfamilies {

        class EuclideanHashFunctionFamily [[EuclideanHashFunctionFamily.html]] {
            +EuclideanHashFunctionFamily(RandomFactory, double, int)
            +isCompatible(Distance<?>): boolean
        }

        class elki.index.lsh.hashfamilies.EuclideanHashFunctionFamily.Par [[EuclideanHashFunctionFamily.Par.html]] {
            +make(): EuclideanHashFunctionFamily
        }

        class ManhattanHashFunctionFamily [[ManhattanHashFunctionFamily.html]] {
            +ManhattanHashFunctionFamily(RandomFactory, double, int)
            +isCompatible(Distance<?>): boolean
        }

        class elki.index.lsh.hashfamilies.ManhattanHashFunctionFamily.Par [[ManhattanHashFunctionFamily.Par.html]] {
            +make(): ManhattanHashFunctionFamily
        }

        class CosineHashFunctionFamily [[CosineHashFunctionFamily.html]] {
            -proj: RandomProjectionFamily
            -k: int
            +CosineHashFunctionFamily(int, RandomFactory)
            +getInputTypeRestriction(): TypeInformation
            +generateHashFunctions(Relation<? extends NumberVector>, int): ArrayList<? extends LocalitySensitiveHashFunction<? super NumberVector>>
            +isCompatible(Distance<?>): boolean
        }

        class elki.index.lsh.hashfamilies.CosineHashFunctionFamily.Par [[CosineHashFunctionFamily.Par.html]] {
            {static} +RANDOM_ID: OptionID
            {static} +NUMPROJ_ID: OptionID
            ~random: RandomFactory
            ~k: int
            +configure(Parameterization): void
            +make(): CosineHashFunctionFamily
        }

        abstract class AbstractProjectedHashFunctionFamily [[AbstractProjectedHashFunctionFamily.html]] {
            #random: RandomFactory
            #proj: RandomProjectionFamily
            #width: double
            #k: int
            +AbstractProjectedHashFunctionFamily(RandomFactory, RandomProjectionFamily, double, int)
            +generateHashFunctions(Relation<? extends NumberVector>, int): ArrayList<? extends LocalitySensitiveHashFunction<? super NumberVector>>
            +getInputTypeRestriction(): TypeInformation
        }

        abstract class elki.index.lsh.hashfamilies.AbstractProjectedHashFunctionFamily.Par [[AbstractProjectedHashFunctionFamily.Par.html]] {
            {static} +RANDOM_ID: OptionID
            {static} +WIDTH_ID: OptionID
            {static} +NUMPROJ_ID: OptionID
            ~random: RandomFactory
            ~width: double
            ~k: int
            +configure(Parameterization): void
        }

        interface LocalitySensitiveHashFunctionFamily<V> [[LocalitySensitiveHashFunctionFamily.html]] {
            {abstract} +getInputTypeRestriction(): TypeInformation
            {abstract} +generateHashFunctions(Relation<? extends V>, int): ArrayList<? extends LocalitySensitiveHashFunction<? super V>>
            {abstract} +isCompatible(Distance<?>): boolean
        }

        AbstractProjectedHashFunctionFamily <|-- EuclideanHashFunctionFamily
        elki.index.lsh.hashfamilies.AbstractProjectedHashFunctionFamily.Par <|-- elki.index.lsh.hashfamilies.EuclideanHashFunctionFamily.Par
        EuclideanHashFunctionFamily +-- elki.index.lsh.hashfamilies.EuclideanHashFunctionFamily.Par
        AbstractProjectedHashFunctionFamily <|-- ManhattanHashFunctionFamily
        elki.index.lsh.hashfamilies.AbstractProjectedHashFunctionFamily.Par <|-- elki.index.lsh.hashfamilies.ManhattanHashFunctionFamily.Par
        ManhattanHashFunctionFamily +-- elki.index.lsh.hashfamilies.ManhattanHashFunctionFamily.Par
        LocalitySensitiveHashFunctionFamily <|.. CosineHashFunctionFamily
        elki.utilities.optionhandling.Parameterizer <|.. elki.index.lsh.hashfamilies.CosineHashFunctionFamily.Par
        CosineHashFunctionFamily +-- elki.index.lsh.hashfamilies.CosineHashFunctionFamily.Par
        LocalitySensitiveHashFunctionFamily <|.. AbstractProjectedHashFunctionFamily
        elki.utilities.optionhandling.Parameterizer <|.. elki.index.lsh.hashfamilies.AbstractProjectedHashFunctionFamily.Par
        AbstractProjectedHashFunctionFamily +-- elki.index.lsh.hashfamilies.AbstractProjectedHashFunctionFamily.Par
    }

    namespace elki.utilities.optionhandling {
        interface Parameterizer [[../../../utilities/optionhandling/Parameterizer.html]] {
            +configure(Parameterization): void
            {abstract} +make(): Object
        }
    }

    center footer UMLDoclet 2.0.19, PlantUML 1.2022.8
@enduml
