<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="2351px" preserveAspectRatio="none" style="width:2071px;height:2351px;background:#FFFFFF;" version="1.1" viewBox="0 0 2071 2351" width="2071px" zoomAndPan="magnify"><defs/><g><!--MD5=[873da816c695945d721e1c23f1287242]
cluster elki.projection--><g id="cluster_elki.projection"><path d="M8.5,171 L121.5,171 A3.75,3.75 0 0 1 124,173.5 L131,193.2969 L2061.5,193.2969 A2.5,2.5 0 0 1 2064,195.7969 L2064,2323.5 A2.5,2.5 0 0 1 2061.5,2326 L8.5,2326 A2.5,2.5 0 0 1 6,2323.5 L6,173.5 A2.5,2.5 0 0 1 8.5,171 " fill="none" style="stroke:#000000;stroke-width:1.5;"/><line style="stroke:#000000;stroke-width:1.5;" x1="6" x2="131" y1="193.2969" y2="193.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="112" x="10" y="185.9951">elki.projection</text></g><!--MD5=[160e40e4de9325fe07c8e87e0e7695ed]
cluster elki--><g id="cluster_elki"><path d="M1214.5,6 L1242.5,6 A3.75,3.75 0 0 1 1245,8.5 L1252,28.2969 L1583.5,28.2969 A2.5,2.5 0 0 1 1586,30.7969 L1586,135.5 A2.5,2.5 0 0 1 1583.5,138 L1214.5,138 A2.5,2.5 0 0 1 1212,135.5 L1212,8.5 A2.5,2.5 0 0 1 1214.5,6 " fill="none" style="stroke:#000000;stroke-width:1.5;"/><line style="stroke:#000000;stroke-width:1.5;" x1="1212" x2="1252" y1="28.2969" y2="28.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="27" x="1216" y="20.9951">elki</text></g><!--MD5=[06a3febd9afd7bd2977aad0dcd7215cd]
class elki.projection.TSNE--><a href="TSNE.html" target="_top" title="TSNE.html" xlink:actuate="onRequest" xlink:href="TSNE.html" xlink:show="new" xlink:title="TSNE.html" xlink:type="simple"><g id="elem_elki.projection.TSNE"><rect codeLine="4" fill="#F1F1F1" height="455.4219" id="elki.projection.TSNE" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="637" x="747.5" y="462"/><ellipse cx="1037.25" cy="478" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1040.2188,483.6406 Q1039.6406,483.9375 1039,484.0781 Q1038.3594,484.2344 1037.6563,484.2344 Q1035.1563,484.2344 1033.8281,482.5938 Q1032.5156,480.9375 1032.5156,477.8125 Q1032.5156,474.6875 1033.8281,473.0313 Q1035.1563,471.375 1037.6563,471.375 Q1038.3594,471.375 1039,471.5313 Q1039.6563,471.6875 1040.2188,471.9844 L1040.2188,474.7031 Q1039.5938,474.125 1039,473.8594 Q1038.4063,473.5781 1037.7813,473.5781 Q1036.4375,473.5781 1035.75,474.6563 Q1035.0625,475.7188 1035.0625,477.8125 Q1035.0625,479.9063 1035.75,480.9844 Q1036.4375,482.0469 1037.7813,482.0469 Q1038.4063,482.0469 1039,481.7813 Q1039.5938,481.5 1040.2188,480.9219 L1040.2188,483.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="37" x="1057.75" y="482.8467">TSNE</text><rect fill="#FFFFFF" height="15.9688" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="10" x="1377.5" y="459"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="8" x="1378.5" y="471.1387">O</text><line style="stroke:#181818;stroke-width:0.5;" x1="748.5" x2="1383.5" y1="494" y2="494"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="755.5" y="504.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="93" x="767.5" y="510.9951">LOG: Logging</text><polygon fill="none" points="758.5,518.9453,762.5,522.9453,758.5,526.9453,754.5,522.9453" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="106" x="767.5" y="527.292">MIN_QIJ: double</text><polygon fill="none" points="758.5,535.2422,762.5,539.2422,758.5,543.2422,754.5,539.2422" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="220" x="767.5" y="543.5889">EARLY_EXAGGERATION: double</text><polygon fill="none" points="758.5,551.5391,762.5,555.5391,758.5,559.5391,754.5,555.5391" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="278" x="767.5" y="559.8857">EARLY_EXAGGERATION_ITERATIONS: int</text><polygon fill="none" points="758.5,567.8359,762.5,571.8359,758.5,575.8359,754.5,571.8359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="229" x="767.5" y="576.1826">INITIAL_SOLUTION_SCALE: double</text><polygon fill="none" points="758.5,584.1328,762.5,588.1328,758.5,592.1328,754.5,588.1328" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="122" x="767.5" y="592.4795">MIN_GAIN: double</text><polygon fill="none" points="758.5,600.4297,762.5,604.4297,758.5,608.4297,754.5,604.4297" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="174" x="767.5" y="608.7764">projectedDistances: long</text><polygon fill="none" points="758.5,616.7266,762.5,620.7266,758.5,624.7266,754.5,620.7266" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="51" x="767.5" y="625.0732">dim: int</text><polygon fill="none" points="758.5,633.0234,762.5,637.0234,758.5,641.0234,754.5,637.0234" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="144" x="767.5" y="641.3701">learningRate: double</text><polygon fill="none" points="758.5,649.3203,762.5,653.3203,758.5,657.3203,754.5,653.3203" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="170" x="767.5" y="657.667">initialMomentum: double</text><polygon fill="none" points="758.5,665.6172,762.5,669.6172,758.5,673.6172,754.5,669.6172" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="163" x="767.5" y="673.9639">finalMomentum: double</text><polygon fill="none" points="758.5,681.9141,762.5,685.9141,758.5,689.9141,754.5,685.9141" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="151" x="767.5" y="690.2607">momentumSwitch: int</text><polygon fill="none" points="758.5,698.2109,762.5,702.2109,758.5,706.2109,754.5,702.2109" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="90" x="767.5" y="706.5576">iterations: int</text><polygon fill="none" points="758.5,714.5078,762.5,718.5078,758.5,722.5078,754.5,718.5078" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="170" x="767.5" y="722.8545">random: RandomFactory</text><line style="stroke:#181818;stroke-width:0.5;" x1="748.5" x2="1383.5" y1="730.1563" y2="730.1563"/><ellipse cx="758.5" cy="743.8047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="410" x="767.5" y="747.1514">TSNE(AffinityMatrixBuilder&lt;? super O&gt;, int, RandomFactory)</text><ellipse cx="758.5" cy="760.1016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="611" x="767.5" y="763.4482">TSNE(AffinityMatrixBuilder&lt;? super O&gt;, int, double, double, int, RandomFactory, boolean)</text><ellipse cx="758.5" cy="776.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="306" x="767.5" y="779.7451">getInputTypeRestriction(): TypeInformation[]</text><ellipse cx="758.5" cy="792.6953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="314" x="767.5" y="796.042">autorun(Database): Relation&lt;DoubleVector&gt;</text><ellipse cx="758.5" cy="808.9922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="308" x="767.5" y="812.3389">run(Relation&lt;O&gt;): Relation&lt;DoubleVector&gt;</text><polygon fill="#FFFF44" points="758.5,820.2891,762.5,824.2891,758.5,828.2891,754.5,824.2891" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="328" x="767.5" y="828.6357">randomInitialSolution(int, int, Random): double[]</text><polygon fill="#FFFF44" points="758.5,836.5859,762.5,840.5859,758.5,844.5859,754.5,840.5859" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="289" x="767.5" y="844.9326">optimizetSNE(AffinityMatrix, double[]): void</text><polygon fill="#FFFF44" points="758.5,852.8828,762.5,856.8828,758.5,860.8828,754.5,856.8828" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="270" x="767.5" y="861.2295">computeQij(double[], double[]): double</text><polygon fill="#FFFF44" points="758.5,869.1797,762.5,873.1797,758.5,877.1797,754.5,873.1797" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="235" x="767.5" y="877.5264">sqDist(double[], double[]): double</text><polygon fill="#FFFF44" points="758.5,885.4766,762.5,889.4766,758.5,893.4766,754.5,889.4766" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="506" x="767.5" y="893.8232">computeGradient(AffinityMatrix, double[], double, double[], double[]): void</text><polygon fill="#FFFF44" points="758.5,901.7734,762.5,905.7734,758.5,909.7734,754.5,905.7734" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="301" x="767.5" y="910.1201">updateSolution(double[], double[], int): void</text></g></a><!--MD5=[13a7e6fceef7fc456b4b7c76e75ec01e]
class elki.projection.SparseAffinityMatrix--><a href="SparseAffinityMatrix.html" target="_top" title="SparseAffinityMatrix.html" xlink:actuate="onRequest" xlink:href="SparseAffinityMatrix.html" xlink:show="new" xlink:title="SparseAffinityMatrix.html" xlink:type="simple"><g id="elem_elki.projection.SparseAffinityMatrix"><rect codeLine="50" fill="#F1F1F1" height="259.8594" id="elki.projection.SparseAffinityMatrix" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="346" x="22" y="559.5"/><ellipse cx="124.75" cy="575.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M127.7188,581.1406 Q127.1406,581.4375 126.5,581.5781 Q125.8594,581.7344 125.1563,581.7344 Q122.6563,581.7344 121.3281,580.0938 Q120.0156,578.4375 120.0156,575.3125 Q120.0156,572.1875 121.3281,570.5313 Q122.6563,568.875 125.1563,568.875 Q125.8594,568.875 126.5,569.0313 Q127.1563,569.1875 127.7188,569.4844 L127.7188,572.2031 Q127.0938,571.625 126.5,571.3594 Q125.9063,571.0781 125.2813,571.0781 Q123.9375,571.0781 123.25,572.1563 Q122.5625,573.2188 122.5625,575.3125 Q122.5625,577.4063 123.25,578.4844 Q123.9375,579.5469 125.2813,579.5469 Q125.9063,579.5469 126.5,579.2813 Q127.0938,579 127.7188,578.4219 L127.7188,581.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="145.25" y="580.3467">SparseAffinityMatrix</text><line style="stroke:#181818;stroke-width:0.5;" x1="23" x2="367" y1="591.5" y2="591.5"/><polygon fill="none" points="33,601.1484,29,607.1484,37,607.1484" style="stroke:#1963A0;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="42" y="608.4951">pij: double[]</text><polygon fill="none" points="33,617.4453,29,623.4453,37,623.4453" style="stroke:#1963A0;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="85" x="42" y="624.792">indices: int[]</text><polygon fill="none" points="33,633.7422,29,639.7422,37,639.7422" style="stroke:#1963A0;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="106" x="42" y="641.0889">ids: ArrayDBIDs</text><line style="stroke:#181818;stroke-width:0.5;" x1="23" x2="367" y1="648.3906" y2="648.3906"/><ellipse cx="33" cy="662.0391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="320" x="42" y="665.3857">SparseAffinityMatrix(double[], int[], ArrayDBIDs)</text><ellipse cx="33" cy="678.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="42" y="681.6826">get(int, int): double</text><ellipse cx="33" cy="694.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="131" x="42" y="697.9795">scale(double): void</text><ellipse cx="33" cy="710.9297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="64" x="42" y="714.2764">size(): int</text><ellipse cx="33" cy="727.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="175" x="42" y="730.5732">iterDBIDs(): DBIDArrayIter</text><ellipse cx="33" cy="743.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="75" x="42" y="746.8701">iter(int): int</text><ellipse cx="33" cy="759.8203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="159" x="42" y="763.167">iterAdvance(int, int): int</text><ellipse cx="33" cy="776.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="42" y="779.4639">iterDim(int, int): int</text><ellipse cx="33" cy="792.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="169" x="42" y="795.7607">iterValue(int, int): double</text><ellipse cx="33" cy="808.7109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="171" x="42" y="812.0576">iterValid(int, int): boolean</text></g></a><!--MD5=[8806f5e80055bce6964d0df80ed28152]
class elki.projection.DenseAffinityMatrix--><a href="DenseAffinityMatrix.html" target="_top" title="DenseAffinityMatrix.html" xlink:actuate="onRequest" xlink:href="DenseAffinityMatrix.html" xlink:show="new" xlink:title="DenseAffinityMatrix.html" xlink:type="simple"><g id="elem_elki.projection.DenseAffinityMatrix"><rect codeLine="66" fill="#F1F1F1" height="243.5625" id="elki.projection.DenseAffinityMatrix" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="309" x="403.5" y="567.5"/><ellipse cx="488.75" cy="583.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M491.7188,589.1406 Q491.1406,589.4375 490.5,589.5781 Q489.8594,589.7344 489.1563,589.7344 Q486.6563,589.7344 485.3281,588.0938 Q484.0156,586.4375 484.0156,583.3125 Q484.0156,580.1875 485.3281,578.5313 Q486.6563,576.875 489.1563,576.875 Q489.8594,576.875 490.5,577.0313 Q491.1563,577.1875 491.7188,577.4844 L491.7188,580.2031 Q491.0938,579.625 490.5,579.3594 Q489.9063,579.0781 489.2813,579.0781 Q487.9375,579.0781 487.25,580.1563 Q486.5625,581.2188 486.5625,583.3125 Q486.5625,585.4063 487.25,586.4844 Q487.9375,587.5469 489.2813,587.5469 Q489.9063,587.5469 490.5,587.2813 Q491.0938,587 491.7188,586.4219 L491.7188,589.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="130" x="509.25" y="588.3467">DenseAffinityMatrix</text><line style="stroke:#181818;stroke-width:0.5;" x1="404.5" x2="711.5" y1="599.5" y2="599.5"/><polygon fill="none" points="414.5,609.1484,410.5,615.1484,418.5,615.1484" style="stroke:#1963A0;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="423.5" y="616.4951">pij: double[]</text><polygon fill="none" points="414.5,625.4453,410.5,631.4453,418.5,631.4453" style="stroke:#1963A0;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="106" x="423.5" y="632.792">ids: ArrayDBIDs</text><line style="stroke:#181818;stroke-width:0.5;" x1="404.5" x2="711.5" y1="640.0938" y2="640.0938"/><ellipse cx="414.5" cy="653.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="283" x="423.5" y="657.0889">DenseAffinityMatrix(double[], ArrayDBIDs)</text><ellipse cx="414.5" cy="670.0391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="423.5" y="673.3857">get(int, int): double</text><ellipse cx="414.5" cy="686.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="131" x="423.5" y="689.6826">scale(double): void</text><ellipse cx="414.5" cy="702.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="64" x="423.5" y="705.9795">size(): int</text><ellipse cx="414.5" cy="718.9297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="175" x="423.5" y="722.2764">iterDBIDs(): DBIDArrayIter</text><ellipse cx="414.5" cy="735.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="75" x="423.5" y="738.5732">iter(int): int</text><ellipse cx="414.5" cy="751.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="159" x="423.5" y="754.8701">iterAdvance(int, int): int</text><ellipse cx="414.5" cy="767.8203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="423.5" y="771.167">iterDim(int, int): int</text><ellipse cx="414.5" cy="784.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="169" x="423.5" y="787.4639">iterValue(int, int): double</text><ellipse cx="414.5" cy="800.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="171" x="423.5" y="803.7607">iterValid(int, int): boolean</text></g></a><!--MD5=[f490fc2706a304f087d2e6b6a22934c8]
class elki.projection.IntrinsicNearestNeighborAffinityMatrixBuilder--><a href="IntrinsicNearestNeighborAffinityMatrixBuilder.html" target="_top" title="IntrinsicNearestNeighborAffinityMatrixBuilder.html" xlink:actuate="onRequest" xlink:href="IntrinsicNearestNeighborAffinityMatrixBuilder.html" xlink:show="new" xlink:title="IntrinsicNearestNeighborAffinityMatrixBuilder.html" xlink:type="simple"><g id="elem_elki.projection.IntrinsicNearestNeighborAffinityMatrixBuilder"><rect codeLine="81" fill="#F1F1F1" height="145.7813" id="elki.projection.IntrinsicNearestNeighborAffinityMatrixBuilder" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="876" x="1172" y="2164"/><ellipse cx="1448.75" cy="2180" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1451.7188,2185.6406 Q1451.1406,2185.9375 1450.5,2186.0781 Q1449.8594,2186.2344 1449.1563,2186.2344 Q1446.6563,2186.2344 1445.3281,2184.5938 Q1444.0156,2182.9375 1444.0156,2179.8125 Q1444.0156,2176.6875 1445.3281,2175.0313 Q1446.6563,2173.375 1449.1563,2173.375 Q1449.8594,2173.375 1450.5,2173.5313 Q1451.1563,2173.6875 1451.7188,2173.9844 L1451.7188,2176.7031 Q1451.0938,2176.125 1450.5,2175.8594 Q1449.9063,2175.5781 1449.2813,2175.5781 Q1447.9375,2175.5781 1447.25,2176.6563 Q1446.5625,2177.7188 1446.5625,2179.8125 Q1446.5625,2181.9063 1447.25,2182.9844 Q1447.9375,2184.0469 1449.2813,2184.0469 Q1449.9063,2184.0469 1450.5,2183.7813 Q1451.0938,2183.5 1451.7188,2182.9219 L1451.7188,2185.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="302" x="1469.25" y="2184.8467">IntrinsicNearestNeighborAffinityMatrixBuilder</text><rect fill="#FFFFFF" height="15.9688" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="10" x="2041" y="2161"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="8" x="2042" y="2173.1387">O</text><line style="stroke:#181818;stroke-width:0.5;" x1="1173" x2="2047" y1="2196" y2="2196"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1180" y="2206.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="93" x="1192" y="2212.9951">LOG: Logging</text><polygon fill="none" points="1183,2221.9453,1179,2227.9453,1187,2227.9453" style="stroke:#1963A0;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="397" x="1192" y="2229.292">estimator: DistanceBasedIntrinsicDimensionalityEstimator</text><line style="stroke:#181818;stroke-width:0.5;" x1="1173" x2="2047" y1="2236.5938" y2="2236.5938"/><ellipse cx="1183" cy="2250.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="850" x="1192" y="2253.5889">IntrinsicNearestNeighborAffinityMatrixBuilder(Distance&lt;? super O&gt;, double, DistanceBasedIntrinsicDimensionalityEstimator)</text><ellipse cx="1183" cy="2266.5391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="469" x="1192" y="2269.8857">computeAffinityMatrix(Relation&lt;T extends O&gt;, double): AffinityMatrix</text><polygon fill="#FFFF44" points="1183,2277.8359,1187,2281.8359,1183,2285.8359,1179,2281.8359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="631" x="1192" y="2286.1826">computePij(DBIDRange, KNNSearcher&lt;DBIDRef&gt;, boolean, int, double[], int[], double): void</text><polygon fill="#FFFF44" points="1183,2294.1328,1187,2298.1328,1183,2302.1328,1179,2298.1328" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="669" x="1192" y="2302.4795">convertNeighbors(DBIDRange, DBIDRef, boolean, KNNList, DoubleArray, IntegerArray, Mean): void</text></g></a><!--MD5=[d81ffab2ae64fc97f8f0ad77c87ef180]
class elki.projection.PerplexityAffinityMatrixBuilder--><a href="PerplexityAffinityMatrixBuilder.html" target="_top" title="PerplexityAffinityMatrixBuilder.html" xlink:actuate="onRequest" xlink:href="PerplexityAffinityMatrixBuilder.html" xlink:show="new" xlink:title="PerplexityAffinityMatrixBuilder.html" xlink:type="simple"><g id="elem_elki.projection.PerplexityAffinityMatrixBuilder"><rect codeLine="97" fill="#F1F1F1" height="243.5625" id="elki.projection.PerplexityAffinityMatrixBuilder" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="495" x="1456.5" y="1587"/><ellipse cx="1594.75" cy="1603" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1597.7188,1608.6406 Q1597.1406,1608.9375 1596.5,1609.0781 Q1595.8594,1609.2344 1595.1563,1609.2344 Q1592.6563,1609.2344 1591.3281,1607.5938 Q1590.0156,1605.9375 1590.0156,1602.8125 Q1590.0156,1599.6875 1591.3281,1598.0313 Q1592.6563,1596.375 1595.1563,1596.375 Q1595.8594,1596.375 1596.5,1596.5313 Q1597.1563,1596.6875 1597.7188,1596.9844 L1597.7188,1599.7031 Q1597.0938,1599.125 1596.5,1598.8594 Q1595.9063,1598.5781 1595.2813,1598.5781 Q1593.9375,1598.5781 1593.25,1599.6563 Q1592.5625,1600.7188 1592.5625,1602.8125 Q1592.5625,1604.9063 1593.25,1605.9844 Q1593.9375,1607.0469 1595.2813,1607.0469 Q1595.9063,1607.0469 1596.5,1606.7813 Q1597.0938,1606.5 1597.7188,1605.9219 L1597.7188,1608.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="198" x="1615.25" y="1607.8467">PerplexityAffinityMatrixBuilder</text><rect fill="#FFFFFF" height="15.9688" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="10" x="1944.5" y="1584"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="8" x="1945.5" y="1596.1387">O</text><line style="stroke:#181818;stroke-width:0.5;" x1="1457.5" x2="1950.5" y1="1619" y2="1619"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1464.5" y="1629.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="93" x="1476.5" y="1635.9951">LOG: Logging</text><polygon fill="none" points="1467.5,1643.9453,1471.5,1647.9453,1467.5,1651.9453,1463.5,1647.9453" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="199" x="1476.5" y="1652.292">PERPLEXITY_ERROR: double</text><polygon fill="none" points="1467.5,1660.2422,1471.5,1664.2422,1467.5,1668.2422,1463.5,1664.2422" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="181" x="1476.5" y="1668.5889">PERPLEXITY_MAXITER: int</text><polygon fill="none" points="1467.5,1676.5391,1471.5,1680.5391,1467.5,1684.5391,1463.5,1680.5391" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="104" x="1476.5" y="1684.8857">MIN_PIJ: double</text><polygon fill="none" points="1467.5,1692.8359,1471.5,1696.8359,1467.5,1700.8359,1463.5,1696.8359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="219" x="1476.5" y="1701.1826">distance: Distance&lt;? super O&gt;</text><polygon fill="none" points="1467.5,1709.1328,1471.5,1713.1328,1467.5,1717.1328,1463.5,1713.1328" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="123" x="1476.5" y="1717.4795">perplexity: double</text><line style="stroke:#181818;stroke-width:0.5;" x1="1457.5" x2="1950.5" y1="1724.7813" y2="1724.7813"/><ellipse cx="1467.5" cy="1738.4297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="415" x="1476.5" y="1741.7764">PerplexityAffinityMatrixBuilder(Distance&lt;? super O&gt;, double)</text><ellipse cx="1467.5" cy="1754.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="469" x="1476.5" y="1758.0732">computeAffinityMatrix(Relation&lt;T extends O&gt;, double): AffinityMatrix</text><polygon fill="#FFFF44" points="1467.5,1766.0234,1471.5,1770.0234,1467.5,1774.0234,1463.5,1770.0234" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="324" x="1476.5" y="1774.3701">computePij(double[], double, double): double[]</text><polygon fill="#FFFF44" points="1467.5,1782.3203,1471.5,1786.3203,1467.5,1790.3203,1463.5,1786.3203" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="402" x="1476.5" y="1790.667">computePi(int, double[], double[], double, double): double</text><polygon fill="#FFFF44" points="1467.5,1798.6172,1471.5,1802.6172,1467.5,1806.6172,1463.5,1802.6172" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="307" x="1476.5" y="1806.9639">estimateInitialBeta(double[], double): double</text><ellipse cx="1467.5" cy="1819.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="296" x="1476.5" y="1823.2607">getInputTypeRestriction(): TypeInformation</text></g></a><!--MD5=[ce9d530cc2e8783e418e8769f9c78b69]
class elki.projection.AffinityMatrixBuilder--><a href="AffinityMatrixBuilder.html" target="_top" title="AffinityMatrixBuilder.html" xlink:actuate="onRequest" xlink:href="AffinityMatrixBuilder.html" xlink:show="new" xlink:title="AffinityMatrixBuilder.html" xlink:type="simple"><g id="elem_elki.projection.AffinityMatrixBuilder"><rect codeLine="120" fill="#F1F1F1" height="80.5938" id="elki.projection.AffinityMatrixBuilder" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="518" x="1461" y="1075.5"/><ellipse cx="1638.25" cy="1091.5" fill="#B4A7E5" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1634.1719,1087.2656 L1634.1719,1085.1094 L1641.5625,1085.1094 L1641.5625,1087.2656 L1639.0938,1087.2656 L1639.0938,1095.3438 L1641.5625,1095.3438 L1641.5625,1097.5 L1634.1719,1097.5 L1634.1719,1095.3438 L1636.6406,1095.3438 L1636.6406,1087.2656 L1634.1719,1087.2656 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="143" x="1658.75" y="1096.3467">AffinityMatrixBuilder</text><rect fill="#FFFFFF" height="15.9688" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="10" x="1972" y="1072.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="8" x="1973" y="1084.6387">O</text><line style="stroke:#181818;stroke-width:0.5;" x1="1462" x2="1978" y1="1107.5" y2="1107.5"/><line style="stroke:#181818;stroke-width:0.5;" x1="1462" x2="1978" y1="1115.5" y2="1115.5"/><ellipse cx="1472" cy="1129.1484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="492" x="1481" y="1132.4951">computeAffinityMatrix(Relation&lt;T extends O&gt;, double): AffinityMatrix</text><ellipse cx="1472" cy="1145.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="305" x="1481" y="1148.792">getInputTypeRestriction(): TypeInformation</text></g></a><!--MD5=[80edb3338928ea1dc053a546f8623ae9]
class elki.projection.AbstractProjectionAlgorithm--><a href="AbstractProjectionAlgorithm.html" target="_top" title="AbstractProjectionAlgorithm.html" xlink:actuate="onRequest" xlink:href="AbstractProjectionAlgorithm.html" xlink:show="new" xlink:title="AbstractProjectionAlgorithm.html" xlink:type="simple"><g id="elem_elki.projection.AbstractProjectionAlgorithm"><rect codeLine="125" fill="#F1F1F1" height="113.1875" id="elki.projection.AbstractProjectionAlgorithm" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="327" x="1235.5" y="247"/><ellipse cx="1290.25" cy="263" fill="#A9DCDF" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1290.3594,258.3438 L1289.2031,263.4219 L1291.5313,263.4219 L1290.3594,258.3438 Z M1288.875,256.1094 L1291.8594,256.1094 L1295.2188,268.5 L1292.7656,268.5 L1292,265.4375 L1288.7188,265.4375 L1287.9688,268.5 L1285.5313,268.5 L1288.875,256.1094 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="197" x="1310.75" y="267.8467">AbstractProjectionAlgorithm</text><rect fill="#FFFFFF" height="15.9688" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="10" x="1555.5" y="244"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="8" x="1556.5" y="256.1387">R</text><line style="stroke:#181818;stroke-width:0.5;" x1="1236.5" x2="1561.5" y1="279" y2="279"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1243.5" y="289.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="100" x="1255.5" y="295.9951">keep: boolean</text><ellipse cx="1246.5" cy="308.9453" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="126" x="1255.5" y="312.292">KEEP_ID: OptionID</text><line style="stroke:#181818;stroke-width:0.5;" x1="1236.5" x2="1561.5" y1="319.5938" y2="319.5938"/><ellipse cx="1246.5" cy="333.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="257" x="1255.5" y="336.5889">AbstractProjectionAlgorithm(boolean)</text><polygon fill="#FFFF44" points="1246.5,344.5391,1250.5,348.5391,1246.5,352.5391,1242.5,348.5391" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="301" x="1255.5" y="352.8857">removePreviousRelation(Relation&lt;?&gt;): void</text></g></a><!--MD5=[d8b36319d8705e4e747a42eb87018d88]
class elki.projection.BarnesHutTSNE--><a href="BarnesHutTSNE.html" target="_top" title="BarnesHutTSNE.html" xlink:actuate="onRequest" xlink:href="BarnesHutTSNE.html" xlink:show="new" xlink:title="BarnesHutTSNE.html" xlink:type="simple"><g id="elem_elki.projection.BarnesHutTSNE"><rect codeLine="132" fill="#F1F1F1" height="243.5625" id="elki.projection.BarnesHutTSNE" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="766" x="640" y="994"/><ellipse cx="957.75" cy="1010" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M960.7188,1015.6406 Q960.1406,1015.9375 959.5,1016.0781 Q958.8594,1016.2344 958.1563,1016.2344 Q955.6563,1016.2344 954.3281,1014.5938 Q953.0156,1012.9375 953.0156,1009.8125 Q953.0156,1006.6875 954.3281,1005.0313 Q955.6563,1003.375 958.1563,1003.375 Q958.8594,1003.375 959.5,1003.5313 Q960.1563,1003.6875 960.7188,1003.9844 L960.7188,1006.7031 Q960.0938,1006.125 959.5,1005.8594 Q958.9063,1005.5781 958.2813,1005.5781 Q956.9375,1005.5781 956.25,1006.6563 Q955.5625,1007.7188 955.5625,1009.8125 Q955.5625,1011.9063 956.25,1012.9844 Q956.9375,1014.0469 958.2813,1014.0469 Q958.9063,1014.0469 959.5,1013.7813 Q960.0938,1013.5 960.7188,1012.9219 L960.7188,1015.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="110" x="978.25" y="1014.8467">BarnesHutTSNE</text><rect fill="#FFFFFF" height="15.9688" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="10" x="1399" y="991"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="8" x="1400" y="1003.1387">O</text><line style="stroke:#181818;stroke-width:0.5;" x1="641" x2="1405" y1="1026" y2="1026"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="648" y="1036.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="93" x="660" y="1042.9951">LOG: Logging</text><polygon fill="none" points="651,1050.9453,655,1054.9453,651,1058.9453,647,1054.9453" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="199" x="660" y="1059.292">PERPLEXITY_ERROR: double</text><polygon fill="none" points="651,1067.2422,655,1071.2422,651,1075.2422,647,1071.2422" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="181" x="660" y="1075.5889">PERPLEXITY_MAXITER: int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="648" y="1085.5391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="254" x="660" y="1091.8857">QUADTREE_MIN_RESOLUION: double</text><polygon fill="none" points="651,1099.8359,655,1103.8359,651,1107.8359,647,1103.8359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="110" x="660" y="1108.1826">sqtheta: double</text><line style="stroke:#181818;stroke-width:0.5;" x1="641" x2="1405" y1="1115.4844" y2="1115.4844"/><ellipse cx="651" cy="1129.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="740" x="660" y="1132.4795">BarnesHutTSNE(AffinityMatrixBuilder&lt;? super O&gt;, int, double, double, int, RandomFactory, boolean, double)</text><ellipse cx="651" cy="1145.4297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="382" x="660" y="1148.7764">run(Database, Relation&lt;O&gt;): Relation&lt;DoubleVector&gt;</text><polygon fill="#FFFF44" points="651,1156.7266,655,1160.7266,651,1164.7266,647,1160.7266" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="289" x="660" y="1165.0732">optimizetSNE(AffinityMatrix, double[]): void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="648" y="1175.0234"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="384" x="660" y="1181.3701">computeGradient(AffinityMatrix, double[], double[]): void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="648" y="1191.3203"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="436" x="660" y="1197.667">computeAttractiveForces(double[], AffinityMatrix, double[]): void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="648" y="1207.6172"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="469" x="660" y="1213.9639">computeRepulsiveForces(double[], int, double[], QuadTree): double</text><ellipse cx="651" cy="1226.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="306" x="660" y="1230.2607">getInputTypeRestriction(): TypeInformation[]</text></g></a><!--MD5=[b13fd79b255c981e1a5bd2fd58507880]
class elki.projection.BarnesHutTSNE.QuadTree--><a href="BarnesHutTSNE.QuadTree.html" target="_top" title="BarnesHutTSNE.QuadTree.html" xlink:actuate="onRequest" xlink:href="BarnesHutTSNE.QuadTree.html" xlink:show="new" xlink:title="BarnesHutTSNE.QuadTree.html" xlink:type="simple"><g id="elem_elki.projection.BarnesHutTSNE.QuadTree"><rect codeLine="147" fill="#F1F1F1" height="227.2656" id="elki.projection.BarnesHutTSNE.QuadTree" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="708" x="649" y="1299"/><ellipse cx="907.25" cy="1315" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M910.2188,1320.6406 Q909.6406,1320.9375 909,1321.0781 Q908.3594,1321.2344 907.6563,1321.2344 Q905.1563,1321.2344 903.8281,1319.5938 Q902.5156,1317.9375 902.5156,1314.8125 Q902.5156,1311.6875 903.8281,1310.0313 Q905.1563,1308.375 907.6563,1308.375 Q908.3594,1308.375 909,1308.5313 Q909.6563,1308.6875 910.2188,1308.9844 L910.2188,1311.7031 Q909.5938,1311.125 909,1310.8594 Q908.4063,1310.5781 907.7813,1310.5781 Q906.4375,1310.5781 905.75,1311.6563 Q905.0625,1312.7188 905.0625,1314.8125 Q905.0625,1316.9063 905.75,1317.9844 Q906.4375,1319.0469 907.7813,1319.0469 Q908.4063,1319.0469 909,1318.7813 Q909.5938,1318.5 910.2188,1317.9219 L910.2188,1320.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="183" x="927.75" y="1319.8467">BarnesHutTSNE.QuadTree</text><line style="stroke:#181818;stroke-width:0.5;" x1="650" x2="1356" y1="1331" y2="1331"/><ellipse cx="660" cy="1344.6484" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="669" y="1347.9951">center: double[]</text><ellipse cx="660" cy="1360.9453" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="110" x="669" y="1364.292">points: double[]</text><ellipse cx="660" cy="1377.2422" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="134" x="669" y="1380.5889">squareSize: double</text><ellipse cx="660" cy="1393.5391" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="72" x="669" y="1396.8857">weight: int</text><line style="stroke:#181818;stroke-width:0.5;" x1="650" x2="1356" y1="1404.1875" y2="1404.1875"/><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="657" y="1414.8359"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="371" x="669" y="1421.1826">QuadTree(double[], QuadTree[], double[], int, double)</text><ellipse cx="660" cy="1434.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="204" x="669" y="1437.4795">build(int, double[]): QuadTree</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="657" y="1447.4297"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="254" x="669" y="1453.7764">build(int, double[], int, int): QuadTree</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="657" y="1463.7266"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="682" x="669" y="1470.0732">splitRecursively(double[], int, int, int, int, double[], ArrayList&lt;double[]&gt;, ArrayList&lt;QuadTree&gt;): void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="657" y="1480.0234"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="368" x="669" y="1486.3701">computeCenterofMass(int, double[], int, int): double[]</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="657" y="1496.3203"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="320" x="669" y="1502.667">computeExtend(int, double[], int, int): double[]</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="657" y="1512.6172"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="265" x="669" y="1518.9639">computeSquareSize(double[]): double</text></g></a><!--MD5=[6c603e199990d1347169fa1c3279ce2f]
class elki.projection.NearestNeighborAffinityMatrixBuilder--><a href="NearestNeighborAffinityMatrixBuilder.html" target="_top" title="NearestNeighborAffinityMatrixBuilder.html" xlink:actuate="onRequest" xlink:href="NearestNeighborAffinityMatrixBuilder.html" xlink:show="new" xlink:title="NearestNeighborAffinityMatrixBuilder.html" xlink:type="simple"><g id="elem_elki.projection.NearestNeighborAffinityMatrixBuilder"><rect codeLine="169" fill="#F1F1F1" height="210.9688" id="elki.projection.NearestNeighborAffinityMatrixBuilder" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="657" x="1316.5" y="1892"/><ellipse cx="1510.25" cy="1908" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1513.2188,1913.6406 Q1512.6406,1913.9375 1512,1914.0781 Q1511.3594,1914.2344 1510.6563,1914.2344 Q1508.1563,1914.2344 1506.8281,1912.5938 Q1505.5156,1910.9375 1505.5156,1907.8125 Q1505.5156,1904.6875 1506.8281,1903.0313 Q1508.1563,1901.375 1510.6563,1901.375 Q1511.3594,1901.375 1512,1901.5313 Q1512.6563,1901.6875 1513.2188,1901.9844 L1513.2188,1904.7031 Q1512.5938,1904.125 1512,1903.8594 Q1511.4063,1903.5781 1510.7813,1903.5781 Q1509.4375,1903.5781 1508.75,1904.6563 Q1508.0625,1905.7188 1508.0625,1907.8125 Q1508.0625,1909.9063 1508.75,1910.9844 Q1509.4375,1912.0469 1510.7813,1912.0469 Q1511.4063,1912.0469 1512,1911.7813 Q1512.5938,1911.5 1513.2188,1910.9219 L1513.2188,1913.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="249" x="1530.75" y="1912.8467">NearestNeighborAffinityMatrixBuilder</text><rect fill="#FFFFFF" height="15.9688" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="10" x="1966.5" y="1889"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="8" x="1967.5" y="1901.1387">O</text><line style="stroke:#181818;stroke-width:0.5;" x1="1317.5" x2="1972.5" y1="1924" y2="1924"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1324.5" y="1934.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="93" x="1336.5" y="1940.9951">LOG: Logging</text><polygon fill="none" points="1327.5,1948.9453,1331.5,1952.9453,1327.5,1956.9453,1323.5,1952.9453" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="175" x="1336.5" y="1957.292">numberOfNeighbours: int</text><line style="stroke:#181818;stroke-width:0.5;" x1="1317.5" x2="1972.5" y1="1964.5938" y2="1964.5938"/><ellipse cx="1327.5" cy="1978.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="466" x="1336.5" y="1981.5889">NearestNeighborAffinityMatrixBuilder(Distance&lt;? super O&gt;, double)</text><ellipse cx="1327.5" cy="1994.5391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="491" x="1336.5" y="1997.8857">NearestNeighborAffinityMatrixBuilder(Distance&lt;? super O&gt;, double, int)</text><ellipse cx="1327.5" cy="2010.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="469" x="1336.5" y="2014.1826">computeAffinityMatrix(Relation&lt;T extends O&gt;, double): AffinityMatrix</text><polygon fill="#FFFF44" points="1327.5,2022.1328,1331.5,2026.1328,1327.5,2030.1328,1323.5,2026.1328" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="631" x="1336.5" y="2030.4795">computePij(DBIDRange, KNNSearcher&lt;DBIDRef&gt;, boolean, int, double[], int[], double): void</text><polygon fill="#FFFF44" points="1327.5,2038.4297,1331.5,2042.4297,1327.5,2046.4297,1323.5,2042.4297" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="623" x="1336.5" y="2046.7764">convertNeighbors(DBIDRange, DBIDRef, boolean, KNNList, DoubleArray, IntegerArray): void</text><polygon fill="#FFFF44" points="1327.5,2054.7266,1331.5,2058.7266,1327.5,2062.7266,1323.5,2058.7266" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="458" x="1336.5" y="2063.0732">computeSigma(int, DoubleArray, double, double, double[]): double</text><polygon fill="#FFFF44" points="1327.5,2071.0234,1331.5,2075.0234,1327.5,2079.0234,1323.5,2075.0234" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="345" x="1336.5" y="2079.3701">computeH(DoubleArray, double[], double): double</text><polygon fill="#FFFF44" points="1327.5,2087.3203,1331.5,2091.3203,1327.5,2095.3203,1323.5,2091.3203" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="184" x="1336.5" y="2095.667">containsIndex(int[], int): int</text></g></a><!--MD5=[2f20c200ec62434a1c050405e38a277e]
class elki.projection.SNE--><a href="SNE.html" target="_top" title="SNE.html" xlink:actuate="onRequest" xlink:href="SNE.html" xlink:show="new" xlink:title="SNE.html" xlink:type="simple"><g id="elem_elki.projection.SNE"><rect codeLine="186" fill="#F1F1F1" height="422.8281" id="elki.projection.SNE" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="628" x="1420" y="478"/><ellipse cx="1709.75" cy="494" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1712.7188,499.6406 Q1712.1406,499.9375 1711.5,500.0781 Q1710.8594,500.2344 1710.1563,500.2344 Q1707.6563,500.2344 1706.3281,498.5938 Q1705.0156,496.9375 1705.0156,493.8125 Q1705.0156,490.6875 1706.3281,489.0313 Q1707.6563,487.375 1710.1563,487.375 Q1710.8594,487.375 1711.5,487.5313 Q1712.1563,487.6875 1712.7188,487.9844 L1712.7188,490.7031 Q1712.0938,490.125 1711.5,489.8594 Q1710.9063,489.5781 1710.2813,489.5781 Q1708.9375,489.5781 1708.25,490.6563 Q1707.5625,491.7188 1707.5625,493.8125 Q1707.5625,495.9063 1708.25,496.9844 Q1708.9375,498.0469 1710.2813,498.0469 Q1710.9063,498.0469 1711.5,497.7813 Q1712.0938,497.5 1712.7188,496.9219 L1712.7188,499.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="28" x="1730.25" y="498.8467">SNE</text><rect fill="#FFFFFF" height="15.9688" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="10" x="2041" y="475"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="8" x="2042" y="487.1387">O</text><line style="stroke:#181818;stroke-width:0.5;" x1="1421" x2="2047" y1="510" y2="510"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1428" y="520.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="93" x="1440" y="526.9951">LOG: Logging</text><polygon fill="none" points="1431,534.9453,1435,538.9453,1431,542.9453,1427,538.9453" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="106" x="1440" y="543.292">MIN_QIJ: double</text><polygon fill="none" points="1431,551.2422,1435,555.2422,1431,559.2422,1427,555.2422" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="229" x="1440" y="559.5889">INITIAL_SOLUTION_SCALE: double</text><polygon fill="none" points="1431,567.5391,1435,571.5391,1431,575.5391,1427,571.5391" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="122" x="1440" y="575.8857">MIN_GAIN: double</text><polygon fill="none" points="1431,583.8359,1435,587.8359,1431,591.8359,1427,587.8359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="174" x="1440" y="592.1826">projectedDistances: long</text><polygon fill="none" points="1431,600.1328,1435,604.1328,1431,608.1328,1427,604.1328" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="51" x="1440" y="608.4795">dim: int</text><polygon fill="none" points="1431,616.4297,1435,620.4297,1431,624.4297,1427,620.4297" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="144" x="1440" y="624.7764">learningRate: double</text><polygon fill="none" points="1431,632.7266,1435,636.7266,1431,640.7266,1427,636.7266" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="170" x="1440" y="641.0732">initialMomentum: double</text><polygon fill="none" points="1431,649.0234,1435,653.0234,1431,657.0234,1427,653.0234" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="163" x="1440" y="657.3701">finalMomentum: double</text><polygon fill="none" points="1431,665.3203,1435,669.3203,1431,673.3203,1427,669.3203" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="151" x="1440" y="673.667">momentumSwitch: int</text><polygon fill="none" points="1431,681.6172,1435,685.6172,1431,689.6172,1427,685.6172" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="90" x="1440" y="689.9639">iterations: int</text><polygon fill="none" points="1431,697.9141,1435,701.9141,1431,705.9141,1427,701.9141" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="170" x="1440" y="706.2607">random: RandomFactory</text><line style="stroke:#181818;stroke-width:0.5;" x1="1421" x2="2047" y1="713.5625" y2="713.5625"/><ellipse cx="1431" cy="727.2109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="401" x="1440" y="730.5576">SNE(AffinityMatrixBuilder&lt;? super O&gt;, int, RandomFactory)</text><ellipse cx="1431" cy="743.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="602" x="1440" y="746.8545">SNE(AffinityMatrixBuilder&lt;? super O&gt;, int, double, double, int, RandomFactory, boolean)</text><ellipse cx="1431" cy="759.8047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="306" x="1440" y="763.1514">getInputTypeRestriction(): TypeInformation[]</text><ellipse cx="1431" cy="776.1016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="314" x="1440" y="779.4482">autorun(Database): Relation&lt;DoubleVector&gt;</text><ellipse cx="1431" cy="792.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="308" x="1440" y="795.7451">run(Relation&lt;O&gt;): Relation&lt;DoubleVector&gt;</text><polygon fill="#FFFF44" points="1431,803.6953,1435,807.6953,1431,811.6953,1427,807.6953" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="328" x="1440" y="812.042">randomInitialSolution(int, int, Random): double[]</text><polygon fill="#FFFF44" points="1431,819.9922,1435,823.9922,1431,827.9922,1427,823.9922" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="284" x="1440" y="828.3389">optimizeSNE(AffinityMatrix, double[]): void</text><polygon fill="#FFFF44" points="1431,836.2891,1435,840.2891,1431,844.2891,1427,840.2891" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="270" x="1440" y="844.6357">computeQij(double[], double[]): double</text><polygon fill="#FFFF44" points="1431,852.5859,1435,856.5859,1431,860.5859,1427,856.5859" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="235" x="1440" y="860.9326">sqDist(double[], double[]): double</text><polygon fill="#FFFF44" points="1431,868.8828,1435,872.8828,1431,876.8828,1427,872.8828" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="506" x="1440" y="877.2295">computeGradient(AffinityMatrix, double[], double, double[], double[]): void</text><polygon fill="#FFFF44" points="1431,885.1797,1435,889.1797,1431,893.1797,1427,889.1797" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="301" x="1440" y="893.5264">updateSolution(double[], double[], int): void</text></g></a><!--MD5=[93bf7a0810b9738b30d6557c7d40d912]
class elki.projection.GaussianAffinityMatrixBuilder--><a href="GaussianAffinityMatrixBuilder.html" target="_top" title="GaussianAffinityMatrixBuilder.html" xlink:actuate="onRequest" xlink:href="GaussianAffinityMatrixBuilder.html" xlink:show="new" xlink:title="GaussianAffinityMatrixBuilder.html" xlink:type="simple"><g id="elem_elki.projection.GaussianAffinityMatrixBuilder"><rect codeLine="230" fill="#F1F1F1" height="210.9688" id="elki.projection.GaussianAffinityMatrixBuilder" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="495" x="1472.5" y="1307"/><ellipse cx="1611.75" cy="1323" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1614.7188,1328.6406 Q1614.1406,1328.9375 1613.5,1329.0781 Q1612.8594,1329.2344 1612.1563,1329.2344 Q1609.6563,1329.2344 1608.3281,1327.5938 Q1607.0156,1325.9375 1607.0156,1322.8125 Q1607.0156,1319.6875 1608.3281,1318.0313 Q1609.6563,1316.375 1612.1563,1316.375 Q1612.8594,1316.375 1613.5,1316.5313 Q1614.1563,1316.6875 1614.7188,1316.9844 L1614.7188,1319.7031 Q1614.0938,1319.125 1613.5,1318.8594 Q1612.9063,1318.5781 1612.2813,1318.5781 Q1610.9375,1318.5781 1610.25,1319.6563 Q1609.5625,1320.7188 1609.5625,1322.8125 Q1609.5625,1324.9063 1610.25,1325.9844 Q1610.9375,1327.0469 1612.2813,1327.0469 Q1612.9063,1327.0469 1613.5,1326.7813 Q1614.0938,1326.5 1614.7188,1325.9219 L1614.7188,1328.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="196" x="1632.25" y="1327.8467">GaussianAffinityMatrixBuilder</text><rect fill="#FFFFFF" height="15.9688" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="10" x="1960.5" y="1304"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="8" x="1961.5" y="1316.1387">O</text><line style="stroke:#181818;stroke-width:0.5;" x1="1473.5" x2="1966.5" y1="1339" y2="1339"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1480.5" y="1349.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="93" x="1492.5" y="1355.9951">LOG: Logging</text><polygon fill="none" points="1483.5,1363.9453,1487.5,1367.9453,1483.5,1371.9453,1479.5,1367.9453" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="104" x="1492.5" y="1372.292">MIN_PIJ: double</text><polygon fill="none" points="1483.5,1380.2422,1487.5,1384.2422,1483.5,1388.2422,1479.5,1384.2422" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="219" x="1492.5" y="1388.5889">distance: Distance&lt;? super O&gt;</text><polygon fill="none" points="1483.5,1396.5391,1487.5,1400.5391,1483.5,1404.5391,1479.5,1400.5391" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="98" x="1492.5" y="1404.8857">sigma: double</text><line style="stroke:#181818;stroke-width:0.5;" x1="1473.5" x2="1966.5" y1="1412.1875" y2="1412.1875"/><ellipse cx="1483.5" cy="1425.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="413" x="1492.5" y="1429.1826">GaussianAffinityMatrixBuilder(Distance&lt;? super O&gt;, double)</text><ellipse cx="1483.5" cy="1442.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="469" x="1492.5" y="1445.4795">computeAffinityMatrix(Relation&lt;T extends O&gt;, double): AffinityMatrix</text><polygon fill="#FFFF44" points="1483.5,1453.4297,1487.5,1457.4297,1483.5,1461.4297,1479.5,1457.4297" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="429" x="1492.5" y="1461.7764">buildDistanceMatrix(ArrayDBIDs, DistanceQuery&lt;?&gt;): double[]</text><polygon fill="#FFFF44" points="1483.5,1469.7266,1487.5,1473.7266,1483.5,1477.7266,1479.5,1473.7266" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="324" x="1492.5" y="1478.0732">computePij(double[], double, double): double[]</text><polygon fill="#FFFF44" points="1483.5,1486.0234,1487.5,1490.0234,1483.5,1494.0234,1479.5,1490.0234" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="344" x="1492.5" y="1494.3701">computeH(int, double[], double[], double): double</text><ellipse cx="1483.5" cy="1507.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="296" x="1492.5" y="1510.667">getInputTypeRestriction(): TypeInformation</text></g></a><!--MD5=[b2bc000fd34f5af2645cfcaae14161a8]
class elki.projection.AffinityMatrix--><a href="AffinityMatrix.html" target="_top" title="AffinityMatrix.html" xlink:actuate="onRequest" xlink:href="AffinityMatrix.html" xlink:show="new" xlink:title="AffinityMatrix.html" xlink:type="simple"><g id="elem_elki.projection.AffinityMatrix"><rect codeLine="251" fill="#F1F1F1" height="194.6719" id="elki.projection.AffinityMatrix" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="207" x="229.5" y="206"/><ellipse cx="282.25" cy="222" fill="#B4A7E5" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M278.1719,217.7656 L278.1719,215.6094 L285.5625,215.6094 L285.5625,217.7656 L283.0938,217.7656 L283.0938,225.8438 L285.5625,225.8438 L285.5625,228 L278.1719,228 L278.1719,225.8438 L280.6406,225.8438 L280.6406,217.7656 L278.1719,217.7656 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="93" x="302.75" y="226.8467">AffinityMatrix</text><line style="stroke:#181818;stroke-width:0.5;" x1="230.5" x2="435.5" y1="238" y2="238"/><line style="stroke:#181818;stroke-width:0.5;" x1="230.5" x2="435.5" y1="246" y2="246"/><ellipse cx="240.5" cy="259.6484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="135" x="249.5" y="262.9951">scale(double): void</text><ellipse cx="240.5" cy="275.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="64" x="249.5" y="279.292">size(): int</text><ellipse cx="240.5" cy="292.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="135" x="249.5" y="295.5889">get(int, int): double</text><ellipse cx="240.5" cy="308.5391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="78" x="249.5" y="311.8857">iter(int): int</text><ellipse cx="240.5" cy="324.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="133" x="249.5" y="328.1826">iterDim(int, int): int</text><ellipse cx="240.5" cy="341.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="176" x="249.5" y="344.4795">iterValue(int, int): double</text><ellipse cx="240.5" cy="357.4297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="166" x="249.5" y="360.7764">iterAdvance(int, int): int</text><ellipse cx="240.5" cy="373.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="180" x="249.5" y="377.0732">iterValid(int, int): boolean</text><ellipse cx="240.5" cy="390.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="181" x="249.5" y="393.3701">iterDBIDs(): DBIDArrayIter</text></g></a><!--MD5=[6617a5df6c1f5d3bd235afcb3413924f]
class elki.Algorithm--><a href="../Algorithm.html" target="_top" title="../Algorithm.html" xlink:actuate="onRequest" xlink:href="../Algorithm.html" xlink:show="new" xlink:title="../Algorithm.html" xlink:type="simple"><g id="elem_elki.Algorithm"><rect codeLine="303" fill="#F1F1F1" height="80.5938" id="elki.Algorithm" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="341" x="1228.5" y="41"/><ellipse cx="1360.25" cy="57" fill="#B4A7E5" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1356.1719,52.7656 L1356.1719,50.6094 L1363.5625,50.6094 L1363.5625,52.7656 L1361.0938,52.7656 L1361.0938,60.8438 L1363.5625,60.8438 L1363.5625,63 L1356.1719,63 L1356.1719,60.8438 L1358.6406,60.8438 L1358.6406,52.7656 L1356.1719,52.7656 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="69" x="1380.75" y="61.8467">Algorithm</text><line style="stroke:#181818;stroke-width:0.5;" x1="1229.5" x2="1568.5" y1="73" y2="73"/><line style="stroke:#181818;stroke-width:0.5;" x1="1229.5" x2="1568.5" y1="81" y2="81"/><ellipse cx="1239.5" cy="94.6484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="184" x="1248.5" y="97.9951">autorun(Database): Object</text><ellipse cx="1239.5" cy="110.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="315" x="1248.5" y="114.292">getInputTypeRestriction(): TypeInformation[]</text></g></a><!--MD5=[57ead23b881097228c8bedb77256186a]
reverse link elki.projection.AbstractProjectionAlgorithm to elki.projection.TSNE--><g id="link_elki.projection.AbstractProjectionAlgorithm_elki.projection.TSNE"><path codeLine="263" d="M1337.23,375.73 C1315.46,400.84 1289.66,430.58 1262.78,461.58 " fill="none" id="elki.projection.AbstractProjectionAlgorithm-backto-elki.projection.TSNE" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1332.19,370.86,1350.58,360.34,1342.76,380.03,1332.19,370.86" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[5db5506ecc1aa7424618c6a1e603fdeb]
link elki.projection.TSNE to elki.projection.AffinityMatrixBuilder--><g id="link_elki.projection.TSNE_elki.projection.AffinityMatrixBuilder"><path codeLine="264" d="M1384.66,905.08 C1390.82,909.09 1396.94,913.07 1403,917 C1487.55,971.8 1586.15,1032.96 1650.66,1072.61 " fill="none" id="elki.projection.TSNE-to-elki.projection.AffinityMatrixBuilder" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1655.24,1075.43,1649.6639,1067.3117,1650.9793,1072.8135,1645.4775,1074.1289,1655.24,1075.43" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="42" x="1472" y="960.0669">affinity</text></g><!--MD5=[79de71f3b0726ba6963305734580c8b1]
reverse link elki.projection.AffinityMatrix to elki.projection.SparseAffinityMatrix--><g id="link_elki.projection.AffinityMatrix_elki.projection.SparseAffinityMatrix"><path codeLine="268" d="M291.35,420.4 C275.6,464.23 257.58,514.37 241.42,559.34 " fill="none" id="elki.projection.AffinityMatrix-backto-elki.projection.SparseAffinityMatrix" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="none" points="284.83,417.85,298.18,401.4,298,422.59,284.83,417.85" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[25af5d26540ad2264aa3c5d7df86a70d]
reverse link elki.projection.AffinityMatrix to elki.projection.DenseAffinityMatrix--><g id="link_elki.projection.AffinityMatrix_elki.projection.DenseAffinityMatrix"><path codeLine="269" d="M400.04,418.92 C427.43,465.66 459.13,519.77 486.92,567.19 " fill="none" id="elki.projection.AffinityMatrix-backto-elki.projection.DenseAffinityMatrix" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="none" points="393.85,422.19,389.78,401.4,405.93,415.12,393.85,422.19" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[cc130d7c1ecd9cfe7020bc43f3ed394a]
reverse link elki.projection.NearestNeighborAffinityMatrixBuilder to elki.projection.IntrinsicNearestNeighborAffinityMatrixBuilder--><g id="link_elki.projection.NearestNeighborAffinityMatrixBuilder_elki.projection.IntrinsicNearestNeighborAffinityMatrixBuilder"><path codeLine="270" d="M1626.68,2122.84 C1624.61,2136.88 1622.55,2150.81 1620.63,2163.84 " fill="none" id="elki.projection.NearestNeighborAffinityMatrixBuilder-backto-elki.projection.IntrinsicNearestNeighborAffinityMatrixBuilder" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1619.76,2121.78,1629.6,2103.02,1633.61,2123.82,1619.76,2121.78" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[67278cd4e179ca2192cfa54f7088ef86]
reverse link elki.projection.GaussianAffinityMatrixBuilder to elki.projection.PerplexityAffinityMatrixBuilder--><g id="link_elki.projection.GaussianAffinityMatrixBuilder_elki.projection.PerplexityAffinityMatrixBuilder"><path codeLine="273" d="M1713.22,1538.28 C1712.35,1554.36 1711.45,1570.82 1710.58,1586.84 " fill="none" id="elki.projection.GaussianAffinityMatrixBuilder-backto-elki.projection.PerplexityAffinityMatrixBuilder" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1706.24,1537.75,1714.31,1518.16,1720.22,1538.51,1706.24,1537.75" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[830d095106ecce52b5bb59c80a9938f1]
reverse link elki.Algorithm to elki.projection.AbstractProjectionAlgorithm--><g id="link_elki.Algorithm_elki.projection.AbstractProjectionAlgorithm"><path codeLine="276" d="M1399,142.23 C1399,174.77 1399,214.79 1399,246.69 " fill="none" id="elki.Algorithm-backto-elki.projection.AbstractProjectionAlgorithm" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="none" points="1392,142.09,1399,122.09,1406,142.09,1392,142.09" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[b16fef8b175ed5981a1639b038199e30]
reverse link elki.projection.TSNE to elki.projection.BarnesHutTSNE--><g id="link_elki.projection.TSNE_elki.projection.BarnesHutTSNE"><path codeLine="277" d="M1041.02,937.12 C1039.04,956.68 1037.1,975.84 1035.27,993.91 " fill="none" id="elki.projection.TSNE-backto-elki.projection.BarnesHutTSNE" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1034.07,936.24,1043.05,917.04,1048,937.65,1034.07,936.24" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[fd3ece42c145a90876a453586b7fc484]
reverse link elki.projection.BarnesHutTSNE to elki.projection.BarnesHutTSNE.QuadTree--><g id="link_elki.projection.BarnesHutTSNE_elki.projection.BarnesHutTSNE.QuadTree"><path codeLine="278" d="M1013.75,1253.27 C1012.71,1268.56 1011.66,1284.01 1010.64,1298.96 " fill="none" id="elki.projection.BarnesHutTSNE-backto-elki.projection.BarnesHutTSNE.QuadTree" style="stroke:#181818;stroke-width:1.0;"/><ellipse cx="1014.2393" cy="1246.0417" fill="#FFFFFF" rx="8" ry="8" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="1013.6985" x2="1014.78" y1="1254.0234" y2="1238.06"/><line style="stroke:#181818;stroke-width:1.0;" x1="1006.2576" x2="1022.221" y1="1245.501" y2="1246.5824"/></g><!--MD5=[4bee2e85968467d15c031a903e349f9e]
link elki.projection.BarnesHutTSNE.QuadTree to elki.projection.BarnesHutTSNE.QuadTree--><g id="link_elki.projection.BarnesHutTSNE.QuadTree_elki.projection.BarnesHutTSNE.QuadTree"><path codeLine="279" d="M1357.16,1393.69 C1378.92,1398.14 1392,1404.41 1392,1412.5 C1392,1419.95 1380.88,1425.86 1362.1,1430.23 " fill="none" id="elki.projection.BarnesHutTSNE.QuadTree-to-elki.projection.BarnesHutTSNE.QuadTree" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1357.16,1431.31,1366.8079,1433.2893,1362.0439,1430.239,1365.0943,1425.475,1357.16,1431.31" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="50" x="1398" y="1417.0669">children</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="7" x="1365.5427" y="1428.6404">*</text></g><!--MD5=[162d2a2e602503a0bc225ee9dc798d83]
reverse link elki.projection.PerplexityAffinityMatrixBuilder to elki.projection.NearestNeighborAffinityMatrixBuilder--><g id="link_elki.projection.PerplexityAffinityMatrixBuilder_elki.projection.NearestNeighborAffinityMatrixBuilder"><path codeLine="282" d="M1674.95,1851.07 C1672.13,1864.76 1669.31,1878.47 1666.58,1891.71 " fill="none" id="elki.projection.PerplexityAffinityMatrixBuilder-backto-elki.projection.NearestNeighborAffinityMatrixBuilder" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1668.17,1849.26,1679.06,1831.09,1681.89,1852.09,1668.17,1849.26" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[7e8e1919e4e3b8e75b3ac71c2b9edd6f]
reverse link elki.projection.AbstractProjectionAlgorithm to elki.projection.SNE--><g id="link_elki.projection.AbstractProjectionAlgorithm_elki.projection.SNE"><path codeLine="285" d="M1461,375.57 C1486.7,405.02 1517.98,440.88 1550.08,477.68 " fill="none" id="elki.projection.AbstractProjectionAlgorithm-backto-elki.projection.SNE" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1455.58,380.01,1447.71,360.34,1466.13,370.81,1455.58,380.01" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[6d205ce113e227096a1bae4d9fabe23b]
link elki.projection.SNE to elki.projection.AffinityMatrixBuilder--><g id="link_elki.projection.SNE_elki.projection.AffinityMatrixBuilder"><path codeLine="286" d="M1727.05,901.2 C1724.94,965.11 1722.83,1029.22 1721.47,1070.32 " fill="none" id="elki.projection.SNE-to-elki.projection.AffinityMatrixBuilder" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1721.3,1075.47,1725.606,1066.6123,1721.4713,1070.4729,1717.6107,1066.3382,1721.3,1075.47" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="42" x="1726" y="960.0669">affinity</text></g><!--MD5=[482129124b40dd232de62e7705608507]
reverse link elki.projection.AffinityMatrixBuilder to elki.projection.GaussianAffinityMatrixBuilder--><g id="link_elki.projection.AffinityMatrixBuilder_elki.projection.GaussianAffinityMatrixBuilder"><path codeLine="290" d="M1720,1176.95 C1720,1214.3 1720,1263.37 1720,1306.97 " fill="none" id="elki.projection.AffinityMatrixBuilder-backto-elki.projection.GaussianAffinityMatrixBuilder" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="none" points="1713,1176.72,1720,1156.72,1727,1176.72,1713,1176.72" style="stroke:#181818;stroke-width:1.0;"/></g><rect fill="none" height="11.6406" style="stroke:none;stroke-width:1.0;" width="186" x="935.5" y="2332"/><text fill="#888888" font-family="sans-serif" font-size="10" lengthAdjust="spacing" textLength="186" x="935.5" y="2341.2822">UMLDoclet 2.0.19, PlantUML 1.2022.8</text><!--MD5=[4ce1b55512419c26f09d156a0b77e272]
@startuml
    remove .*\.(Instance|Par|Parameterizer|Factory)$
    namespace elki.projection {

        class TSNE<O> [[TSNE.html]] {
            {static} -LOG: Logging
            {static} #MIN_QIJ: double
            {static} #EARLY_EXAGGERATION: double
            {static} #EARLY_EXAGGERATION_ITERATIONS: int
            {static} #INITIAL_SOLUTION_SCALE: double
            {static} #MIN_GAIN: double
            #projectedDistances: long
            #dim: int
            #learningRate: double
            #initialMomentum: double
            #finalMomentum: double
            #momentumSwitch: int
            #iterations: int
            #random: RandomFactory
            +TSNE(AffinityMatrixBuilder<? super O>, int, RandomFactory)
            +TSNE(AffinityMatrixBuilder<? super O>, int, double, double, int, RandomFactory, boolean)
            +getInputTypeRestriction(): TypeInformation[]
            +autorun(Database): Relation<DoubleVector>
            +run(Relation<O>): Relation<DoubleVector>
            {static} #randomInitialSolution(int, int, Random): double[]
            #optimizetSNE(AffinityMatrix, double[]): void
            #computeQij(double[], double[]): double
            #sqDist(double[], double[]): double
            #computeGradient(AffinityMatrix, double[], double, double[], double[]): void
            #updateSolution(double[], double[], int): void
        }

        class elki.projection.TSNE.Par<O> {
            {static} +AFFINITY_ID: OptionID
            {static} +DIM_ID: OptionID
            {static} +MOMENTUM_ID: OptionID
            {static} +LEARNING_RATE_ID: OptionID
            {static} +ITER_ID: OptionID
            {static} +RANDOM_ID: OptionID
            #dim: int
            #learningRate: double
            #finalMomentum: double
            #iterations: int
            #random: RandomFactory
            #keep: boolean
            +configure(Parameterization): void
            #getDefaultAffinity(): Class<?>
            +make(): TSNE<O>
        }

        class SparseAffinityMatrix [[SparseAffinityMatrix.html]] {
            ~pij: double[]
            ~indices: int[]
            ~ids: ArrayDBIDs
            +SparseAffinityMatrix(double[], int[], ArrayDBIDs)
            +get(int, int): double
            +scale(double): void
            +size(): int
            +iterDBIDs(): DBIDArrayIter
            +iter(int): int
            +iterAdvance(int, int): int
            +iterDim(int, int): int
            +iterValue(int, int): double
            +iterValid(int, int): boolean
        }

        class DenseAffinityMatrix [[DenseAffinityMatrix.html]] {
            ~pij: double[]
            ~ids: ArrayDBIDs
            +DenseAffinityMatrix(double[], ArrayDBIDs)
            +get(int, int): double
            +scale(double): void
            +size(): int
            +iterDBIDs(): DBIDArrayIter
            +iter(int): int
            +iterAdvance(int, int): int
            +iterDim(int, int): int
            +iterValue(int, int): double
            +iterValid(int, int): boolean
        }

        class IntrinsicNearestNeighborAffinityMatrixBuilder<O> [[IntrinsicNearestNeighborAffinityMatrixBuilder.html]] {
            {static} -LOG: Logging
            ~estimator: DistanceBasedIntrinsicDimensionalityEstimator
            +IntrinsicNearestNeighborAffinityMatrixBuilder(Distance<? super O>, double, DistanceBasedIntrinsicDimensionalityEstimator)
            +computeAffinityMatrix(Relation<T extends O>, double): AffinityMatrix
            #computePij(DBIDRange, KNNSearcher<DBIDRef>, boolean, int, double[], int[], double): void
            #convertNeighbors(DBIDRange, DBIDRef, boolean, KNNList, DoubleArray, IntegerArray, Mean): void
        }

        class elki.projection.IntrinsicNearestNeighborAffinityMatrixBuilder.Par<O> [[IntrinsicNearestNeighborAffinityMatrixBuilder.Par.html]] {
            {static} +ESTIMATOR_ID: OptionID
            ~estimator: DistanceBasedIntrinsicDimensionalityEstimator
            +configure(Parameterization): void
            +make(): IntrinsicNearestNeighborAffinityMatrixBuilder<O>
        }

        class PerplexityAffinityMatrixBuilder<O> [[PerplexityAffinityMatrixBuilder.html]] {
            {static} -LOG: Logging
            {static} #PERPLEXITY_ERROR: double
            {static} #PERPLEXITY_MAXITER: int
            {static} #MIN_PIJ: double
            #distance: Distance<? super O>
            #perplexity: double
            +PerplexityAffinityMatrixBuilder(Distance<? super O>, double)
            +computeAffinityMatrix(Relation<T extends O>, double): AffinityMatrix
            {static} #computePij(double[], double, double): double[]
            {static} #computePi(int, double[], double[], double, double): double
            {static} #estimateInitialBeta(double[], double): double
            +getInputTypeRestriction(): TypeInformation
        }

        class elki.projection.PerplexityAffinityMatrixBuilder.Par<O> [[PerplexityAffinityMatrixBuilder.Par.html]] {
            {static} +PERPLEXITY_ID: OptionID
            #perplexity: double
            #distance: Distance<? super O>
            +configure(Parameterization): void
            +make(): PerplexityAffinityMatrixBuilder<O>
        }

        interface AffinityMatrixBuilder<O> [[AffinityMatrixBuilder.html]] {
            {abstract} +computeAffinityMatrix(Relation<T extends O>, double): AffinityMatrix
            {abstract} +getInputTypeRestriction(): TypeInformation
        }

        abstract class AbstractProjectionAlgorithm<R> [[AbstractProjectionAlgorithm.html]] {
            -keep: boolean
            {static} +KEEP_ID: OptionID
            +AbstractProjectionAlgorithm(boolean)
            #removePreviousRelation(Relation<?>): void
        }

        class BarnesHutTSNE<O> [[BarnesHutTSNE.html]] {
            {static} -LOG: Logging
            {static} #PERPLEXITY_ERROR: double
            {static} #PERPLEXITY_MAXITER: int
            {static} -QUADTREE_MIN_RESOLUION: double
            #sqtheta: double
            +BarnesHutTSNE(AffinityMatrixBuilder<? super O>, int, double, double, int, RandomFactory, boolean, double)
            +run(Database, Relation<O>): Relation<DoubleVector>
            #optimizetSNE(AffinityMatrix, double[]): void
            -computeGradient(AffinityMatrix, double[], double[]): void
            -computeAttractiveForces(double[], AffinityMatrix, double[]): void
            -computeRepulsiveForces(double[], int, double[], QuadTree): double
            +getInputTypeRestriction(): TypeInformation[]
        }

        class elki.projection.BarnesHutTSNE.QuadTree [[BarnesHutTSNE.QuadTree.html]] {
            +center: double[]
            +points: double[]
            +squareSize: double
            +weight: int
            -QuadTree(double[], QuadTree[], double[], int, double)
            {static} +build(int, double[]): QuadTree
            {static} -build(int, double[], int, int): QuadTree
            {static} -splitRecursively(double[], int, int, int, int, double[], ArrayList<double[]>, ArrayList<QuadTree>): void
            {static} -computeCenterofMass(int, double[], int, int): double[]
            {static} -computeExtend(int, double[], int, int): double[]
            {static} -computeSquareSize(double[]): double
        }

        class elki.projection.BarnesHutTSNE.Par<O> {
            {static} +THETA_ID: OptionID
            +theta: double
            +configure(Parameterization): void
            #getDefaultAffinity(): Class<?>
            +make(): BarnesHutTSNE<O>
        }

        class NearestNeighborAffinityMatrixBuilder<O> [[NearestNeighborAffinityMatrixBuilder.html]] {
            {static} -LOG: Logging
            #numberOfNeighbours: int
            +NearestNeighborAffinityMatrixBuilder(Distance<? super O>, double)
            +NearestNeighborAffinityMatrixBuilder(Distance<? super O>, double, int)
            +computeAffinityMatrix(Relation<T extends O>, double): AffinityMatrix
            #computePij(DBIDRange, KNNSearcher<DBIDRef>, boolean, int, double[], int[], double): void
            #convertNeighbors(DBIDRange, DBIDRef, boolean, KNNList, DoubleArray, IntegerArray): void
            {static} #computeSigma(int, DoubleArray, double, double, double[]): double
            {static} #computeH(DoubleArray, double[], double): double
            {static} #containsIndex(int[], int): int
        }

        class elki.projection.NearestNeighborAffinityMatrixBuilder.Par<O> [[NearestNeighborAffinityMatrixBuilder.Par.html]] {
            +make(): NearestNeighborAffinityMatrixBuilder<O>
        }

        class SNE<O> [[SNE.html]] {
            {static} -LOG: Logging
            {static} #MIN_QIJ: double
            {static} #INITIAL_SOLUTION_SCALE: double
            {static} #MIN_GAIN: double
            #projectedDistances: long
            #dim: int
            #learningRate: double
            #initialMomentum: double
            #finalMomentum: double
            #momentumSwitch: int
            #iterations: int
            #random: RandomFactory
            +SNE(AffinityMatrixBuilder<? super O>, int, RandomFactory)
            +SNE(AffinityMatrixBuilder<? super O>, int, double, double, int, RandomFactory, boolean)
            +getInputTypeRestriction(): TypeInformation[]
            +autorun(Database): Relation<DoubleVector>
            +run(Relation<O>): Relation<DoubleVector>
            {static} #randomInitialSolution(int, int, Random): double[]
            #optimizeSNE(AffinityMatrix, double[]): void
            #computeQij(double[], double[]): double
            #sqDist(double[], double[]): double
            #computeGradient(AffinityMatrix, double[], double, double[], double[]): void
            #updateSolution(double[], double[], int): void
        }

        class elki.projection.SNE.Par<O> {
            {static} +AFFINITY_ID: OptionID
            {static} +DIM_ID: OptionID
            {static} +MOMENTUM_ID: OptionID
            {static} +LEARNING_RATE_ID: OptionID
            {static} +ITER_ID: OptionID
            {static} +RANDOM_ID: OptionID
            #dim: int
            #learningRate: double
            #finalMomentum: double
            #iterations: int
            #random: RandomFactory
            #keep: boolean
            +configure(Parameterization): void
            #getDefaultAffinity(): Class<?>
            +make(): SNE<O>
        }

        class GaussianAffinityMatrixBuilder<O> [[GaussianAffinityMatrixBuilder.html]] {
            {static} -LOG: Logging
            {static} #MIN_PIJ: double
            #distance: Distance<? super O>
            #sigma: double
            +GaussianAffinityMatrixBuilder(Distance<? super O>, double)
            +computeAffinityMatrix(Relation<T extends O>, double): AffinityMatrix
            #buildDistanceMatrix(ArrayDBIDs, DistanceQuery<?>): double[]
            {static} #computePij(double[], double, double): double[]
            {static} #computeH(int, double[], double[], double): double
            +getInputTypeRestriction(): TypeInformation
        }

        class elki.projection.GaussianAffinityMatrixBuilder.Par<O> [[GaussianAffinityMatrixBuilder.Par.html]] {
            {static} +SIGMA_ID: OptionID
            #sigma: double
            #distance: Distance<? super O>
            +configure(Parameterization): void
            +make(): GaussianAffinityMatrixBuilder<O>
        }

        interface AffinityMatrix [[AffinityMatrix.html]] {
            {abstract} +scale(double): void
            {abstract} +size(): int
            {abstract} +get(int, int): double
            {abstract} +iter(int): int
            {abstract} +iterDim(int, int): int
            {abstract} +iterValue(int, int): double
            {abstract} +iterAdvance(int, int): int
            {abstract} +iterValid(int, int): boolean
            {abstract} +iterDBIDs(): DBIDArrayIter
        }

        AbstractProjectionAlgorithm <|- - TSNE
        TSNE - -> AffinityMatrixBuilder: affinity
        elki.utilities.optionhandling.Parameterizer <|.. elki.projection.TSNE.Par
        TSNE +- - elki.projection.TSNE.Par
        elki.projection.TSNE.Par - -> AffinityMatrixBuilder: affinity
        AffinityMatrix <|.. SparseAffinityMatrix
        AffinityMatrix <|.. DenseAffinityMatrix
        NearestNeighborAffinityMatrixBuilder <|- - IntrinsicNearestNeighborAffinityMatrixBuilder
        elki.projection.NearestNeighborAffinityMatrixBuilder.Par <|- - elki.projection.IntrinsicNearestNeighborAffinityMatrixBuilder.Par
        IntrinsicNearestNeighborAffinityMatrixBuilder +- - elki.projection.IntrinsicNearestNeighborAffinityMatrixBuilder.Par
        GaussianAffinityMatrixBuilder <|- - PerplexityAffinityMatrixBuilder
        elki.utilities.optionhandling.Parameterizer <|.. elki.projection.PerplexityAffinityMatrixBuilder.Par
        PerplexityAffinityMatrixBuilder +- - elki.projection.PerplexityAffinityMatrixBuilder.Par
        elki.Algorithm <|.. AbstractProjectionAlgorithm
        TSNE <|- - BarnesHutTSNE
        BarnesHutTSNE +- - elki.projection.BarnesHutTSNE.QuadTree
        elki.projection.BarnesHutTSNE.QuadTree - -> "*" elki.projection.BarnesHutTSNE.QuadTree: children
        elki.projection.TSNE.Par <|- - elki.projection.BarnesHutTSNE.Par
        BarnesHutTSNE +- - elki.projection.BarnesHutTSNE.Par
        PerplexityAffinityMatrixBuilder <|- - NearestNeighborAffinityMatrixBuilder
        elki.projection.PerplexityAffinityMatrixBuilder.Par <|- - elki.projection.NearestNeighborAffinityMatrixBuilder.Par
        NearestNeighborAffinityMatrixBuilder +- - elki.projection.NearestNeighborAffinityMatrixBuilder.Par
        AbstractProjectionAlgorithm <|- - SNE
        SNE - -> AffinityMatrixBuilder: affinity
        elki.utilities.optionhandling.Parameterizer <|.. elki.projection.SNE.Par
        SNE +- - elki.projection.SNE.Par
        elki.projection.SNE.Par - -> AffinityMatrixBuilder: affinity
        AffinityMatrixBuilder <|.. GaussianAffinityMatrixBuilder
        elki.utilities.optionhandling.Parameterizer <|.. elki.projection.GaussianAffinityMatrixBuilder.Par
        GaussianAffinityMatrixBuilder +- - elki.projection.GaussianAffinityMatrixBuilder.Par
    }

    namespace elki.utilities.optionhandling {
        interface Parameterizer [[../utilities/optionhandling/Parameterizer.html]] {
            +configure(Parameterization): void
            {abstract} +make(): Object
        }
    }

    namespace elki {
        interface Algorithm [[../Algorithm.html]] {
            +autorun(Database): Object
            {abstract} +getInputTypeRestriction(): TypeInformation[]
        }
    }

    center footer UMLDoclet 2.0.19, PlantUML 1.2022.8
@enduml

PlantUML version 1.2022.8(Sun Sep 25 11:00:33 CEST 2022)
(APACHE source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: de
Country: DE
--></g></svg>