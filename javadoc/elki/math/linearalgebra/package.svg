<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="3657px" preserveAspectRatio="none" style="width:3549px;height:3657px;background:#FFFFFF;" version="1.1" viewBox="0 0 3549 3657" width="3549px" zoomAndPan="magnify"><defs/><g><!--MD5=[50a097b3bcf91ff46dc9ae11be0dd547]
cluster elki.math.linearalgebra--><g id="cluster_elki.math.linearalgebra"><path d="M8.5,382 L188.5,382 A3.75,3.75 0 0 1 191,384.5 L198,404.2969 L3539.5,404.2969 A2.5,2.5 0 0 1 3542,406.7969 L3542,3629.5 A2.5,2.5 0 0 1 3539.5,3632 L8.5,3632 A2.5,2.5 0 0 1 6,3629.5 L6,384.5 A2.5,2.5 0 0 1 8.5,382 " fill="none" style="stroke:#000000;stroke-width:1.5;"/><line style="stroke:#000000;stroke-width:1.5;" x1="6" x2="198" y1="404.2969" y2="404.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="179" x="10" y="396.9951">elki.math.linearalgebra</text></g><!--MD5=[e23e625bb5c92ed55b9d7cb685855574]
cluster elki.data--><g id="cluster_elki.data"><path d="M8.5,6 L75.5,6 A3.75,3.75 0 0 1 78,8.5 L85,28.2969 L479.5,28.2969 A2.5,2.5 0 0 1 482,30.7969 L482,346.5 A2.5,2.5 0 0 1 479.5,349 L8.5,349 A2.5,2.5 0 0 1 6,346.5 L6,8.5 A2.5,2.5 0 0 1 8.5,6 " fill="none" style="stroke:#000000;stroke-width:1.5;"/><line style="stroke:#000000;stroke-width:1.5;" x1="6" x2="85" y1="28.2969" y2="28.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="66" x="10" y="20.9951">elki.data</text></g><!--MD5=[0d852700fdad35b7061d461d6907a324]
cluster java.io--><g id="cluster_java.io"><path d="M1242.5,128 L1293.5,128 A3.75,3.75 0 0 1 1296,130.5 L1303,150.2969 L1383.5,150.2969 A2.5,2.5 0 0 1 1386,152.7969 L1386,224.5 A2.5,2.5 0 0 1 1383.5,227 L1242.5,227 A2.5,2.5 0 0 1 1240,224.5 L1240,130.5 A2.5,2.5 0 0 1 1242.5,128 " fill="none" style="stroke:#000000;stroke-width:1.5;"/><line style="stroke:#000000;stroke-width:1.5;" x1="1240" x2="1303" y1="150.2969" y2="150.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="50" x="1244" y="142.9951">java.io</text></g><!--MD5=[1e78ceb742e4fb9f6d8e186f3876a060]
class elki.math.linearalgebra.CholeskyDecomposition--><a href="CholeskyDecomposition.html" target="_top" title="CholeskyDecomposition.html" xlink:actuate="onRequest" xlink:href="CholeskyDecomposition.html" xlink:show="new" xlink:title="CholeskyDecomposition.html" xlink:type="simple"><g id="elem_elki.math.linearalgebra.CholeskyDecomposition"><rect codeLine="4" fill="#F1F1F1" height="227.2656" id="elki.math.linearalgebra.CholeskyDecomposition" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="283" x="2149.5" y="661.5"/><ellipse cx="2202.75" cy="677.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M2205.7188,683.1406 Q2205.1406,683.4375 2204.5,683.5781 Q2203.8594,683.7344 2203.1563,683.7344 Q2200.6563,683.7344 2199.3281,682.0938 Q2198.0156,680.4375 2198.0156,677.3125 Q2198.0156,674.1875 2199.3281,672.5313 Q2200.6563,670.875 2203.1563,670.875 Q2203.8594,670.875 2204.5,671.0313 Q2205.1563,671.1875 2205.7188,671.4844 L2205.7188,674.2031 Q2205.0938,673.625 2204.5,673.3594 Q2203.9063,673.0781 2203.2813,673.0781 Q2201.9375,673.0781 2201.25,674.1563 Q2200.5625,675.2188 2200.5625,677.3125 Q2200.5625,679.4063 2201.25,680.4844 Q2201.9375,681.5469 2203.2813,681.5469 Q2203.9063,681.5469 2204.5,681.2813 Q2205.0938,681 2205.7188,680.4219 L2205.7188,683.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="168" x="2223.25" y="682.3467">CholeskyDecomposition</text><line style="stroke:#181818;stroke-width:0.5;" x1="2150.5" x2="2431.5" y1="693.5" y2="693.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2157.5" y="704.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="74" x="2169.5" y="710.4951">L: double[]</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2157.5" y="720.4453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="102" x="2169.5" y="726.792">isspd: boolean</text><line style="stroke:#181818;stroke-width:0.5;" x1="2150.5" x2="2431.5" y1="734.0938" y2="734.0938"/><ellipse cx="2160.5" cy="747.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="236" x="2169.5" y="751.0889">CholeskyDecomposition(double[])</text><ellipse cx="2160.5" cy="764.0391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="115" x="2169.5" y="767.3857">isSPD(): boolean</text><ellipse cx="2160.5" cy="780.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="2169.5" y="783.6826">getL(): double[]</text><ellipse cx="2160.5" cy="796.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="171" x="2169.5" y="799.9795">solve(double[]): double[]</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2157.5" y="809.9297"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="178" x="2169.5" y="816.2764">solveL(double[]): double[]</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2157.5" y="826.2266"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="257" x="2169.5" y="832.5732">solveLtransposed(double[]): double[]</text><ellipse cx="2160.5" cy="845.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="171" x="2169.5" y="848.8701">solve(double[]): double[]</text><ellipse cx="2160.5" cy="861.8203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="227" x="2169.5" y="865.167">solveLInplace(double[]): double[]</text><ellipse cx="2160.5" cy="878.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="257" x="2169.5" y="881.4639">solveLtransposed(double[]): double[]</text></g></a><!--MD5=[e415086f258dc84da7ca7cd38ea400a5]
class elki.math.linearalgebra.ProjectedCentroid--><a href="ProjectedCentroid.html" target="_top" title="ProjectedCentroid.html" xlink:actuate="onRequest" xlink:href="ProjectedCentroid.html" xlink:show="new" xlink:title="ProjectedCentroid.html" xlink:type="simple"><g id="elem_elki.math.linearalgebra.ProjectedCentroid"><rect codeLine="18" fill="#F1F1F1" height="178.375" id="elki.math.linearalgebra.ProjectedCentroid" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="558" x="22" y="1332.5"/><ellipse cx="234.25" cy="1348.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M237.2188,1354.1406 Q236.6406,1354.4375 236,1354.5781 Q235.3594,1354.7344 234.6563,1354.7344 Q232.1563,1354.7344 230.8281,1353.0938 Q229.5156,1351.4375 229.5156,1348.3125 Q229.5156,1345.1875 230.8281,1343.5313 Q232.1563,1341.875 234.6563,1341.875 Q235.3594,1341.875 236,1342.0313 Q236.6563,1342.1875 237.2188,1342.4844 L237.2188,1345.2031 Q236.5938,1344.625 236,1344.3594 Q235.4063,1344.0781 234.7813,1344.0781 Q233.4375,1344.0781 232.75,1345.1563 Q232.0625,1346.2188 232.0625,1348.3125 Q232.0625,1350.4063 232.75,1351.4844 Q233.4375,1352.5469 234.7813,1352.5469 Q235.4063,1352.5469 236,1352.2813 Q236.5938,1352 237.2188,1351.4219 L237.2188,1354.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="125" x="254.75" y="1353.3467">ProjectedCentroid</text><line style="stroke:#181818;stroke-width:0.5;" x1="23" x2="579" y1="1364.5" y2="1364.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="30" y="1375.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="42" y="1381.4951">dims: long[]</text><line style="stroke:#181818;stroke-width:0.5;" x1="23" x2="579" y1="1388.7969" y2="1388.7969"/><ellipse cx="33" cy="1402.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="200" x="42" y="1405.792">ProjectedCentroid(long[], int)</text><ellipse cx="33" cy="1418.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="128" x="42" y="1422.0889">put(double[]): void</text><ellipse cx="33" cy="1435.0391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="184" x="42" y="1438.3857">put(double[], double): void</text><ellipse cx="33" cy="1451.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="170" x="42" y="1454.6826">put(NumberVector): void</text><ellipse cx="33" cy="1467.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="226" x="42" y="1470.9795">put(NumberVector, double): void</text><ellipse cx="33" cy="1483.9297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="481" x="42" y="1487.2764">make(long[], Relation&lt;? extends NumberVector&gt;): ProjectedCentroid</text><ellipse cx="33" cy="1500.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="532" x="42" y="1503.5732">make(long[], Relation&lt;? extends NumberVector&gt;, DBIDs): ProjectedCentroid</text></g></a><!--MD5=[21f37813ce5d426370fe91debf688dc9]
class elki.math.linearalgebra.LinearEquationSystem--><a href="LinearEquationSystem.html" target="_top" title="LinearEquationSystem.html" xlink:actuate="onRequest" xlink:href="LinearEquationSystem.html" xlink:show="new" xlink:title="LinearEquationSystem.html" xlink:type="simple"><g id="elem_elki.math.linearalgebra.LinearEquationSystem"><rect codeLine="29" fill="#F1F1F1" height="716.1719" id="elki.math.linearalgebra.LinearEquationSystem" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="457" x="2467.5" y="417"/><ellipse cx="2615.25" cy="433" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M2618.2188,438.6406 Q2617.6406,438.9375 2617,439.0781 Q2616.3594,439.2344 2615.6563,439.2344 Q2613.1563,439.2344 2611.8281,437.5938 Q2610.5156,435.9375 2610.5156,432.8125 Q2610.5156,429.6875 2611.8281,428.0313 Q2613.1563,426.375 2615.6563,426.375 Q2616.3594,426.375 2617,426.5313 Q2617.6563,426.6875 2618.2188,426.9844 L2618.2188,429.7031 Q2617.5938,429.125 2617,428.8594 Q2616.4063,428.5781 2615.7813,428.5781 Q2614.4375,428.5781 2613.75,429.6563 Q2613.0625,430.7188 2613.0625,432.8125 Q2613.0625,434.9063 2613.75,435.9844 Q2614.4375,437.0469 2615.7813,437.0469 Q2616.4063,437.0469 2617,436.7813 Q2617.5938,436.5 2618.2188,435.9219 L2618.2188,438.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="153" x="2635.75" y="437.8467">LinearEquationSystem</text><line style="stroke:#181818;stroke-width:0.5;" x1="2468.5" x2="2923.5" y1="449" y2="449"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2475.5" y="459.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="93" x="2487.5" y="465.9951">LOG: Logging</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2475.5" y="475.9453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="102" x="2487.5" y="482.292">DELTA: double</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2475.5" y="492.2422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="185" x="2487.5" y="498.5889">TRIVAL_PIVOT_SEARCH: int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2475.5" y="508.5391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="183" x="2487.5" y="514.8857">TOTAL_PIVOT_SEARCH: int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2475.5" y="524.8359"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="121" x="2487.5" y="531.1826">solvable: boolean</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2475.5" y="541.1328"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="110" x="2487.5" y="547.4795">solved: boolean</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2475.5" y="557.4297"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="56" x="2487.5" y="563.7764">rank: int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2475.5" y="573.7266"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="101" x="2487.5" y="580.0732">coeff: double[]</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2475.5" y="590.0234"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="89" x="2487.5" y="596.3701">rhs: double[]</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2475.5" y="606.3203"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="61" x="2487.5" y="612.667">row: int[]</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2475.5" y="622.6172"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="56" x="2487.5" y="628.9639">col: int[]</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2475.5" y="638.9141"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="90" x="2487.5" y="645.2607">x_0: double[]</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2475.5" y="655.2109"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="76" x="2487.5" y="661.5576">u: double[]</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2475.5" y="671.5078"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="244" x="2487.5" y="677.8545">reducedRowEchelonForm: boolean</text><line style="stroke:#181818;stroke-width:0.5;" x1="2468.5" x2="2923.5" y1="685.1563" y2="685.1563"/><ellipse cx="2478.5" cy="698.8047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="287" x="2487.5" y="702.1514">LinearEquationSystem(double[], double[])</text><ellipse cx="2478.5" cy="715.1016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="357" x="2487.5" y="718.4482">LinearEquationSystem(double[], double[], int[], int[])</text><ellipse cx="2478.5" cy="731.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="178" x="2487.5" y="734.7451">getCoefficents(): double[]</text><ellipse cx="2478.5" cy="747.6953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="129" x="2487.5" y="751.042">getRHS(): double[]</text><ellipse cx="2478.5" cy="763.9922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="191" x="2487.5" y="767.3389">getRowPermutations(): int[]</text><ellipse cx="2478.5" cy="780.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="2487.5" y="783.6357">getColumnPermutations(): int[]</text><ellipse cx="2478.5" cy="796.5859" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="2487.5" y="799.9326">isSolved(): boolean</text><ellipse cx="2478.5" cy="812.8828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="215" x="2487.5" y="816.2295">solveByTotalPivotSearch(): void</text><ellipse cx="2478.5" cy="829.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="219" x="2487.5" y="832.5264">solveByTrivialPivotSearch(): void</text><ellipse cx="2478.5" cy="845.4766" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="143" x="2487.5" y="848.8232">isSolvable(): boolean</text><ellipse cx="2478.5" cy="861.7734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="251" x="2487.5" y="865.1201">equationsToString(String, int): String</text><ellipse cx="2478.5" cy="878.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="337" x="2487.5" y="881.417">equationsToString(String, NumberFormat): String</text><ellipse cx="2478.5" cy="894.3672" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="289" x="2487.5" y="897.7139">equationsToString(NumberFormat): String</text><ellipse cx="2478.5" cy="910.6641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="203" x="2487.5" y="914.0107">equationsToString(int): String</text><ellipse cx="2478.5" cy="926.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="189" x="2487.5" y="930.3076">solutionToString(int): String</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2475.5" y="940.2578"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="243" x="2487.5" y="946.6045">reducedRowEchelonForm(int): void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2475.5" y="956.5547"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="210" x="2487.5" y="962.9014">totalPivotSearch(int, int[]): void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2475.5" y="972.8516"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="240" x="2487.5" y="979.1982">nonZeroPivotSearch(int, int[]): void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2475.5" y="989.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="231" x="2487.5" y="995.4951">permutePivot(int, int, int, int): void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2475.5" y="1005.4453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="165" x="2487.5" y="1011.792">pivotOperation(int): void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2475.5" y="1021.7422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="100" x="2487.5" y="1028.0889">solve(int): void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2475.5" y="1038.0391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="160" x="2487.5" y="1044.3857">isSolvable(int): boolean</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2475.5" y="1054.3359"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="220" x="2487.5" y="1060.6826">maxIntegerDigits(double[]): int[]</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2475.5" y="1070.6328"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="210" x="2487.5" y="1076.9795">maxIntegerDigits(double[]): int</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2475.5" y="1086.9297"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="172" x="2487.5" y="1093.2764">integerDigits(double): int</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2475.5" y="1103.2266"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="431" x="2487.5" y="1109.5732">format(NumberFormat, StringBuilder, double, int): StringBuilder</text><ellipse cx="2478.5" cy="1122.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="129" x="2487.5" y="1125.8701">subspacedim(): int</text></g></a><!--MD5=[8e8549f0c828cd63c478c21eaba9cdf3]
class elki.math.linearalgebra.Centroid--><a href="Centroid.html" target="_top" title="Centroid.html" xlink:actuate="onRequest" xlink:href="Centroid.html" xlink:show="new" xlink:title="Centroid.html" xlink:type="simple"><g id="elem_elki.math.linearalgebra.Centroid"><rect codeLine="73" fill="#F1F1F1" height="259.8594" id="elki.math.linearalgebra.Centroid" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="444" x="22" y="645"/><ellipse cx="210.25" cy="661" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M213.2188,666.6406 Q212.6406,666.9375 212,667.0781 Q211.3594,667.2344 210.6563,667.2344 Q208.1563,667.2344 206.8281,665.5938 Q205.5156,663.9375 205.5156,660.8125 Q205.5156,657.6875 206.8281,656.0313 Q208.1563,654.375 210.6563,654.375 Q211.3594,654.375 212,654.5313 Q212.6563,654.6875 213.2188,654.9844 L213.2188,657.7031 Q212.5938,657.125 212,656.8594 Q211.4063,656.5781 210.7813,656.5781 Q209.4375,656.5781 208.75,657.6563 Q208.0625,658.7188 208.0625,660.8125 Q208.0625,662.9063 208.75,663.9844 Q209.4375,665.0469 210.7813,665.0469 Q211.4063,665.0469 212,664.7813 Q212.5938,664.5 213.2188,663.9219 L213.2188,666.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="59" x="230.75" y="665.8467">Centroid</text><line style="stroke:#181818;stroke-width:0.5;" x1="23" x2="465" y1="677" y2="677"/><polygon fill="none" points="33,685.6484,37,689.6484,33,693.6484,29,689.6484" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="98" x="42" y="693.9951">wsum: double</text><polygon fill="none" points="33,701.9453,37,705.9453,33,709.9453,29,705.9453" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="42" y="710.292">elements: double[]</text><line style="stroke:#181818;stroke-width:0.5;" x1="23" x2="465" y1="717.5938" y2="717.5938"/><ellipse cx="33" cy="731.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="86" x="42" y="734.5889">Centroid(int)</text><ellipse cx="33" cy="747.5391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="128" x="42" y="750.8857">put(double[]): void</text><ellipse cx="33" cy="763.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="184" x="42" y="767.1826">put(double[], double): void</text><ellipse cx="33" cy="780.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="170" x="42" y="783.4795">put(NumberVector): void</text><ellipse cx="33" cy="796.4297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="226" x="42" y="799.7764">put(NumberVector, double): void</text><ellipse cx="33" cy="812.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="170" x="42" y="816.0732">doubleValue(int): double</text><ellipse cx="33" cy="829.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="134" x="42" y="832.3701">longValue(int): long</text><ellipse cx="33" cy="845.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="159" x="42" y="848.667">getDimensionality(): int</text><ellipse cx="33" cy="861.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="125" x="42" y="864.9639">toArray(): double[]</text><ellipse cx="33" cy="877.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="418" x="42" y="881.2607">make(Relation&lt;? extends NumberVector&gt;, DBIDs): Centroid</text><ellipse cx="33" cy="894.2109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="157" x="42" y="897.5576">getArrayRef(): double[]</text></g></a><!--MD5=[ef898c7ffd8cfeca43621137229babdc]
class elki.math.linearalgebra.ConstrainedQuadraticProblemSolver--><a href="ConstrainedQuadraticProblemSolver.html" target="_top" title="ConstrainedQuadraticProblemSolver.html" xlink:actuate="onRequest" xlink:href="ConstrainedQuadraticProblemSolver.html" xlink:show="new" xlink:title="ConstrainedQuadraticProblemSolver.html" xlink:type="simple"><g id="elem_elki.math.linearalgebra.ConstrainedQuadraticProblemSolver"><rect codeLine="89" fill="#F1F1F1" height="292.4531" id="elki.math.linearalgebra.ConstrainedQuadraticProblemSolver" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="987" x="825.5" y="629"/><ellipse cx="1190.25" cy="645" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1193.2188,650.6406 Q1192.6406,650.9375 1192,651.0781 Q1191.3594,651.2344 1190.6563,651.2344 Q1188.1563,651.2344 1186.8281,649.5938 Q1185.5156,647.9375 1185.5156,644.8125 Q1185.5156,641.6875 1186.8281,640.0313 Q1188.1563,638.375 1190.6563,638.375 Q1191.3594,638.375 1192,638.5313 Q1192.6563,638.6875 1193.2188,638.9844 L1193.2188,641.7031 Q1192.5938,641.125 1192,640.8594 Q1191.4063,640.5781 1190.7813,640.5781 Q1189.4375,640.5781 1188.75,641.6563 Q1188.0625,642.7188 1188.0625,644.8125 Q1188.0625,646.9063 1188.75,647.9844 Q1189.4375,649.0469 1190.7813,649.0469 Q1191.4063,649.0469 1192,648.7813 Q1192.5938,648.5 1193.2188,647.9219 L1193.2188,650.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="249" x="1210.75" y="649.8467">ConstrainedQuadraticProblemSolver</text><line style="stroke:#181818;stroke-width:0.5;" x1="826.5" x2="1811.5" y1="661" y2="661"/><line style="stroke:#181818;stroke-width:0.5;" x1="826.5" x2="1811.5" y1="669" y2="669"/><ellipse cx="836.5" cy="682.6484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="276" x="845.5" y="685.9951">ConstrainedQuadraticProblemSolver(int)</text><ellipse cx="836.5" cy="698.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="481" x="845.5" y="702.292">solve(double[], double[], double, double[], double[], double[]): double</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="833.5" y="712.2422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="537" x="845.5" y="718.5889">findLimitedDimensionWithDerivative(double[], double[], double[], double[]): int</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="833.5" y="728.5391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="602" x="845.5" y="734.8857">calculateLinearDerivativeLimits(double[], double[], double[], double[], int, double[]): void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="833.5" y="744.8359"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="636" x="845.5" y="751.1826">computeMaximumPossibleFuncValue(double[], double[], double, double[], double[]): double</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="833.5" y="761.1328"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="961" x="845.5" y="767.4795">evaluateConstrainedQuadraticFunction(double[], double[], double, double[], double[], DimensionState[], boolean, double[], double): double</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="833.5" y="777.4297"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="749" x="845.5" y="783.7764">evaluateConstrainedQuadraticFunction1D(double, double, double, double, double, double[], double): double</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="833.5" y="793.7266"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="923" x="845.5" y="800.0732">startReducedProblem(double[], double[], double, double[], double[], DimensionState[], int, DimensionState, double[], double): double</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="833.5" y="810.0234"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="389" x="845.5" y="816.3701">expandNewSolution(double[], double[], int, double): void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="833.5" y="826.3203"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="265" x="845.5" y="832.667">reduceSolution(double[], int): double[]</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="833.5" y="842.6172"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="712" x="845.5" y="848.9639">reduceConstraints(double[], double[], double[], double[], DimensionState[], DimensionState[], int): void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="833.5" y="858.9141"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="570" x="845.5" y="865.2607">reduceEquation(double[], double[], double, double[], double[], int, double): double</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="833.5" y="875.2109"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="419" x="845.5" y="881.5576">findMaximumWithFunctionValue(double[], double[]): double[]</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="833.5" y="891.5078"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="492" x="845.5" y="897.8545">evaluateQuadraticFormula(double[], double[], double, double[]): double</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="833.5" y="907.8047"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="324" x="845.5" y="914.1514">contains(double[], double[], double[]): boolean</text></g></a><!--MD5=[8ff3762ef8dc19668a92d50f2aae968d]
class elki.math.linearalgebra.ConstrainedQuadraticProblemSolver.DimensionState--><a href="ConstrainedQuadraticProblemSolver.DimensionState.html" target="_top" title="ConstrainedQuadraticProblemSolver.DimensionState.html" xlink:actuate="onRequest" xlink:href="ConstrainedQuadraticProblemSolver.DimensionState.html" xlink:show="new" xlink:title="ConstrainedQuadraticProblemSolver.DimensionState.html" xlink:type="simple"><g id="elem_elki.math.linearalgebra.ConstrainedQuadraticProblemSolver.DimensionState"><rect codeLine="107" fill="#F1F1F1" height="113.1875" id="elki.math.linearalgebra.ConstrainedQuadraticProblemSolver.DimensionState" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="395" x="1005.5" y="2606.5"/><ellipse cx="1020.5" cy="2622.5" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1024.6094,2628.5 L1016.8906,2628.5 L1016.8906,2616.1094 L1024.6094,2616.1094 L1024.6094,2618.2656 L1019.3438,2618.2656 L1019.3438,2620.9375 L1024.1094,2620.9375 L1024.1094,2623.0938 L1019.3438,2623.0938 L1019.3438,2626.3438 L1024.6094,2626.3438 L1024.6094,2628.5 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="363" x="1034.5" y="2627.3467">ConstrainedQuadraticProblemSolver.DimensionState</text><line style="stroke:#181818;stroke-width:0.5;" x1="1006.5" x2="1399.5" y1="2638.5" y2="2638.5"/><ellipse cx="1016.5" cy="2652.1484" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="40" x="1025.5" y="2655.4951">LOLIM</text><ellipse cx="1016.5" cy="2668.4453" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="41" x="1025.5" y="2671.792">UPLIM</text><ellipse cx="1016.5" cy="2684.7422" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="79" x="1025.5" y="2688.0889">UNCONSTR</text><ellipse cx="1016.5" cy="2701.0391" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="59" x="1025.5" y="2704.3857">CONSTR</text><line style="stroke:#181818;stroke-width:0.5;" x1="1006.5" x2="1399.5" y1="2711.6875" y2="2711.6875"/></g></a><!--MD5=[abec90d7900fd9ffd02772d58804ac21]
class elki.math.linearalgebra.ConstrainedQuadraticProblemSolver.ProblemData--><a href="ConstrainedQuadraticProblemSolver.ProblemData.html" target="_top" title="ConstrainedQuadraticProblemSolver.ProblemData.html" xlink:actuate="onRequest" xlink:href="ConstrainedQuadraticProblemSolver.ProblemData.html" xlink:show="new" xlink:title="ConstrainedQuadraticProblemSolver.ProblemData.html" xlink:type="simple"><g id="elem_elki.math.linearalgebra.ConstrainedQuadraticProblemSolver.ProblemData"><rect codeLine="114" fill="#F1F1F1" height="145.7813" id="elki.math.linearalgebra.ConstrainedQuadraticProblemSolver.ProblemData" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="374" x="1173" y="1348.5"/><ellipse cx="1188" cy="1364.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1190.9688,1370.1406 Q1190.3906,1370.4375 1189.75,1370.5781 Q1189.1094,1370.7344 1188.4063,1370.7344 Q1185.9063,1370.7344 1184.5781,1369.0938 Q1183.2656,1367.4375 1183.2656,1364.3125 Q1183.2656,1361.1875 1184.5781,1359.5313 Q1185.9063,1357.875 1188.4063,1357.875 Q1189.1094,1357.875 1189.75,1358.0313 Q1190.4063,1358.1875 1190.9688,1358.4844 L1190.9688,1361.2031 Q1190.3438,1360.625 1189.75,1360.3594 Q1189.1563,1360.0781 1188.5313,1360.0781 Q1187.1875,1360.0781 1186.5,1361.1563 Q1185.8125,1362.2188 1185.8125,1364.3125 Q1185.8125,1366.4063 1186.5,1367.4844 Q1187.1875,1368.5469 1188.5313,1368.5469 Q1189.1563,1368.5469 1189.75,1368.2813 Q1190.3438,1368 1190.9688,1367.4219 L1190.9688,1370.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="342" x="1202" y="1369.3467">ConstrainedQuadraticProblemSolver.ProblemData</text><line style="stroke:#181818;stroke-width:0.5;" x1="1174" x2="1546" y1="1380.5" y2="1380.5"/><polygon fill="none" points="1184,1390.1484,1180,1396.1484,1188,1396.1484" style="stroke:#1963A0;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="75" x="1193" y="1397.4951">a: double[]</text><polygon fill="none" points="1184,1406.4453,1180,1412.4453,1188,1412.4453" style="stroke:#1963A0;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="76" x="1193" y="1413.792">b: double[]</text><polygon fill="none" points="1184,1422.7422,1180,1428.7422,1188,1428.7422" style="stroke:#1963A0;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="106" x="1193" y="1430.0889">result: double[]</text><polygon fill="none" points="1184,1439.0391,1180,1445.0391,1188,1445.0391" style="stroke:#1963A0;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="92" x="1193" y="1446.3857">min: double[]</text><polygon fill="none" points="1184,1455.3359,1180,1461.3359,1188,1461.3359" style="stroke:#1963A0;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="95" x="1193" y="1462.6826">max: double[]</text><line style="stroke:#181818;stroke-width:0.5;" x1="1174" x2="1546" y1="1469.9844" y2="1469.9844"/><ellipse cx="1184" cy="1483.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="116" x="1193" y="1486.9795">ProblemData(int)</text></g></a><!--MD5=[49752fed635783d96d5d4f4c71c1c34b]
class elki.math.linearalgebra.EigenvalueDecomposition--><a href="EigenvalueDecomposition.html" target="_top" title="EigenvalueDecomposition.html" xlink:actuate="onRequest" xlink:href="EigenvalueDecomposition.html" xlink:show="new" xlink:title="EigenvalueDecomposition.html" xlink:type="simple"><g id="elem_elki.math.linearalgebra.EigenvalueDecomposition"><rect codeLine="123" fill="#F1F1F1" height="455.4219" id="elki.math.linearalgebra.EigenvalueDecomposition" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="566" x="2960" y="547.5"/><ellipse cx="3148.75" cy="563.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M3151.7188,569.1406 Q3151.1406,569.4375 3150.5,569.5781 Q3149.8594,569.7344 3149.1563,569.7344 Q3146.6563,569.7344 3145.3281,568.0938 Q3144.0156,566.4375 3144.0156,563.3125 Q3144.0156,560.1875 3145.3281,558.5313 Q3146.6563,556.875 3149.1563,556.875 Q3149.8594,556.875 3150.5,557.0313 Q3151.1563,557.1875 3151.7188,557.4844 L3151.7188,560.2031 Q3151.0938,559.625 3150.5,559.3594 Q3149.9063,559.0781 3149.2813,559.0781 Q3147.9375,559.0781 3147.25,560.1563 Q3146.5625,561.2188 3146.5625,563.3125 Q3146.5625,565.4063 3147.25,566.4844 Q3147.9375,567.5469 3149.2813,567.5469 Q3149.9063,567.5469 3150.5,567.2813 Q3151.0938,567 3151.7188,566.4219 L3151.7188,569.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="180" x="3169.25" y="568.3467">EigenvalueDecomposition</text><line style="stroke:#181818;stroke-width:0.5;" x1="2961" x2="3525" y1="579.5" y2="579.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2968" y="590.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="35" x="2980" y="596.4951">n: int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2968" y="606.4453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="76" x="2980" y="612.792">d: double[]</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2968" y="622.7422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="76" x="2980" y="629.0889">e: double[]</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2968" y="639.0391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="76" x="2980" y="645.3857">V: double[]</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2968" y="655.3359"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="77" x="2980" y="661.6826">H: double[]</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2968" y="671.6328"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="86" x="2980" y="677.9795">ort: double[]</text><line style="stroke:#181818;stroke-width:0.5;" x1="2961" x2="3525" y1="685.2813" y2="685.2813"/><ellipse cx="2971" cy="698.9297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="248" x="2980" y="702.2764">EigenvalueDecomposition(double[])</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2968" y="712.2266"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="84" x="2980" y="718.5732">tred2(): void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2968" y="728.5234"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="277" x="2980" y="734.8701">tred2AccumulateTransformations(): void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2968" y="744.8203"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="73" x="2980" y="751.167">tql2(): void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2968" y="761.1172"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="251" x="2980" y="767.4639">tql2ComputeImplicitShift(int): double</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2968" y="777.4141"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="236" x="2980" y="783.7607">tql2ImplicitQL(int, int, double): void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2968" y="793.7109"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="113" x="2980" y="800.0576">sortEigen(): void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2968" y="810.0078"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="92" x="2980" y="816.3545">orthes(): void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2968" y="826.3047"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="381" x="2980" y="832.6514">cdiv(double, double, double, double, double[], int): void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2968" y="842.6016"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="79" x="2980" y="848.9482">hqr2(): void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2968" y="858.8984"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="307" x="2980" y="865.2451">modifyQP(double[], int, double, double): void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2968" y="875.1953"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="540" x="2980" y="881.542">modifyQR(double[], int, boolean, double, double, double, double, double): void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2968" y="891.4922"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="342" x="2980" y="897.8389">hqr2BacksubstituteReal(int, double, double): void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2968" y="907.7891"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="428" x="2980" y="914.1357">hqr2BacksubstituteComplex(int, double, double, double): void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2968" y="924.0859"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="284" x="2980" y="930.4326">hqr2BackTransformation(int, int, int): void</text><ellipse cx="2971" cy="943.3828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="109" x="2980" y="946.7295">getV(): double[]</text><ellipse cx="2971" cy="959.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="213" x="2980" y="963.0264">getRealEigenvalues(): double[]</text><ellipse cx="2971" cy="975.9766" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="216" x="2980" y="979.3232">getImagEigenvalues(): double[]</text><ellipse cx="2971" cy="992.2734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="111" x="2980" y="995.6201">getD(): double[]</text></g></a><!--MD5=[a2fe41c7b46d3b7c1fa0be0203c1ed0d]
class elki.math.linearalgebra.CovarianceMatrix--><a href="CovarianceMatrix.html" target="_top" title="CovarianceMatrix.html" xlink:actuate="onRequest" xlink:href="CovarianceMatrix.html" xlink:show="new" xlink:title="CovarianceMatrix.html" xlink:type="simple"><g id="elem_elki.math.linearalgebra.CovarianceMatrix"><rect codeLine="151" fill="#F1F1F1" height="390.2344" id="elki.math.linearalgebra.CovarianceMatrix" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="574" x="2004" y="1226.5"/><ellipse cx="2228.75" cy="1242.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M2231.7188,1248.1406 Q2231.1406,1248.4375 2230.5,1248.5781 Q2229.8594,1248.7344 2229.1563,1248.7344 Q2226.6563,1248.7344 2225.3281,1247.0938 Q2224.0156,1245.4375 2224.0156,1242.3125 Q2224.0156,1239.1875 2225.3281,1237.5313 Q2226.6563,1235.875 2229.1563,1235.875 Q2229.8594,1235.875 2230.5,1236.0313 Q2231.1563,1236.1875 2231.7188,1236.4844 L2231.7188,1239.2031 Q2231.0938,1238.625 2230.5,1238.3594 Q2229.9063,1238.0781 2229.2813,1238.0781 Q2227.9375,1238.0781 2227.25,1239.1563 Q2226.5625,1240.2188 2226.5625,1242.3125 Q2226.5625,1244.4063 2227.25,1245.4844 Q2227.9375,1246.5469 2229.2813,1246.5469 Q2229.9063,1246.5469 2230.5,1246.2813 Q2231.0938,1246 2231.7188,1245.4219 L2231.7188,1248.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="116" x="2249.25" y="1247.3467">CovarianceMatrix</text><line style="stroke:#181818;stroke-width:0.5;" x1="2005" x2="2577" y1="1258.5" y2="1258.5"/><ellipse cx="2015" cy="1272.1484" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="229" x="2024" y="1275.4951">ERR_TOO_LITTLE_WEIGHT: String</text><polygon fill="none" points="2015,1284.4453,2011,1290.4453,2019,1290.4453" style="stroke:#1963A0;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="106" x="2024" y="1291.792">mean: double[]</text><polygon fill="none" points="2015,1300.7422,2011,1306.7422,2019,1306.7422" style="stroke:#1963A0;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="2024" y="1308.0889">elements: double[]</text><polygon fill="none" points="2015,1317.0391,2011,1323.0391,2019,1323.0391" style="stroke:#1963A0;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="106" x="2024" y="1324.3857">nmea: double[]</text><polygon fill="none" points="2015,1332.3359,2019,1336.3359,2015,1340.3359,2011,1336.3359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="98" x="2024" y="1340.6826">wsum: double</text><line style="stroke:#181818;stroke-width:0.5;" x1="2005" x2="2577" y1="1347.9844" y2="1347.9844"/><ellipse cx="2015" cy="1361.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="143" x="2024" y="1364.9795">CovarianceMatrix(int)</text><ellipse cx="2015" cy="1377.9297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="159" x="2024" y="1381.2764">getDimensionality(): int</text><ellipse cx="2015" cy="1394.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="128" x="2024" y="1397.5732">put(double[]): void</text><ellipse cx="2015" cy="1410.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="184" x="2024" y="1413.8701">put(double[], double): void</text><ellipse cx="2015" cy="1426.8203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="170" x="2024" y="1430.167">put(NumberVector): void</text><ellipse cx="2015" cy="1443.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="226" x="2024" y="1446.4639">put(NumberVector, double): void</text><ellipse cx="2015" cy="1459.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="138" x="2024" y="1462.7607">getWeight(): double</text><ellipse cx="2015" cy="1475.7109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="183" x="2024" y="1479.0576">getMeanVector(): double[]</text><ellipse cx="2015" cy="1492.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="548" x="2024" y="1495.3545">getMeanVector(Relation&lt;? extends NumberVector&gt;): F extends NumberVector</text><ellipse cx="2015" cy="1508.3047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="206" x="2024" y="1511.6514">makeSampleMatrix(): double[]</text><ellipse cx="2015" cy="1524.6016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="228" x="2024" y="1527.9482">makePopulationMatrix(): double[]</text><ellipse cx="2015" cy="1540.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="238" x="2024" y="1544.2451">destroyToSampleMatrix(): double[]</text><ellipse cx="2015" cy="1557.1953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="260" x="2024" y="1560.542">destroyToPopulationMatrix(): double[]</text><ellipse cx="2015" cy="1573.4922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="83" x="2024" y="1576.8389">reset(): void</text><ellipse cx="2015" cy="1589.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="424" x="2024" y="1593.1357">make(Relation&lt;? extends NumberVector&gt;): CovarianceMatrix</text><ellipse cx="2015" cy="1606.0859" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="475" x="2024" y="1609.4326">make(Relation&lt;? extends NumberVector&gt;, DBIDs): CovarianceMatrix</text></g></a><!--MD5=[f73fd183123c765647937b8128faf0f8]
class elki.math.linearalgebra.QRDecomposition--><a href="QRDecomposition.html" target="_top" title="QRDecomposition.html" xlink:actuate="onRequest" xlink:href="QRDecomposition.html" xlink:show="new" xlink:title="QRDecomposition.html" xlink:type="simple"><g id="elem_elki.math.linearalgebra.QRDecomposition"><rect codeLine="175" fill="#F1F1F1" height="341.3438" id="elki.math.linearalgebra.QRDecomposition" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="289" x="501.5" y="604.5"/><ellipse cx="578.75" cy="620.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M581.7188,626.1406 Q581.1406,626.4375 580.5,626.5781 Q579.8594,626.7344 579.1563,626.7344 Q576.6563,626.7344 575.3281,625.0938 Q574.0156,623.4375 574.0156,620.3125 Q574.0156,617.1875 575.3281,615.5313 Q576.6563,613.875 579.1563,613.875 Q579.8594,613.875 580.5,614.0313 Q581.1563,614.1875 581.7188,614.4844 L581.7188,617.2031 Q581.0938,616.625 580.5,616.3594 Q579.9063,616.0781 579.2813,616.0781 Q577.9375,616.0781 577.25,617.1563 Q576.5625,618.2188 576.5625,620.3125 Q576.5625,622.4063 577.25,623.4844 Q577.9375,624.5469 579.2813,624.5469 Q579.9063,624.5469 580.5,624.2813 Q581.0938,624 581.7188,623.4219 L581.7188,626.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="126" x="599.25" y="625.3467">QRDecomposition</text><line style="stroke:#181818;stroke-width:0.5;" x1="502.5" x2="789.5" y1="636.5" y2="636.5"/><polygon fill="none" points="512.5,645.1484,516.5,649.1484,512.5,653.1484,508.5,649.1484" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="263" x="521.5" y="653.4951">ERR_MATRIX_RANK_DEFICIENT: String</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="509.5" y="663.4453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="151" x="521.5" y="669.792">serialVersionUID: long</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="509.5" y="679.7422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="88" x="521.5" y="686.0889">QR: double[]</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="509.5" y="696.0391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="39" x="521.5" y="702.3857">m: int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="509.5" y="712.3359"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="35" x="521.5" y="718.6826">n: int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="509.5" y="728.6328"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="106" x="521.5" y="734.9795">Rdiag: double[]</text><line style="stroke:#181818;stroke-width:0.5;" x1="502.5" x2="789.5" y1="742.2813" y2="742.2813"/><ellipse cx="512.5" cy="755.9297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="194" x="521.5" y="759.2764">QRDecomposition(double[])</text><ellipse cx="512.5" cy="772.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="244" x="521.5" y="775.5732">QRDecomposition(double[], int, int)</text><ellipse cx="512.5" cy="788.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="144" x="521.5" y="791.8701">isFullRank(): boolean</text><ellipse cx="512.5" cy="804.8203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="114" x="521.5" y="808.167">rank(double): int</text><ellipse cx="512.5" cy="821.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="110" x="521.5" y="824.4639">getH(): double[]</text><ellipse cx="512.5" cy="837.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="110" x="521.5" y="840.7607">getR(): double[]</text><ellipse cx="512.5" cy="853.7109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="111" x="521.5" y="857.0576">getQ(): double[]</text><ellipse cx="512.5" cy="870.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="171" x="521.5" y="873.3545">solve(double[]): double[]</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="509.5" y="883.3047"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="220" x="521.5" y="889.6514">solveInplace(double[]): double[]</text><ellipse cx="512.5" cy="902.6016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="171" x="521.5" y="905.9482">solve(double[]): double[]</text><ellipse cx="512.5" cy="918.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="220" x="521.5" y="922.2451">solveInplace(double[]): double[]</text><ellipse cx="512.5" cy="935.1953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="521.5" y="938.542">inverse(): double[]</text></g></a><!--MD5=[6a4f5003096291d71fa8f9d4bba3926c]
class elki.math.linearalgebra.SingularValueDecomposition--><a href="SingularValueDecomposition.html" target="_top" title="SingularValueDecomposition.html" xlink:actuate="onRequest" xlink:href="SingularValueDecomposition.html" xlink:show="new" xlink:title="SingularValueDecomposition.html" xlink:type="simple"><g id="elem_elki.math.linearalgebra.SingularValueDecomposition"><rect codeLine="196" fill="#F1F1F1" height="357.6406" id="elki.math.linearalgebra.SingularValueDecomposition" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="355" x="2613.5" y="1242.5"/><ellipse cx="2687.75" cy="1258.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M2690.7188,1264.1406 Q2690.1406,1264.4375 2689.5,1264.5781 Q2688.8594,1264.7344 2688.1563,1264.7344 Q2685.6563,1264.7344 2684.3281,1263.0938 Q2683.0156,1261.4375 2683.0156,1258.3125 Q2683.0156,1255.1875 2684.3281,1253.5313 Q2685.6563,1251.875 2688.1563,1251.875 Q2688.8594,1251.875 2689.5,1252.0313 Q2690.1563,1252.1875 2690.7188,1252.4844 L2690.7188,1255.2031 Q2690.0938,1254.625 2689.5,1254.3594 Q2688.9063,1254.0781 2688.2813,1254.0781 Q2686.9375,1254.0781 2686.25,1255.1563 Q2685.5625,1256.2188 2685.5625,1258.3125 Q2685.5625,1260.4063 2686.25,1261.4844 Q2686.9375,1262.5469 2688.2813,1262.5469 Q2688.9063,1262.5469 2689.5,1262.2813 Q2690.0938,1262 2690.7188,1261.4219 L2690.7188,1264.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="198" x="2708.25" y="1263.3467">SingularValueDecomposition</text><line style="stroke:#181818;stroke-width:0.5;" x1="2614.5" x2="2967.5" y1="1274.5" y2="1274.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2621.5" y="1285.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="77" x="2633.5" y="1291.4951">U: double[]</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2621.5" y="1301.4453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="76" x="2633.5" y="1307.792">V: double[]</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2621.5" y="1317.7422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="75" x="2633.5" y="1324.0889">s: double[]</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2621.5" y="1334.0391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="39" x="2633.5" y="1340.3857">m: int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2621.5" y="1350.3359"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="35" x="2633.5" y="1356.6826">n: int</text><line style="stroke:#181818;stroke-width:0.5;" x1="2614.5" x2="2967.5" y1="1363.9844" y2="1363.9844"/><ellipse cx="2624.5" cy="1377.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="266" x="2633.5" y="1380.9795">SingularValueDecomposition(double[])</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2621.5" y="1390.9297"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="162" x="2633.5" y="1397.2764">generateU(int, int): void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2621.5" y="1407.2266"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="227" x="2633.5" y="1413.5732">generateV(int, double[], int): void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2621.5" y="1423.5234"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="266" x="2633.5" y="1429.8701">deflate(double[], int, int, boolean): void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2621.5" y="1439.8203"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="247" x="2633.5" y="1446.167">split(double[], int, int, boolean): void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2621.5" y="1456.1172"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="329" x="2633.5" y="1462.4639">qrStep(double[], int, int, boolean, boolean): void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2621.5" y="1472.4141"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="297" x="2633.5" y="1478.7607">convergence(int, int, boolean, boolean): int</text><ellipse cx="2624.5" cy="1491.7109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="110" x="2633.5" y="1495.0576">getU(): double[]</text><ellipse cx="2624.5" cy="1508.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="109" x="2633.5" y="1511.3545">getV(): double[]</text><ellipse cx="2624.5" cy="1524.3047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="201" x="2633.5" y="1527.6514">getSingularValues(): double[]</text><ellipse cx="2624.5" cy="1540.6016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="109" x="2633.5" y="1543.9482">getS(): double[]</text><ellipse cx="2624.5" cy="1556.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="2633.5" y="1560.2451">norm2(): double</text><ellipse cx="2624.5" cy="1573.1953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="102" x="2633.5" y="1576.542">cond(): double</text><ellipse cx="2624.5" cy="1589.4922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="66" x="2633.5" y="1592.8389">rank(): int</text></g></a><!--MD5=[93cb49c102d2082378127f248552ff1f]
class elki.math.linearalgebra.AffineTransformation--><a href="AffineTransformation.html" target="_top" title="AffineTransformation.html" xlink:actuate="onRequest" xlink:href="AffineTransformation.html" xlink:show="new" xlink:title="AffineTransformation.html" xlink:type="simple"><g id="elem_elki.math.linearalgebra.AffineTransformation"><rect codeLine="218" fill="#F1F1F1" height="422.8281" id="elki.math.linearalgebra.AffineTransformation" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="429" x="3003.5" y="1210"/><ellipse cx="3142.75" cy="1226" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M3145.7188,1231.6406 Q3145.1406,1231.9375 3144.5,1232.0781 Q3143.8594,1232.2344 3143.1563,1232.2344 Q3140.6563,1232.2344 3139.3281,1230.5938 Q3138.0156,1228.9375 3138.0156,1225.8125 Q3138.0156,1222.6875 3139.3281,1221.0313 Q3140.6563,1219.375 3143.1563,1219.375 Q3143.8594,1219.375 3144.5,1219.5313 Q3145.1563,1219.6875 3145.7188,1219.9844 L3145.7188,1222.7031 Q3145.0938,1222.125 3144.5,1221.8594 Q3143.9063,1221.5781 3143.2813,1221.5781 Q3141.9375,1221.5781 3141.25,1222.6563 Q3140.5625,1223.7188 3140.5625,1225.8125 Q3140.5625,1227.9063 3141.25,1228.9844 Q3141.9375,1230.0469 3143.2813,1230.0469 Q3143.9063,1230.0469 3144.5,1229.7813 Q3145.0938,1229.5 3145.7188,1228.9219 L3145.7188,1231.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="142" x="3163.25" y="1230.8467">AffineTransformation</text><line style="stroke:#181818;stroke-width:0.5;" x1="3004.5" x2="3431.5" y1="1242" y2="1242"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3011.5" y="1252.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="51" x="3023.5" y="1258.9951">dim: int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3011.5" y="1268.9453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="102" x="3023.5" y="1275.292">trans: double[]</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3011.5" y="1285.2422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="86" x="3023.5" y="1291.5889">inv: double[]</text><line style="stroke:#181818;stroke-width:0.5;" x1="3004.5" x2="3431.5" y1="1298.8906" y2="1298.8906"/><ellipse cx="3014.5" cy="1312.5391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="169" x="3023.5" y="1315.8857">AffineTransformation(int)</text><ellipse cx="3014.5" cy="1328.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="301" x="3023.5" y="1332.1826">AffineTransformation(int, double[], double[])</text><ellipse cx="3014.5" cy="1345.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="403" x="3023.5" y="1348.4795">reorderAxesTransformation(int, int...): AffineTransformation</text><ellipse cx="3014.5" cy="1361.4297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="159" x="3023.5" y="1364.7764">getDimensionality(): int</text><ellipse cx="3014.5" cy="1377.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="207" x="3023.5" y="1381.0732">addTranslation(double[]): void</text><ellipse cx="3014.5" cy="1394.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="171" x="3023.5" y="1397.3701">addMatrix(double[]): void</text><ellipse cx="3014.5" cy="1410.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="229" x="3023.5" y="1413.667">addRotation(int, int, double): void</text><ellipse cx="3014.5" cy="1426.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="186" x="3023.5" y="1429.9639">addAxisReflection(int): void</text><ellipse cx="3014.5" cy="1442.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="170" x="3023.5" y="1446.2607">addScaling(double): void</text><ellipse cx="3014.5" cy="1459.2109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="204" x="3023.5" y="1462.5576">getTransformation(): double[]</text><ellipse cx="3014.5" cy="1475.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="150" x="3023.5" y="1478.8545">getInverse(): double[]</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3011.5" y="1488.8047"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="146" x="3023.5" y="1495.1514">updateInverse(): void</text><ellipse cx="3014.5" cy="1508.1016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="256" x="3023.5" y="1511.4482">homogeneVector(double[]): double[]</text><ellipse cx="3014.5" cy="1524.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="310" x="3023.5" y="1527.7451">homogeneRelativeVector(double[]): double[]</text><ellipse cx="3014.5" cy="1540.6953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="274" x="3023.5" y="1544.042">unhomogeneVector(double[]): double[]</text><ellipse cx="3014.5" cy="1556.9922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="328" x="3023.5" y="1560.3389">unhomogeneRelativeVector(double[]): double[]</text><ellipse cx="3014.5" cy="1573.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="171" x="3023.5" y="1576.6357">apply(double[]): double[]</text><ellipse cx="3014.5" cy="1589.5859" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="221" x="3023.5" y="1592.9326">applyInverse(double[]): double[]</text><ellipse cx="3014.5" cy="1605.8828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="225" x="3023.5" y="1609.2295">applyRelative(double[]): double[]</text><ellipse cx="3014.5" cy="1622.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="275" x="3023.5" y="1625.5264">applyRelativeInverse(double[]): double[]</text></g></a><!--MD5=[247756ac2f1f04fd90dbfe8bf81655ee]
class elki.math.linearalgebra.VMath--><a href="VMath.html" target="_top" title="VMath.html" xlink:actuate="onRequest" xlink:href="VMath.html" xlink:show="new" xlink:title="VMath.html" xlink:type="simple"><g id="elem_elki.math.linearalgebra.VMath"><rect codeLine="244" fill="#F1F1F1" height="1905.8438" id="elki.math.linearalgebra.VMath" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="506" x="2038" y="1710"/><ellipse cx="2265.25" cy="1726" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M2268.2188,1731.6406 Q2267.6406,1731.9375 2267,1732.0781 Q2266.3594,1732.2344 2265.6563,1732.2344 Q2263.1563,1732.2344 2261.8281,1730.5938 Q2260.5156,1728.9375 2260.5156,1725.8125 Q2260.5156,1722.6875 2261.8281,1721.0313 Q2263.1563,1719.375 2265.6563,1719.375 Q2266.3594,1719.375 2267,1719.5313 Q2267.6563,1719.6875 2268.2188,1719.9844 L2268.2188,1722.7031 Q2267.5938,1722.125 2267,1721.8594 Q2266.4063,1721.5781 2265.7813,1721.5781 Q2264.4375,1721.5781 2263.75,1722.6563 Q2263.0625,1723.7188 2263.0625,1725.8125 Q2263.0625,1727.9063 2263.75,1728.9844 Q2264.4375,1730.0469 2265.7813,1730.0469 Q2266.4063,1730.0469 2267,1729.7813 Q2267.5938,1729.5 2268.2188,1728.9219 L2268.2188,1731.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="43" x="2285.75" y="1730.8467">VMath</text><line style="stroke:#181818;stroke-width:0.5;" x1="2039" x2="2543" y1="1742" y2="1742"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2046" y="1752.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="102" x="2058" y="1758.9951">DELTA: double</text><polygon fill="none" points="2049,1766.9453,2053,1770.9453,2049,1774.9453,2045,1770.9453" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="207" x="2058" y="1775.292">ERR_VEC_DIMENSIONS: String</text><polygon fill="none" points="2049,1783.2422,2053,1787.2422,2049,1791.2422,2045,1787.2422" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="233" x="2058" y="1791.5889">ERR_MATRIX_DIMENSIONS: String</text><polygon fill="none" points="2049,1799.5391,2053,1803.5391,2049,1807.5391,2045,1803.5391" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="214" x="2058" y="1807.8857">ERR_MATRIX_INNERDIM: String</text><polygon fill="none" points="2049,1815.8359,2053,1819.8359,2049,1823.8359,2045,1819.8359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="172" x="2058" y="1824.1826">ERR_DIMENSIONS: String</text><polygon fill="none" points="2049,1832.1328,2053,1836.1328,2049,1840.1328,2045,1836.1328" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="2058" y="1840.4795">ERR_INVALID_RANGE: String</text><polygon fill="none" points="2049,1848.4297,2053,1852.4297,2049,1856.4297,2045,1852.4297" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="235" x="2058" y="1856.7764">ERR_MATRIX_NONSQUARE: String</text><polygon fill="none" points="2049,1864.7266,2053,1868.7266,2049,1872.7266,2045,1868.7266" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="154" x="2058" y="1873.0732">ERR_SINGULAR: String</text><polygon fill="none" points="2049,1881.0234,2053,1885.0234,2049,1889.0234,2045,1885.0234" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="212" x="2058" y="1889.3701">ERR_MATRIX_NOT_SPD: String</text><polygon fill="none" points="2049,1897.3203,2053,1901.3203,2049,1905.3203,2045,1901.3203" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="263" x="2058" y="1905.667">ERR_MATRIX_RANK_DEFICIENT: String</text><line style="stroke:#181818;stroke-width:0.5;" x1="2039" x2="2543" y1="1912.9688" y2="1912.9688"/><ellipse cx="2049" cy="1926.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="190" x="2058" y="1929.9639">unitVector(int, int): double[]</text><ellipse cx="2049" cy="1942.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="168" x="2058" y="1946.2607">copy(double[]): double[]</text><ellipse cx="2049" cy="1959.2109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="205" x="2058" y="1962.5576">transpose(double[]): double[]</text><ellipse cx="2049" cy="1975.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="230" x="2058" y="1978.8545">plus(double[], double[]): double[]</text><ellipse cx="2049" cy="1991.8047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="328" x="2058" y="1995.1514">plusTimes(double[], double[], double): double[]</text><ellipse cx="2049" cy="2008.1016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="324" x="2058" y="2011.4482">timesPlus(double[], double, double[]): double[]</text><ellipse cx="2049" cy="2024.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="422" x="2058" y="2027.7451">timesPlusTimes(double[], double, double[], double): double[]</text><ellipse cx="2049" cy="2040.6953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="276" x="2058" y="2044.042">plusEquals(double[], double[]): double[]</text><ellipse cx="2049" cy="2056.9922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="374" x="2058" y="2060.3389">plusTimesEquals(double[], double[], double): double[]</text><ellipse cx="2049" cy="2073.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="370" x="2058" y="2076.6357">timesPlusEquals(double[], double, double[]): double[]</text><ellipse cx="2049" cy="2089.5859" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="468" x="2058" y="2092.9326">timesPlusTimesEquals(double[], double, double[], double): double[]</text><ellipse cx="2049" cy="2105.8828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="220" x="2058" y="2109.2295">plus(double[], double): double[]</text><ellipse cx="2049" cy="2122.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="266" x="2058" y="2125.5264">plusEquals(double[], double): double[]</text><ellipse cx="2049" cy="2138.4766" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="243" x="2058" y="2141.8232">minus(double[], double[]): double[]</text><ellipse cx="2049" cy="2154.7734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="341" x="2058" y="2158.1201">minusTimes(double[], double[], double): double[]</text><ellipse cx="2049" cy="2171.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="336" x="2058" y="2174.417">timesMinus(double[], double, double[]): double[]</text><ellipse cx="2049" cy="2187.3672" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="434" x="2058" y="2190.7139">timesMinusTimes(double[], double, double[], double): double[]</text><ellipse cx="2049" cy="2203.6641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="289" x="2058" y="2207.0107">minusEquals(double[], double[]): double[]</text><ellipse cx="2049" cy="2219.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="387" x="2058" y="2223.3076">minusTimesEquals(double[], double[], double): double[]</text><ellipse cx="2049" cy="2236.2578" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="382" x="2058" y="2239.6045">timesMinusEquals(double[], double, double[]): double[]</text><ellipse cx="2049" cy="2252.5547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="2058" y="2255.9014">timesMinusTimesEquals(double[], double, double[], double): double[]</text><ellipse cx="2049" cy="2268.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="233" x="2058" y="2272.1982">minus(double[], double): double[]</text><ellipse cx="2049" cy="2285.1484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="279" x="2058" y="2288.4951">minusEquals(double[], double): double[]</text><ellipse cx="2049" cy="2301.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="229" x="2058" y="2304.792">times(double[], double): double[]</text><ellipse cx="2049" cy="2317.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="275" x="2058" y="2321.0889">timesEquals(double[], double): double[]</text><ellipse cx="2049" cy="2334.0391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="362" x="2058" y="2337.3857">overwriteTimes(double[], double[], double): double[]</text><ellipse cx="2049" cy="2350.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="38" x="2058" y="2353.6826">times</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="201" x="2096" y="2353.6826">(double[], double[]): double[]</text><ellipse cx="2049" cy="2366.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="313" x="2058" y="2369.9795">transposeTimes(double[], double[]): double[]</text><ellipse cx="2049" cy="2382.9297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="303" x="2058" y="2386.2764">transposeTimes(double[], double[]): double</text><ellipse cx="2049" cy="2399.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="112" x="2058" y="2402.5732">timesTranspose</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="201" x="2170" y="2402.5732">(double[], double[]): double[]</text><ellipse cx="2049" cy="2415.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="313" x="2058" y="2418.8701">timesTranspose(double[], double[]): double[]</text><ellipse cx="2049" cy="2431.8203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="285" x="2058" y="2435.167">scalarProduct(double[], double[]): double</text><ellipse cx="2049" cy="2448.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="214" x="2058" y="2451.4639">dot(double[], double[]): double</text><ellipse cx="2049" cy="2464.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="155" x="2058" y="2467.7607">sum(double[]): double</text><ellipse cx="2049" cy="2480.7109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="204" x="2058" y="2484.0576">squareSum(double[]): double</text><ellipse cx="2049" cy="2497.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="240" x="2058" y="2500.3545">euclideanLength(double[]): double</text><ellipse cx="2049" cy="2513.3047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="144" x="2058" y="2516.6514">argmax(double[]): int</text><ellipse cx="2049" cy="2529.6016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="194" x="2058" y="2532.9482">argmax(double[], int, int): int</text><ellipse cx="2049" cy="2545.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="141" x="2058" y="2549.2451">argmin(double[]): int</text><ellipse cx="2049" cy="2562.1953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="191" x="2058" y="2565.542">argmin(double[], int, int): int</text><ellipse cx="2049" cy="2578.4922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="202" x="2058" y="2581.8389">normalize(double[]): double[]</text><ellipse cx="2049" cy="2594.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="248" x="2058" y="2598.1357">normalizeEquals(double[]): double[]</text><ellipse cx="2049" cy="2611.0859" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="165" x="2058" y="2614.4326">hashCode(double[]): int</text><ellipse cx="2049" cy="2627.3828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="245" x="2058" y="2630.7295">equals(double[], double[]): boolean</text><ellipse cx="2049" cy="2643.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="138" x="2058" y="2647.0264">clear(double[]): void</text><ellipse cx="2049" cy="2659.9766" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="138" x="2058" y="2663.3232">clear(double[]): void</text><ellipse cx="2049" cy="2676.2734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="240" x="2058" y="2679.6201">rotate90Equals(double[]): double[]</text><ellipse cx="2049" cy="2692.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="160" x="2058" y="2695.917">unitMatrix(int): double[]</text><ellipse cx="2049" cy="2708.8672" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="165" x="2058" y="2712.2139">zeroMatrix(int): double[]</text><ellipse cx="2049" cy="2725.1641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="169" x="2058" y="2728.5107">identity(int, int): double[]</text><ellipse cx="2049" cy="2741.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="2058" y="2744.8076">diagonal(double[]): double[]</text><ellipse cx="2049" cy="2757.7578" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="168" x="2058" y="2761.1045">copy(double[]): double[]</text><ellipse cx="2049" cy="2774.0547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="246" x="2058" y="2777.4014">rowPackedCopy(double[]): double[]</text><ellipse cx="2049" cy="2790.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="272" x="2058" y="2793.6982">columnPackedCopy(double[]): double[]</text><ellipse cx="2049" cy="2806.6484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="298" x="2058" y="2809.9951">getMatrix(double[], int, int, int, int): double[]</text><ellipse cx="2049" cy="2822.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="268" x="2058" y="2826.292">getMatrix(double[], int[], int[]): double[]</text><ellipse cx="2049" cy="2839.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="283" x="2058" y="2842.5889">getMatrix(double[], int[], int, int): double[]</text><ellipse cx="2049" cy="2855.5391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="283" x="2058" y="2858.8857">getMatrix(double[], int, int, int[]): double[]</text><ellipse cx="2049" cy="2871.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="333" x="2058" y="2875.1826">setMatrix(double[], int, int, int, int, double[]): void</text><ellipse cx="2049" cy="2888.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="303" x="2058" y="2891.4795">setMatrix(double[], int[], int[], double[]): void</text><ellipse cx="2049" cy="2904.4297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="318" x="2058" y="2907.7764">setMatrix(double[], int[], int, int, double[]): void</text><ellipse cx="2049" cy="2920.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="318" x="2058" y="2924.0732">setMatrix(double[], int, int, int[], double[]): void</text><ellipse cx="2049" cy="2937.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="213" x="2058" y="2940.3701">getRow(double[], int): double[]</text><ellipse cx="2049" cy="2953.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="248" x="2058" y="2956.667">setRow(double[], int, double[]): void</text><ellipse cx="2049" cy="2969.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="205" x="2058" y="2972.9639">getCol(double[], int): double[]</text><ellipse cx="2049" cy="2985.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="240" x="2058" y="2989.2607">setCol(double[], int, double[]): void</text><ellipse cx="2049" cy="3002.2109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="205" x="2058" y="3005.5576">transpose(double[]): double[]</text><ellipse cx="2049" cy="3018.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="230" x="2058" y="3021.8545">plus(double[], double[]): double[]</text><ellipse cx="2049" cy="3034.8047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="328" x="2058" y="3038.1514">plusTimes(double[], double[], double): double[]</text><ellipse cx="2049" cy="3051.1016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="276" x="2058" y="3054.4482">plusEquals(double[], double[]): double[]</text><ellipse cx="2049" cy="3067.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="374" x="2058" y="3070.7451">plusTimesEquals(double[], double[], double): double[]</text><ellipse cx="2049" cy="3083.6953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="243" x="2058" y="3087.042">minus(double[], double[]): double[]</text><ellipse cx="2049" cy="3099.9922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="341" x="2058" y="3103.3389">minusTimes(double[], double[], double): double[]</text><ellipse cx="2049" cy="3116.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="289" x="2058" y="3119.6357">minusEquals(double[], double[]): double[]</text><ellipse cx="2049" cy="3132.5859" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="387" x="2058" y="3135.9326">minusTimesEquals(double[], double[], double): double[]</text><ellipse cx="2049" cy="3148.8828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="229" x="2058" y="3152.2295">times(double[], double): double[]</text><ellipse cx="2049" cy="3165.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="275" x="2058" y="3168.5264">timesEquals(double[], double): double[]</text><ellipse cx="2049" cy="3181.4766" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="239" x="2058" y="3184.8232">times(double[], double[]): double[]</text><ellipse cx="2049" cy="3197.7734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="239" x="2058" y="3201.1201">times(double[], double[]): double[]</text><ellipse cx="2049" cy="3214.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="313" x="2058" y="3217.417">transposeTimes(double[], double[]): double[]</text><ellipse cx="2049" cy="3230.3672" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="313" x="2058" y="3233.7139">transposeTimes(double[], double[]): double[]</text><ellipse cx="2049" cy="3246.6641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="411" x="2058" y="3250.0107">transposeTimesTimes(double[], double[], double[]): double</text><ellipse cx="2049" cy="3262.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="313" x="2058" y="3266.3076">timesTranspose(double[], double[]): double[]</text><ellipse cx="2049" cy="3279.2578" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="387" x="2058" y="3282.6045">transposeTimesTranspose(double[], double[]): double[]</text><ellipse cx="2049" cy="3295.5547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="439" x="2058" y="3298.9014">transposeDiagonalTimes(double[], double[], double[]): double[]</text><ellipse cx="2049" cy="3311.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="405" x="2058" y="3315.1982">mahalanobisDistance(double[], double[], double[]): double</text><ellipse cx="2049" cy="3328.1484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="218" x="2058" y="3331.4951">getDiagonal(double[]): double[]</text><ellipse cx="2049" cy="3344.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="233" x="2058" y="3347.792">normalizeColumns(double[]): void</text><ellipse cx="2049" cy="3360.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="315" x="2058" y="3364.0889">appendColumns(double[], double[]): double[]</text><ellipse cx="2049" cy="3377.0391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="239" x="2058" y="3380.3857">orthonormalize(double[]): double[]</text><ellipse cx="2049" cy="3393.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="237" x="2058" y="3396.6826">solve(double[], double[]): double[]</text><ellipse cx="2049" cy="3409.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="237" x="2058" y="3412.9795">solve(double[], double[]): double[]</text><ellipse cx="2049" cy="3425.9297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="185" x="2058" y="3429.2764">inverse(double[]): double[]</text><ellipse cx="2049" cy="3442.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="169" x="2058" y="3445.5732">normF(double[]): double</text><ellipse cx="2049" cy="3458.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="165" x="2058" y="3461.8701">hashCode(double[]): int</text><ellipse cx="2049" cy="3474.8203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="245" x="2058" y="3478.167">equals(double[], double[]): boolean</text><ellipse cx="2049" cy="3491.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="347" x="2058" y="3494.4639">almostEquals(double[], double[], double): boolean</text><ellipse cx="2049" cy="3507.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="291" x="2058" y="3510.7607">almostEquals(double[], double[]): boolean</text><ellipse cx="2049" cy="3523.7109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="347" x="2058" y="3527.0576">almostEquals(double[], double[], double): boolean</text><ellipse cx="2049" cy="3540.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="291" x="2058" y="3543.3545">almostEquals(double[], double[]): boolean</text><ellipse cx="2049" cy="3556.3047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="247" x="2058" y="3559.6514">getRowDimensionality(double[]): int</text><ellipse cx="2049" cy="3572.6016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="270" x="2058" y="3575.9482">getColumnDimensionality(double[]): int</text><ellipse cx="2049" cy="3588.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="229" x="2058" y="3592.2451">angle(double[], double[]): double</text><ellipse cx="2049" cy="3605.1953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="295" x="2058" y="3608.542">angle(double[], double[], double[]): double</text></g></a><!--MD5=[0ee1a03caf0818d66c7cc0555cdef64c]
class elki.math.linearalgebra.LUDecomposition--><a href="LUDecomposition.html" target="_top" title="LUDecomposition.html" xlink:actuate="onRequest" xlink:href="LUDecomposition.html" xlink:show="new" xlink:title="LUDecomposition.html" xlink:type="simple"><g id="elem_elki.math.linearalgebra.LUDecomposition"><rect codeLine="361" fill="#F1F1F1" height="341.3438" id="elki.math.linearalgebra.LUDecomposition" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="266" x="1848" y="604.5"/><ellipse cx="1915.75" cy="620.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1918.7188,626.1406 Q1918.1406,626.4375 1917.5,626.5781 Q1916.8594,626.7344 1916.1563,626.7344 Q1913.6563,626.7344 1912.3281,625.0938 Q1911.0156,623.4375 1911.0156,620.3125 Q1911.0156,617.1875 1912.3281,615.5313 Q1913.6563,613.875 1916.1563,613.875 Q1916.8594,613.875 1917.5,614.0313 Q1918.1563,614.1875 1918.7188,614.4844 L1918.7188,617.2031 Q1918.0938,616.625 1917.5,616.3594 Q1916.9063,616.0781 1916.2813,616.0781 Q1914.9375,616.0781 1914.25,617.1563 Q1913.5625,618.2188 1913.5625,620.3125 Q1913.5625,622.4063 1914.25,623.4844 Q1914.9375,624.5469 1916.2813,624.5469 Q1916.9063,624.5469 1917.5,624.2813 Q1918.0938,624 1918.7188,623.4219 L1918.7188,626.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="122" x="1936.25" y="625.3467">LUDecomposition</text><line style="stroke:#181818;stroke-width:0.5;" x1="1849" x2="2113" y1="636.5" y2="636.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1856" y="647.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="151" x="1868" y="653.4951">serialVersionUID: long</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1856" y="663.4453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="84" x="1868" y="669.792">LU: double[]</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1856" y="679.7422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="39" x="1868" y="686.0889">m: int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1856" y="696.0391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="35" x="1868" y="702.3857">n: int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1856" y="712.3359"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="74" x="1868" y="718.6826">pivsign: int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1856" y="728.6328"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="55" x="1868" y="734.9795">piv: int[]</text><line style="stroke:#181818;stroke-width:0.5;" x1="1849" x2="2113" y1="742.2813" y2="742.2813"/><ellipse cx="1859" cy="755.9297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="190" x="1868" y="759.2764">LUDecomposition(double[])</text><ellipse cx="1859" cy="772.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="240" x="1868" y="775.5732">LUDecomposition(double[], int, int)</text><ellipse cx="1859" cy="788.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="168" x="1868" y="791.8701">isNonsingular(): boolean</text><ellipse cx="1859" cy="804.8203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="1868" y="808.167">getL(): double[]</text><ellipse cx="1859" cy="821.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="110" x="1868" y="824.4639">getU(): double[]</text><ellipse cx="1859" cy="837.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="102" x="1868" y="840.7607">getPivot(): int[]</text><ellipse cx="1859" cy="853.7109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="90" x="1868" y="857.0576">det(): double</text><ellipse cx="1859" cy="870.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="171" x="1868" y="873.3545">solve(double[]): double[]</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1856" y="883.3047"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="220" x="1868" y="889.6514">solveInplace(double[]): double[]</text><ellipse cx="1859" cy="902.6016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="171" x="1868" y="905.9482">solve(double[]): double[]</text><ellipse cx="1859" cy="918.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="220" x="1868" y="922.2451">solveInplace(double[]): double[]</text><ellipse cx="1859" cy="935.1953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="1868" y="938.542">inverse(): double[]</text></g></a><!--MD5=[270e881d41d9ca2c504985de7ec1dff1]
class elki.data.NumberVector--><a href="../../data/NumberVector.html" target="_top" title="../../data/NumberVector.html" xlink:actuate="onRequest" xlink:href="../../data/NumberVector.html" xlink:show="new" xlink:title="../../data/NumberVector.html" xlink:type="simple"><g id="elem_elki.data.NumberVector"><rect codeLine="393" fill="#F1F1F1" height="292.4531" id="elki.data.NumberVector" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="444" x="22" y="41"/><ellipse cx="188.25" cy="57" fill="#B4A7E5" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M184.1719,52.7656 L184.1719,50.6094 L191.5625,50.6094 L191.5625,52.7656 L189.0938,52.7656 L189.0938,60.8438 L191.5625,60.8438 L191.5625,63 L184.1719,63 L184.1719,60.8438 L186.6406,60.8438 L186.6406,52.7656 L184.1719,52.7656 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="103" x="208.75" y="61.8467">NumberVector</text><line style="stroke:#181818;stroke-width:0.5;" x1="23" x2="465" y1="73" y2="73"/><ellipse cx="33" cy="86.6484" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="219" x="42" y="89.9951">ATTRIBUTE_SEPARATOR: String</text><ellipse cx="33" cy="102.9453" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="418" x="42" y="106.292">VARIABLE_LENGTH: VectorTypeInformation&lt;NumberVector&gt;</text><ellipse cx="33" cy="119.2422" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="359" x="42" y="122.5889">FIELD: VectorFieldTypeInformation&lt;NumberVector&gt;</text><ellipse cx="33" cy="135.5391" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="386" x="42" y="138.8857">FIELD_1D: VectorFieldTypeInformation&lt;NumberVector&gt;</text><ellipse cx="33" cy="151.8359" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="386" x="42" y="155.1826">FIELD_2D: VectorFieldTypeInformation&lt;NumberVector&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="23" x2="465" y1="162.4844" y2="162.4844"/><ellipse cx="33" cy="176.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="line-through" textLength="61" x="42" y="179.4795">getValue</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="91" x="103" y="179.4795">(int): Number</text><ellipse cx="33" cy="192.4297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="131" x="42" y="195.7764">getMin(int): double</text><ellipse cx="33" cy="208.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="134" x="42" y="212.0732">getMax(int): double</text><ellipse cx="33" cy="225.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="176" x="42" y="228.3701">doubleValue(int): double</text><ellipse cx="33" cy="241.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="42" y="244.667">floatValue(int): float</text><ellipse cx="33" cy="257.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="108" x="42" y="260.9639">intValue(int): int</text><ellipse cx="33" cy="273.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="140" x="42" y="277.2607">longValue(int): long</text><ellipse cx="33" cy="290.2109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="146" x="42" y="293.5576">shortValue(int): short</text><ellipse cx="33" cy="306.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="134" x="42" y="309.8545">byteValue(int): byte</text><ellipse cx="33" cy="322.8047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="129" x="42" y="326.1514">toArray(): double[]</text></g></a><!--MD5=[5a5af9b0547913863cbe0ddf55a9ab5e]
class java.io.Serializable--><g id="elem_java.io.Serializable"><rect codeLine="413" fill="#F1F1F1" height="48" id="java.io.Serializable" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="114" x="1256" y="163"/><ellipse cx="1271" cy="179" fill="#B4A7E5" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1266.9219,174.7656 L1266.9219,172.6094 L1274.3125,172.6094 L1274.3125,174.7656 L1271.8438,174.7656 L1271.8438,182.8438 L1274.3125,182.8438 L1274.3125,185 L1266.9219,185 L1266.9219,182.8438 L1269.3906,182.8438 L1269.3906,174.7656 L1266.9219,174.7656 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="82" x="1285" y="183.8467">Serializable</text><line style="stroke:#181818;stroke-width:0.5;" x1="1257" x2="1369" y1="195" y2="195"/><line style="stroke:#181818;stroke-width:0.5;" x1="1257" x2="1369" y1="203" y2="203"/></g><!--MD5=[bf027437e5d93c406f622fde6b688b69]
reverse link elki.math.linearalgebra.Centroid to elki.math.linearalgebra.ProjectedCentroid--><g id="link_elki.math.linearalgebra.Centroid_elki.math.linearalgebra.ProjectedCentroid"><path codeLine="382" d="M257.22,925.43 C268.36,1051.48 283.94,1227.62 293.2,1332.28 " fill="none" id="elki.math.linearalgebra.Centroid-backto-elki.math.linearalgebra.ProjectedCentroid" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="250.22,925.8,255.43,905.26,264.17,924.57,250.22,925.8" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[5ff7d4087dfe226f19aebcbf78559e23]
reverse link elki.data.NumberVector to elki.math.linearalgebra.Centroid--><g id="link_elki.data.NumberVector_elki.math.linearalgebra.Centroid"><path codeLine="383" d="M244,353.5 C244,445.86 244,559.21 244,644.94 " fill="none" id="elki.data.NumberVector-backto-elki.math.linearalgebra.Centroid" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="none" points="237,353.23,244,333.23,251,353.23,237,353.23" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[7a60c42e071e58396ff078546565895d]
link elki.math.linearalgebra.ConstrainedQuadraticProblemSolver to elki.math.linearalgebra.ConstrainedQuadraticProblemSolver.ProblemData--><g id="link_elki.math.linearalgebra.ConstrainedQuadraticProblemSolver_elki.math.linearalgebra.ConstrainedQuadraticProblemSolver.ProblemData"><path codeLine="384" d="M1328.23,921.04 C1336.54,1051.72 1348.44,1238.84 1355.07,1342.99 " fill="none" id="elki.math.linearalgebra.ConstrainedQuadraticProblemSolver-to-elki.math.linearalgebra.ConstrainedQuadraticProblemSolver.ProblemData" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1355.4,1348.19,1358.8259,1338.9562,1355.0854,1343.1999,1350.8417,1339.4595,1355.4,1348.19" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="38" x="1345" y="1176.0669">cache</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="7" x="1347.6027" y="1337.3195">*</text></g><!--MD5=[1f1a55b207d9322a876eff8911e2342c]
reverse link elki.math.linearalgebra.ConstrainedQuadraticProblemSolver to elki.math.linearalgebra.ConstrainedQuadraticProblemSolver.ProblemData--><g id="link_elki.math.linearalgebra.ConstrainedQuadraticProblemSolver_elki.math.linearalgebra.ConstrainedQuadraticProblemSolver.ProblemData"><path codeLine="386" d="M1323.62,936.15 C1326.31,1010.38 1330.31,1099.75 1336,1180 C1340.01,1236.61 1346.48,1300.53 1351.7,1348.24 " fill="none" id="elki.math.linearalgebra.ConstrainedQuadraticProblemSolver-backto-elki.math.linearalgebra.ConstrainedQuadraticProblemSolver.ProblemData" style="stroke:#181818;stroke-width:1.0;"/><ellipse cx="1323.3717" cy="929.025" fill="#FFFFFF" rx="8" ry="8" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="1323.6535" x2="1323.09" y1="937.0201" y2="921.03"/><line style="stroke:#181818;stroke-width:1.0;" x1="1315.3767" x2="1331.3668" y1="929.3068" y2="928.7433"/></g><!--MD5=[fb378127e33fe614d7dbb29708d870c2]
reverse link elki.math.linearalgebra.ConstrainedQuadraticProblemSolver to elki.math.linearalgebra.ConstrainedQuadraticProblemSolver.DimensionState--><g id="link_elki.math.linearalgebra.ConstrainedQuadraticProblemSolver_elki.math.linearalgebra.ConstrainedQuadraticProblemSolver.DimensionState"><path codeLine="385" d="M1243.3,935.64 C1209.31,1015.99 1173.06,1116.06 1156,1210 C1058.61,1746.33 1159.16,2411.98 1192.85,2606.33 " fill="none" id="elki.math.linearalgebra.ConstrainedQuadraticProblemSolver-backto-elki.math.linearalgebra.ConstrainedQuadraticProblemSolver.DimensionState" style="stroke:#181818;stroke-width:1.0;"/><ellipse cx="1246.2551" cy="928.7459" fill="#FFFFFF" rx="8" ry="8" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="1243.1102" x2="1249.4" y1="936.1018" y2="921.39"/><line style="stroke:#181818;stroke-width:1.0;" x1="1238.8992" x2="1253.611" y1="925.601" y2="931.8908"/></g><!--MD5=[6602e71ca0044c6e8ff119308f777d30]
link elki.math.linearalgebra.ConstrainedQuadraticProblemSolver.ProblemData to elki.math.linearalgebra.ConstrainedQuadraticProblemSolver.DimensionState--><g id="link_elki.math.linearalgebra.ConstrainedQuadraticProblemSolver.ProblemData_elki.math.linearalgebra.ConstrainedQuadraticProblemSolver.DimensionState"><path codeLine="387" d="M1350.82,1494.95 C1322.51,1718.46 1236.88,2394.56 1210.69,2601.29 " fill="none" id="elki.math.linearalgebra.ConstrainedQuadraticProblemSolver.ProblemData-to-elki.math.linearalgebra.ConstrainedQuadraticProblemSolver.DimensionState" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1210.04,2606.38,1215.1404,2597.9547,1210.669,2601.4197,1207.2039,2596.9483,1210.04,2606.38" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="66" x="1329" y="1676.0669">dimStates</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="7" x="1203.4714" y="2595.6289">*</text></g><!--MD5=[98cb184dafb9bbd3d49e92ea63d0e378]
reverse link java.io.Serializable to elki.math.linearalgebra.QRDecomposition--><g id="link_java.io.Serializable_elki.math.linearalgebra.QRDecomposition"><path codeLine="388" d="M1235.96,196.79 C1127.09,213.08 928.11,257.67 808,374 C744.43,435.57 705.03,525.49 681.04,604.48 " fill="none" id="java.io.Serializable-backto-elki.math.linearalgebra.QRDecomposition" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="none" points="1235.06,189.85,1255.85,193.98,1237.02,203.71,1235.06,189.85" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[2ed32e6d5ae57ac749b7f4bcf738da34]
reverse link java.io.Serializable to elki.math.linearalgebra.LUDecomposition--><g id="link_java.io.Serializable_elki.math.linearalgebra.LUDecomposition"><path codeLine="389" d="M1390.12,195.57 C1501.54,210.48 1707.58,253.48 1830,374 C1892.48,435.51 1929.45,525.43 1951.15,604.43 " fill="none" id="java.io.Serializable-backto-elki.math.linearalgebra.LUDecomposition" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="none" points="1389.1,202.5,1370.13,193.07,1390.85,188.61,1389.1,202.5" style="stroke:#181818;stroke-width:1.0;"/></g><rect fill="none" height="11.6406" style="stroke:none;stroke-width:1.0;" width="186" x="1674.5" y="3638"/><text fill="#888888" font-family="sans-serif" font-size="10" lengthAdjust="spacing" textLength="186" x="1674.5" y="3647.2822">UMLDoclet 2.0.19, PlantUML 1.2022.8</text><!--MD5=[724c4365eee6f469a091ab418faa1370]
@startuml
    remove .*\.(Instance|Par|Parameterizer|Factory)$
    namespace elki.math.linearalgebra {

        class CholeskyDecomposition [[CholeskyDecomposition.html]] {
            -L: double[]
            -isspd: boolean
            +CholeskyDecomposition(double[])
            +isSPD(): boolean
            +getL(): double[]
            +solve(double[]): double[]
            -solveL(double[]): double[]
            -solveLtransposed(double[]): double[]
            +solve(double[]): double[]
            +solveLInplace(double[]): double[]
            +solveLtransposed(double[]): double[]
        }

        class ProjectedCentroid [[ProjectedCentroid.html]] {
            -dims: long[]
            +ProjectedCentroid(long[], int)
            +put(double[]): void
            +put(double[], double): void
            +put(NumberVector): void
            +put(NumberVector, double): void
            {static} +make(long[], Relation<? extends NumberVector>): ProjectedCentroid
            {static} +make(long[], Relation<? extends NumberVector>, DBIDs): ProjectedCentroid
        }

        class LinearEquationSystem [[LinearEquationSystem.html]] {
            {static} -LOG: Logging
            {static} -DELTA: double
            {static} -TRIVAL_PIVOT_SEARCH: int
            {static} -TOTAL_PIVOT_SEARCH: int
            -solvable: boolean
            -solved: boolean
            -rank: int
            -coeff: double[]
            -rhs: double[]
            -row: int[]
            -col: int[]
            -x_0: double[]
            -u: double[]
            -reducedRowEchelonForm: boolean
            +LinearEquationSystem(double[], double[])
            +LinearEquationSystem(double[], double[], int[], int[])
            +getCoefficents(): double[]
            +getRHS(): double[]
            +getRowPermutations(): int[]
            +getColumnPermutations(): int[]
            +isSolved(): boolean
            +solveByTotalPivotSearch(): void
            +solveByTrivialPivotSearch(): void
            +isSolvable(): boolean
            +equationsToString(String, int): String
            +equationsToString(String, NumberFormat): String
            +equationsToString(NumberFormat): String
            +equationsToString(int): String
            +solutionToString(int): String
            -reducedRowEchelonForm(int): void
            -totalPivotSearch(int, int[]): void
            -nonZeroPivotSearch(int, int[]): void
            -permutePivot(int, int, int, int): void
            -pivotOperation(int): void
            -solve(int): void
            -isSolvable(int): boolean
            -maxIntegerDigits(double[]): int[]
            -maxIntegerDigits(double[]): int
            -integerDigits(double): int
            -format(NumberFormat, StringBuilder, double, int): StringBuilder
            +subspacedim(): int
        }

        class Centroid [[Centroid.html]] {
            #wsum: double
            #elements: double[]
            +Centroid(int)
            +put(double[]): void
            +put(double[], double): void
            +put(NumberVector): void
            +put(NumberVector, double): void
            +doubleValue(int): double
            +longValue(int): long
            +getDimensionality(): int
            +toArray(): double[]
            {static} +make(Relation<? extends NumberVector>, DBIDs): Centroid
            +getArrayRef(): double[]
        }

        class ConstrainedQuadraticProblemSolver [[ConstrainedQuadraticProblemSolver.html]] {
            +ConstrainedQuadraticProblemSolver(int)
            +solve(double[], double[], double, double[], double[], double[]): double
            -findLimitedDimensionWithDerivative(double[], double[], double[], double[]): int
            -calculateLinearDerivativeLimits(double[], double[], double[], double[], int, double[]): void
            -computeMaximumPossibleFuncValue(double[], double[], double, double[], double[]): double
            -evaluateConstrainedQuadraticFunction(double[], double[], double, double[], double[], DimensionState[], boolean, double[], double): double
            -evaluateConstrainedQuadraticFunction1D(double, double, double, double, double, double[], double): double
            -startReducedProblem(double[], double[], double, double[], double[], DimensionState[], int, DimensionState, double[], double): double
            -expandNewSolution(double[], double[], int, double): void
            -reduceSolution(double[], int): double[]
            {static} -reduceConstraints(double[], double[], double[], double[], DimensionState[], DimensionState[], int): void
            {static} -reduceEquation(double[], double[], double, double[], double[], int, double): double
            -findMaximumWithFunctionValue(double[], double[]): double[]
            {static} -evaluateQuadraticFormula(double[], double[], double, double[]): double
            {static} -contains(double[], double[], double[]): boolean
        }

        enum elki.math.linearalgebra.ConstrainedQuadraticProblemSolver.DimensionState [[ConstrainedQuadraticProblemSolver.DimensionState.html]] {
            {static} +LOLIM
            {static} +UPLIM
            {static} +UNCONSTR
            {static} +CONSTR
        }

        class elki.math.linearalgebra.ConstrainedQuadraticProblemSolver.ProblemData [[ConstrainedQuadraticProblemSolver.ProblemData.html]] {
            ~a: double[]
            ~b: double[]
            ~result: double[]
            ~min: double[]
            ~max: double[]
            +ProblemData(int)
        }

        class EigenvalueDecomposition [[EigenvalueDecomposition.html]] {
            -n: int
            -d: double[]
            -e: double[]
            -V: double[]
            -H: double[]
            -ort: double[]
            +EigenvalueDecomposition(double[])
            -tred2(): void
            -tred2AccumulateTransformations(): void
            -tql2(): void
            -tql2ComputeImplicitShift(int): double
            -tql2ImplicitQL(int, int, double): void
            -sortEigen(): void
            -orthes(): void
            {static} -cdiv(double, double, double, double, double[], int): void
            -hqr2(): void
            {static} -modifyQP(double[], int, double, double): void
            {static} -modifyQR(double[], int, boolean, double, double, double, double, double): void
            -hqr2BacksubstituteReal(int, double, double): void
            -hqr2BacksubstituteComplex(int, double, double, double): void
            -hqr2BackTransformation(int, int, int): void
            +getV(): double[]
            +getRealEigenvalues(): double[]
            +getImagEigenvalues(): double[]
            +getD(): double[]
        }

        class CovarianceMatrix [[CovarianceMatrix.html]] {
            {static} +ERR_TOO_LITTLE_WEIGHT: String
            ~mean: double[]
            ~elements: double[]
            ~nmea: double[]
            #wsum: double
            +CovarianceMatrix(int)
            +getDimensionality(): int
            +put(double[]): void
            +put(double[], double): void
            +put(NumberVector): void
            +put(NumberVector, double): void
            +getWeight(): double
            +getMeanVector(): double[]
            +getMeanVector(Relation<? extends NumberVector>): F extends NumberVector
            +makeSampleMatrix(): double[]
            +makePopulationMatrix(): double[]
            +destroyToSampleMatrix(): double[]
            +destroyToPopulationMatrix(): double[]
            +reset(): void
            {static} +make(Relation<? extends NumberVector>): CovarianceMatrix
            {static} +make(Relation<? extends NumberVector>, DBIDs): CovarianceMatrix
        }

        class QRDecomposition [[QRDecomposition.html]] {
            {static} #ERR_MATRIX_RANK_DEFICIENT: String
            {static} -serialVersionUID: long
            -QR: double[]
            -m: int
            -n: int
            -Rdiag: double[]
            +QRDecomposition(double[])
            +QRDecomposition(double[], int, int)
            +isFullRank(): boolean
            +rank(double): int
            +getH(): double[]
            +getR(): double[]
            +getQ(): double[]
            +solve(double[]): double[]
            -solveInplace(double[]): double[]
            +solve(double[]): double[]
            +solveInplace(double[]): double[]
            +inverse(): double[]
        }

        class SingularValueDecomposition [[SingularValueDecomposition.html]] {
            -U: double[]
            -V: double[]
            -s: double[]
            -m: int
            -n: int
            +SingularValueDecomposition(double[])
            -generateU(int, int): void
            -generateV(int, double[], int): void
            -deflate(double[], int, int, boolean): void
            -split(double[], int, int, boolean): void
            -qrStep(double[], int, int, boolean, boolean): void
            -convergence(int, int, boolean, boolean): int
            +getU(): double[]
            +getV(): double[]
            +getSingularValues(): double[]
            +getS(): double[]
            +norm2(): double
            +cond(): double
            +rank(): int
        }

        class AffineTransformation [[AffineTransformation.html]] {
            -dim: int
            -trans: double[]
            -inv: double[]
            +AffineTransformation(int)
            +AffineTransformation(int, double[], double[])
            {static} +reorderAxesTransformation(int, int...): AffineTransformation
            +getDimensionality(): int
            +addTranslation(double[]): void
            +addMatrix(double[]): void
            +addRotation(int, int, double): void
            +addAxisReflection(int): void
            +addScaling(double): void
            +getTransformation(): double[]
            +getInverse(): double[]
            -updateInverse(): void
            +homogeneVector(double[]): double[]
            +homogeneRelativeVector(double[]): double[]
            +unhomogeneVector(double[]): double[]
            +unhomogeneRelativeVector(double[]): double[]
            +apply(double[]): double[]
            +applyInverse(double[]): double[]
            +applyRelative(double[]): double[]
            +applyRelativeInverse(double[]): double[]
        }

        class VMath [[VMath.html]] {
            {static} -DELTA: double
            {static} #ERR_VEC_DIMENSIONS: String
            {static} #ERR_MATRIX_DIMENSIONS: String
            {static} #ERR_MATRIX_INNERDIM: String
            {static} #ERR_DIMENSIONS: String
            {static} #ERR_INVALID_RANGE: String
            {static} #ERR_MATRIX_NONSQUARE: String
            {static} #ERR_SINGULAR: String
            {static} #ERR_MATRIX_NOT_SPD: String
            {static} #ERR_MATRIX_RANK_DEFICIENT: String
            {static} +unitVector(int, int): double[]
            {static} +copy(double[]): double[]
            {static} +transpose(double[]): double[]
            {static} +plus(double[], double[]): double[]
            {static} +plusTimes(double[], double[], double): double[]
            {static} +timesPlus(double[], double, double[]): double[]
            {static} +timesPlusTimes(double[], double, double[], double): double[]
            {static} +plusEquals(double[], double[]): double[]
            {static} +plusTimesEquals(double[], double[], double): double[]
            {static} +timesPlusEquals(double[], double, double[]): double[]
            {static} +timesPlusTimesEquals(double[], double, double[], double): double[]
            {static} +plus(double[], double): double[]
            {static} +plusEquals(double[], double): double[]
            {static} +minus(double[], double[]): double[]
            {static} +minusTimes(double[], double[], double): double[]
            {static} +timesMinus(double[], double, double[]): double[]
            {static} +timesMinusTimes(double[], double, double[], double): double[]
            {static} +minusEquals(double[], double[]): double[]
            {static} +minusTimesEquals(double[], double[], double): double[]
            {static} +timesMinusEquals(double[], double, double[]): double[]
            {static} +timesMinusTimesEquals(double[], double, double[], double): double[]
            {static} +minus(double[], double): double[]
            {static} +minusEquals(double[], double): double[]
            {static} +times(double[], double): double[]
            {static} +timesEquals(double[], double): double[]
            {static} +overwriteTimes(double[], double[], double): double[]
            {static} +- -times- -(double[], double[]): double[]
            {static} +transposeTimes(double[], double[]): double[]
            {static} +transposeTimes(double[], double[]): double
            {static} +- -timesTranspose- -(double[], double[]): double[]
            {static} +timesTranspose(double[], double[]): double[]
            {static} +scalarProduct(double[], double[]): double
            {static} +dot(double[], double[]): double
            {static} +sum(double[]): double
            {static} +squareSum(double[]): double
            {static} +euclideanLength(double[]): double
            {static} +argmax(double[]): int
            {static} +argmax(double[], int, int): int
            {static} +argmin(double[]): int
            {static} +argmin(double[], int, int): int
            {static} +normalize(double[]): double[]
            {static} +normalizeEquals(double[]): double[]
            {static} +hashCode(double[]): int
            {static} +equals(double[], double[]): boolean
            {static} +clear(double[]): void
            {static} +clear(double[]): void
            {static} +rotate90Equals(double[]): double[]
            {static} +unitMatrix(int): double[]
            {static} +zeroMatrix(int): double[]
            {static} +identity(int, int): double[]
            {static} +diagonal(double[]): double[]
            {static} +copy(double[]): double[]
            {static} +rowPackedCopy(double[]): double[]
            {static} +columnPackedCopy(double[]): double[]
            {static} +getMatrix(double[], int, int, int, int): double[]
            {static} +getMatrix(double[], int[], int[]): double[]
            {static} +getMatrix(double[], int[], int, int): double[]
            {static} +getMatrix(double[], int, int, int[]): double[]
            {static} +setMatrix(double[], int, int, int, int, double[]): void
            {static} +setMatrix(double[], int[], int[], double[]): void
            {static} +setMatrix(double[], int[], int, int, double[]): void
            {static} +setMatrix(double[], int, int, int[], double[]): void
            {static} +getRow(double[], int): double[]
            {static} +setRow(double[], int, double[]): void
            {static} +getCol(double[], int): double[]
            {static} +setCol(double[], int, double[]): void
            {static} +transpose(double[]): double[]
            {static} +plus(double[], double[]): double[]
            {static} +plusTimes(double[], double[], double): double[]
            {static} +plusEquals(double[], double[]): double[]
            {static} +plusTimesEquals(double[], double[], double): double[]
            {static} +minus(double[], double[]): double[]
            {static} +minusTimes(double[], double[], double): double[]
            {static} +minusEquals(double[], double[]): double[]
            {static} +minusTimesEquals(double[], double[], double): double[]
            {static} +times(double[], double): double[]
            {static} +timesEquals(double[], double): double[]
            {static} +times(double[], double[]): double[]
            {static} +times(double[], double[]): double[]
            {static} +transposeTimes(double[], double[]): double[]
            {static} +transposeTimes(double[], double[]): double[]
            {static} +transposeTimesTimes(double[], double[], double[]): double
            {static} +timesTranspose(double[], double[]): double[]
            {static} +transposeTimesTranspose(double[], double[]): double[]
            {static} +transposeDiagonalTimes(double[], double[], double[]): double[]
            {static} +mahalanobisDistance(double[], double[], double[]): double
            {static} +getDiagonal(double[]): double[]
            {static} +normalizeColumns(double[]): void
            {static} +appendColumns(double[], double[]): double[]
            {static} +orthonormalize(double[]): double[]
            {static} +solve(double[], double[]): double[]
            {static} +solve(double[], double[]): double[]
            {static} +inverse(double[]): double[]
            {static} +normF(double[]): double
            {static} +hashCode(double[]): int
            {static} +equals(double[], double[]): boolean
            {static} +almostEquals(double[], double[], double): boolean
            {static} +almostEquals(double[], double[]): boolean
            {static} +almostEquals(double[], double[], double): boolean
            {static} +almostEquals(double[], double[]): boolean
            {static} +getRowDimensionality(double[]): int
            {static} +getColumnDimensionality(double[]): int
            {static} +angle(double[], double[]): double
            {static} +angle(double[], double[], double[]): double
        }

        class LUDecomposition [[LUDecomposition.html]] {
            {static} -serialVersionUID: long
            -LU: double[]
            -m: int
            -n: int
            -pivsign: int
            -piv: int[]
            +LUDecomposition(double[])
            +LUDecomposition(double[], int, int)
            +isNonsingular(): boolean
            +getL(): double[]
            +getU(): double[]
            +getPivot(): int[]
            +det(): double
            +solve(double[]): double[]
            -solveInplace(double[]): double[]
            +solve(double[]): double[]
            +solveInplace(double[]): double[]
            +inverse(): double[]
        }

        Centroid <|- - ProjectedCentroid
        elki.data.NumberVector <|.. Centroid
        ConstrainedQuadraticProblemSolver - -> "*" elki.math.linearalgebra.ConstrainedQuadraticProblemSolver.ProblemData: cache
        ConstrainedQuadraticProblemSolver +- - elki.math.linearalgebra.ConstrainedQuadraticProblemSolver.DimensionState
        ConstrainedQuadraticProblemSolver +- - elki.math.linearalgebra.ConstrainedQuadraticProblemSolver.ProblemData
        elki.math.linearalgebra.ConstrainedQuadraticProblemSolver.ProblemData - -> "*" elki.math.linearalgebra.ConstrainedQuadraticProblemSolver.DimensionState: dimStates
        java.io.Serializable <|.. QRDecomposition
        java.io.Serializable <|.. LUDecomposition
    }

    namespace elki.data {
        interface NumberVector [[../../data/NumberVector.html]] {
            {static} +ATTRIBUTE_SEPARATOR: String
            {static} +VARIABLE_LENGTH: VectorTypeInformation<NumberVector>
            {static} +FIELD: VectorFieldTypeInformation<NumberVector>
            {static} +FIELD_1D: VectorFieldTypeInformation<NumberVector>
            {static} +FIELD_2D: VectorFieldTypeInformation<NumberVector>
            +- -getValue- -(int): Number
            +getMin(int): double
            +getMax(int): double
            {abstract} +doubleValue(int): double
            +floatValue(int): float
            +intValue(int): int
            {abstract} +longValue(int): long
            +shortValue(int): short
            +byteValue(int): byte
            {abstract} +toArray(): double[]
        }
    }

    namespace java.io {
        interface Serializable
    }

    center footer UMLDoclet 2.0.19, PlantUML 1.2022.8
@enduml

PlantUML version 1.2022.8(Sun Sep 25 11:00:33 CEST 2022)
(APACHE source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: de
Country: DE
--></g></svg>