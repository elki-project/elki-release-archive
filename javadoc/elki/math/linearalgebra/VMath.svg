<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="1945px" preserveAspectRatio="none" style="width:527px;height:1945px;background:#FFFFFF;" version="1.1" viewBox="0 0 527 1945" width="527px" zoomAndPan="magnify"><defs/><g><!--MD5=[247756ac2f1f04fd90dbfe8bf81655ee]
class elki.math.linearalgebra.VMath--><a href="VMath.html" target="_top" title="VMath.html" xlink:actuate="onRequest" xlink:href="VMath.html" xlink:show="new" xlink:title="VMath.html" xlink:type="simple"><g id="elem_elki.math.linearalgebra.VMath"><rect codeLine="6" fill="#F1F1F1" height="1911.7813" id="elki.math.linearalgebra.VMath" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="506" x="7" y="7"/><ellipse cx="201.25" cy="25.9688" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M204.2188,31.6094 Q203.6406,31.9063 203,32.0469 Q202.3594,32.2031 201.6563,32.2031 Q199.1563,32.2031 197.8281,30.5625 Q196.5156,28.9063 196.5156,25.7813 Q196.5156,22.6563 197.8281,21 Q199.1563,19.3438 201.6563,19.3438 Q202.3594,19.3438 203,19.5 Q203.6563,19.6563 204.2188,19.9531 L204.2188,22.6719 Q203.5938,22.0938 203,21.8281 Q202.4063,21.5469 201.7813,21.5469 Q200.4375,21.5469 199.75,22.625 Q199.0625,23.6875 199.0625,25.7813 Q199.0625,27.875 199.75,28.9531 Q200.4375,30.0156 201.7813,30.0156 Q202.4063,30.0156 203,29.75 Q203.5938,29.4688 204.2188,28.8906 L204.2188,31.6094 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="43" x="254.75" y="24.9951">VMath</text><text fill="#000000" font-family="sans-serif" font-size="10" lengthAdjust="spacing" textLength="109" x="221.75" y="37.5791">elki.math.linearalgebra</text><line style="stroke:#181818;stroke-width:0.5;" x1="8" x2="512" y1="44.9375" y2="44.9375"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15" y="55.5859"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="102" x="27" y="61.9326">DELTA: double</text><polygon fill="none" points="18,69.8828,22,73.8828,18,77.8828,14,73.8828" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="207" x="27" y="78.2295">ERR_VEC_DIMENSIONS: String</text><polygon fill="none" points="18,86.1797,22,90.1797,18,94.1797,14,90.1797" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="233" x="27" y="94.5264">ERR_MATRIX_DIMENSIONS: String</text><polygon fill="none" points="18,102.4766,22,106.4766,18,110.4766,14,106.4766" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="214" x="27" y="110.8232">ERR_MATRIX_INNERDIM: String</text><polygon fill="none" points="18,118.7734,22,122.7734,18,126.7734,14,122.7734" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="172" x="27" y="127.1201">ERR_DIMENSIONS: String</text><polygon fill="none" points="18,135.0703,22,139.0703,18,143.0703,14,139.0703" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="27" y="143.417">ERR_INVALID_RANGE: String</text><polygon fill="none" points="18,151.3672,22,155.3672,18,159.3672,14,155.3672" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="235" x="27" y="159.7139">ERR_MATRIX_NONSQUARE: String</text><polygon fill="none" points="18,167.6641,22,171.6641,18,175.6641,14,171.6641" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="154" x="27" y="176.0107">ERR_SINGULAR: String</text><polygon fill="none" points="18,183.9609,22,187.9609,18,191.9609,14,187.9609" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="212" x="27" y="192.3076">ERR_MATRIX_NOT_SPD: String</text><polygon fill="none" points="18,200.2578,22,204.2578,18,208.2578,14,204.2578" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="263" x="27" y="208.6045">ERR_MATRIX_RANK_DEFICIENT: String</text><line style="stroke:#181818;stroke-width:0.5;" x1="8" x2="512" y1="215.9063" y2="215.9063"/><ellipse cx="18" cy="229.5547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="190" x="27" y="232.9014">unitVector(int, int): double[]</text><ellipse cx="18" cy="245.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="168" x="27" y="249.1982">copy(double[]): double[]</text><ellipse cx="18" cy="262.1484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="205" x="27" y="265.4951">transpose(double[]): double[]</text><ellipse cx="18" cy="278.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="230" x="27" y="281.792">plus(double[], double[]): double[]</text><ellipse cx="18" cy="294.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="328" x="27" y="298.0889">plusTimes(double[], double[], double): double[]</text><ellipse cx="18" cy="311.0391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="324" x="27" y="314.3857">timesPlus(double[], double, double[]): double[]</text><ellipse cx="18" cy="327.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="422" x="27" y="330.6826">timesPlusTimes(double[], double, double[], double): double[]</text><ellipse cx="18" cy="343.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="276" x="27" y="346.9795">plusEquals(double[], double[]): double[]</text><ellipse cx="18" cy="359.9297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="374" x="27" y="363.2764">plusTimesEquals(double[], double[], double): double[]</text><ellipse cx="18" cy="376.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="370" x="27" y="379.5732">timesPlusEquals(double[], double, double[]): double[]</text><ellipse cx="18" cy="392.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="468" x="27" y="395.8701">timesPlusTimesEquals(double[], double, double[], double): double[]</text><ellipse cx="18" cy="408.8203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="220" x="27" y="412.167">plus(double[], double): double[]</text><ellipse cx="18" cy="425.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="266" x="27" y="428.4639">plusEquals(double[], double): double[]</text><ellipse cx="18" cy="441.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="243" x="27" y="444.7607">minus(double[], double[]): double[]</text><ellipse cx="18" cy="457.7109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="341" x="27" y="461.0576">minusTimes(double[], double[], double): double[]</text><ellipse cx="18" cy="474.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="336" x="27" y="477.3545">timesMinus(double[], double, double[]): double[]</text><ellipse cx="18" cy="490.3047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="434" x="27" y="493.6514">timesMinusTimes(double[], double, double[], double): double[]</text><ellipse cx="18" cy="506.6016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="289" x="27" y="509.9482">minusEquals(double[], double[]): double[]</text><ellipse cx="18" cy="522.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="387" x="27" y="526.2451">minusTimesEquals(double[], double[], double): double[]</text><ellipse cx="18" cy="539.1953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="382" x="27" y="542.542">timesMinusEquals(double[], double, double[]): double[]</text><ellipse cx="18" cy="555.4922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="27" y="558.8389">timesMinusTimesEquals(double[], double, double[], double): double[]</text><ellipse cx="18" cy="571.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="233" x="27" y="575.1357">minus(double[], double): double[]</text><ellipse cx="18" cy="588.0859" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="279" x="27" y="591.4326">minusEquals(double[], double): double[]</text><ellipse cx="18" cy="604.3828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="229" x="27" y="607.7295">times(double[], double): double[]</text><ellipse cx="18" cy="620.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="275" x="27" y="624.0264">timesEquals(double[], double): double[]</text><ellipse cx="18" cy="636.9766" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="362" x="27" y="640.3232">overwriteTimes(double[], double[], double): double[]</text><ellipse cx="18" cy="653.2734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="38" x="27" y="656.6201">times</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="201" x="65" y="656.6201">(double[], double[]): double[]</text><ellipse cx="18" cy="669.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="313" x="27" y="672.917">transposeTimes(double[], double[]): double[]</text><ellipse cx="18" cy="685.8672" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="303" x="27" y="689.2139">transposeTimes(double[], double[]): double</text><ellipse cx="18" cy="702.1641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="112" x="27" y="705.5107">timesTranspose</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="201" x="139" y="705.5107">(double[], double[]): double[]</text><ellipse cx="18" cy="718.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="313" x="27" y="721.8076">timesTranspose(double[], double[]): double[]</text><ellipse cx="18" cy="734.7578" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="285" x="27" y="738.1045">scalarProduct(double[], double[]): double</text><ellipse cx="18" cy="751.0547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="214" x="27" y="754.4014">dot(double[], double[]): double</text><ellipse cx="18" cy="767.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="155" x="27" y="770.6982">sum(double[]): double</text><ellipse cx="18" cy="783.6484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="204" x="27" y="786.9951">squareSum(double[]): double</text><ellipse cx="18" cy="799.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="240" x="27" y="803.292">euclideanLength(double[]): double</text><ellipse cx="18" cy="816.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="144" x="27" y="819.5889">argmax(double[]): int</text><ellipse cx="18" cy="832.5391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="194" x="27" y="835.8857">argmax(double[], int, int): int</text><ellipse cx="18" cy="848.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="141" x="27" y="852.1826">argmin(double[]): int</text><ellipse cx="18" cy="865.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="191" x="27" y="868.4795">argmin(double[], int, int): int</text><ellipse cx="18" cy="881.4297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="202" x="27" y="884.7764">normalize(double[]): double[]</text><ellipse cx="18" cy="897.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="248" x="27" y="901.0732">normalizeEquals(double[]): double[]</text><ellipse cx="18" cy="914.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="165" x="27" y="917.3701">hashCode(double[]): int</text><ellipse cx="18" cy="930.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="245" x="27" y="933.667">equals(double[], double[]): boolean</text><ellipse cx="18" cy="946.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="138" x="27" y="949.9639">clear(double[]): void</text><ellipse cx="18" cy="962.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="138" x="27" y="966.2607">clear(double[]): void</text><ellipse cx="18" cy="979.2109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="240" x="27" y="982.5576">rotate90Equals(double[]): double[]</text><ellipse cx="18" cy="995.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="160" x="27" y="998.8545">unitMatrix(int): double[]</text><ellipse cx="18" cy="1011.8047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="165" x="27" y="1015.1514">zeroMatrix(int): double[]</text><ellipse cx="18" cy="1028.1016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="169" x="27" y="1031.4482">identity(int, int): double[]</text><ellipse cx="18" cy="1044.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="27" y="1047.7451">diagonal(double[]): double[]</text><ellipse cx="18" cy="1060.6953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="168" x="27" y="1064.042">copy(double[]): double[]</text><ellipse cx="18" cy="1076.9922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="246" x="27" y="1080.3389">rowPackedCopy(double[]): double[]</text><ellipse cx="18" cy="1093.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="272" x="27" y="1096.6357">columnPackedCopy(double[]): double[]</text><ellipse cx="18" cy="1109.5859" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="298" x="27" y="1112.9326">getMatrix(double[], int, int, int, int): double[]</text><ellipse cx="18" cy="1125.8828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="268" x="27" y="1129.2295">getMatrix(double[], int[], int[]): double[]</text><ellipse cx="18" cy="1142.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="283" x="27" y="1145.5264">getMatrix(double[], int[], int, int): double[]</text><ellipse cx="18" cy="1158.4766" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="283" x="27" y="1161.8232">getMatrix(double[], int, int, int[]): double[]</text><ellipse cx="18" cy="1174.7734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="333" x="27" y="1178.1201">setMatrix(double[], int, int, int, int, double[]): void</text><ellipse cx="18" cy="1191.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="303" x="27" y="1194.417">setMatrix(double[], int[], int[], double[]): void</text><ellipse cx="18" cy="1207.3672" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="318" x="27" y="1210.7139">setMatrix(double[], int[], int, int, double[]): void</text><ellipse cx="18" cy="1223.6641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="318" x="27" y="1227.0107">setMatrix(double[], int, int, int[], double[]): void</text><ellipse cx="18" cy="1239.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="213" x="27" y="1243.3076">getRow(double[], int): double[]</text><ellipse cx="18" cy="1256.2578" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="248" x="27" y="1259.6045">setRow(double[], int, double[]): void</text><ellipse cx="18" cy="1272.5547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="205" x="27" y="1275.9014">getCol(double[], int): double[]</text><ellipse cx="18" cy="1288.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="240" x="27" y="1292.1982">setCol(double[], int, double[]): void</text><ellipse cx="18" cy="1305.1484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="205" x="27" y="1308.4951">transpose(double[]): double[]</text><ellipse cx="18" cy="1321.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="230" x="27" y="1324.792">plus(double[], double[]): double[]</text><ellipse cx="18" cy="1337.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="328" x="27" y="1341.0889">plusTimes(double[], double[], double): double[]</text><ellipse cx="18" cy="1354.0391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="276" x="27" y="1357.3857">plusEquals(double[], double[]): double[]</text><ellipse cx="18" cy="1370.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="374" x="27" y="1373.6826">plusTimesEquals(double[], double[], double): double[]</text><ellipse cx="18" cy="1386.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="243" x="27" y="1389.9795">minus(double[], double[]): double[]</text><ellipse cx="18" cy="1402.9297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="341" x="27" y="1406.2764">minusTimes(double[], double[], double): double[]</text><ellipse cx="18" cy="1419.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="289" x="27" y="1422.5732">minusEquals(double[], double[]): double[]</text><ellipse cx="18" cy="1435.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="387" x="27" y="1438.8701">minusTimesEquals(double[], double[], double): double[]</text><ellipse cx="18" cy="1451.8203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="229" x="27" y="1455.167">times(double[], double): double[]</text><ellipse cx="18" cy="1468.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="275" x="27" y="1471.4639">timesEquals(double[], double): double[]</text><ellipse cx="18" cy="1484.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="239" x="27" y="1487.7607">times(double[], double[]): double[]</text><ellipse cx="18" cy="1500.7109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="239" x="27" y="1504.0576">times(double[], double[]): double[]</text><ellipse cx="18" cy="1517.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="313" x="27" y="1520.3545">transposeTimes(double[], double[]): double[]</text><ellipse cx="18" cy="1533.3047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="313" x="27" y="1536.6514">transposeTimes(double[], double[]): double[]</text><ellipse cx="18" cy="1549.6016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="411" x="27" y="1552.9482">transposeTimesTimes(double[], double[], double[]): double</text><ellipse cx="18" cy="1565.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="313" x="27" y="1569.2451">timesTranspose(double[], double[]): double[]</text><ellipse cx="18" cy="1582.1953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="387" x="27" y="1585.542">transposeTimesTranspose(double[], double[]): double[]</text><ellipse cx="18" cy="1598.4922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="439" x="27" y="1601.8389">transposeDiagonalTimes(double[], double[], double[]): double[]</text><ellipse cx="18" cy="1614.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="405" x="27" y="1618.1357">mahalanobisDistance(double[], double[], double[]): double</text><ellipse cx="18" cy="1631.0859" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="218" x="27" y="1634.4326">getDiagonal(double[]): double[]</text><ellipse cx="18" cy="1647.3828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="233" x="27" y="1650.7295">normalizeColumns(double[]): void</text><ellipse cx="18" cy="1663.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="315" x="27" y="1667.0264">appendColumns(double[], double[]): double[]</text><ellipse cx="18" cy="1679.9766" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="239" x="27" y="1683.3232">orthonormalize(double[]): double[]</text><ellipse cx="18" cy="1696.2734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="237" x="27" y="1699.6201">solve(double[], double[]): double[]</text><ellipse cx="18" cy="1712.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="237" x="27" y="1715.917">solve(double[], double[]): double[]</text><ellipse cx="18" cy="1728.8672" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="185" x="27" y="1732.2139">inverse(double[]): double[]</text><ellipse cx="18" cy="1745.1641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="169" x="27" y="1748.5107">normF(double[]): double</text><ellipse cx="18" cy="1761.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="165" x="27" y="1764.8076">hashCode(double[]): int</text><ellipse cx="18" cy="1777.7578" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="245" x="27" y="1781.1045">equals(double[], double[]): boolean</text><ellipse cx="18" cy="1794.0547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="347" x="27" y="1797.4014">almostEquals(double[], double[], double): boolean</text><ellipse cx="18" cy="1810.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="291" x="27" y="1813.6982">almostEquals(double[], double[]): boolean</text><ellipse cx="18" cy="1826.6484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="347" x="27" y="1829.9951">almostEquals(double[], double[], double): boolean</text><ellipse cx="18" cy="1842.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="291" x="27" y="1846.292">almostEquals(double[], double[]): boolean</text><ellipse cx="18" cy="1859.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="247" x="27" y="1862.5889">getRowDimensionality(double[]): int</text><ellipse cx="18" cy="1875.5391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="270" x="27" y="1878.8857">getColumnDimensionality(double[]): int</text><ellipse cx="18" cy="1891.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="229" x="27" y="1895.1826">angle(double[], double[]): double</text><ellipse cx="18" cy="1908.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="295" x="27" y="1911.4795">angle(double[], double[], double[]): double</text></g></a><rect fill="none" height="11.6406" style="stroke:none;stroke-width:1.0;" width="186" x="166.5" y="1925.7813"/><text fill="#888888" font-family="sans-serif" font-size="10" lengthAdjust="spacing" textLength="186" x="166.5" y="1935.0635">UMLDoclet 2.0.19, PlantUML 1.2022.8</text><!--MD5=[ee6739486c997640dd73f61bf03c44bb]
@startuml
    remove .*\.(Instance|Par|Parameterizer|Factory)$
    set namespaceSeparator none
    hide empty fields
    hide empty methods

    class "<size:14>VMath\n<size:10>elki.math.linearalgebra" as elki.math.linearalgebra.VMath [[VMath.html]] {
        {static} -DELTA: double
        {static} #ERR_VEC_DIMENSIONS: String
        {static} #ERR_MATRIX_DIMENSIONS: String
        {static} #ERR_MATRIX_INNERDIM: String
        {static} #ERR_DIMENSIONS: String
        {static} #ERR_INVALID_RANGE: String
        {static} #ERR_MATRIX_NONSQUARE: String
        {static} #ERR_SINGULAR: String
        {static} #ERR_MATRIX_NOT_SPD: String
        {static} #ERR_MATRIX_RANK_DEFICIENT: String
        {static} +unitVector(int, int): double[]
        {static} +copy(double[]): double[]
        {static} +transpose(double[]): double[]
        {static} +plus(double[], double[]): double[]
        {static} +plusTimes(double[], double[], double): double[]
        {static} +timesPlus(double[], double, double[]): double[]
        {static} +timesPlusTimes(double[], double, double[], double): double[]
        {static} +plusEquals(double[], double[]): double[]
        {static} +plusTimesEquals(double[], double[], double): double[]
        {static} +timesPlusEquals(double[], double, double[]): double[]
        {static} +timesPlusTimesEquals(double[], double, double[], double): double[]
        {static} +plus(double[], double): double[]
        {static} +plusEquals(double[], double): double[]
        {static} +minus(double[], double[]): double[]
        {static} +minusTimes(double[], double[], double): double[]
        {static} +timesMinus(double[], double, double[]): double[]
        {static} +timesMinusTimes(double[], double, double[], double): double[]
        {static} +minusEquals(double[], double[]): double[]
        {static} +minusTimesEquals(double[], double[], double): double[]
        {static} +timesMinusEquals(double[], double, double[]): double[]
        {static} +timesMinusTimesEquals(double[], double, double[], double): double[]
        {static} +minus(double[], double): double[]
        {static} +minusEquals(double[], double): double[]
        {static} +times(double[], double): double[]
        {static} +timesEquals(double[], double): double[]
        {static} +overwriteTimes(double[], double[], double): double[]
        {static} +- -times- -(double[], double[]): double[]
        {static} +transposeTimes(double[], double[]): double[]
        {static} +transposeTimes(double[], double[]): double
        {static} +- -timesTranspose- -(double[], double[]): double[]
        {static} +timesTranspose(double[], double[]): double[]
        {static} +scalarProduct(double[], double[]): double
        {static} +dot(double[], double[]): double
        {static} +sum(double[]): double
        {static} +squareSum(double[]): double
        {static} +euclideanLength(double[]): double
        {static} +argmax(double[]): int
        {static} +argmax(double[], int, int): int
        {static} +argmin(double[]): int
        {static} +argmin(double[], int, int): int
        {static} +normalize(double[]): double[]
        {static} +normalizeEquals(double[]): double[]
        {static} +hashCode(double[]): int
        {static} +equals(double[], double[]): boolean
        {static} +clear(double[]): void
        {static} +clear(double[]): void
        {static} +rotate90Equals(double[]): double[]
        {static} +unitMatrix(int): double[]
        {static} +zeroMatrix(int): double[]
        {static} +identity(int, int): double[]
        {static} +diagonal(double[]): double[]
        {static} +copy(double[]): double[]
        {static} +rowPackedCopy(double[]): double[]
        {static} +columnPackedCopy(double[]): double[]
        {static} +getMatrix(double[], int, int, int, int): double[]
        {static} +getMatrix(double[], int[], int[]): double[]
        {static} +getMatrix(double[], int[], int, int): double[]
        {static} +getMatrix(double[], int, int, int[]): double[]
        {static} +setMatrix(double[], int, int, int, int, double[]): void
        {static} +setMatrix(double[], int[], int[], double[]): void
        {static} +setMatrix(double[], int[], int, int, double[]): void
        {static} +setMatrix(double[], int, int, int[], double[]): void
        {static} +getRow(double[], int): double[]
        {static} +setRow(double[], int, double[]): void
        {static} +getCol(double[], int): double[]
        {static} +setCol(double[], int, double[]): void
        {static} +transpose(double[]): double[]
        {static} +plus(double[], double[]): double[]
        {static} +plusTimes(double[], double[], double): double[]
        {static} +plusEquals(double[], double[]): double[]
        {static} +plusTimesEquals(double[], double[], double): double[]
        {static} +minus(double[], double[]): double[]
        {static} +minusTimes(double[], double[], double): double[]
        {static} +minusEquals(double[], double[]): double[]
        {static} +minusTimesEquals(double[], double[], double): double[]
        {static} +times(double[], double): double[]
        {static} +timesEquals(double[], double): double[]
        {static} +times(double[], double[]): double[]
        {static} +times(double[], double[]): double[]
        {static} +transposeTimes(double[], double[]): double[]
        {static} +transposeTimes(double[], double[]): double[]
        {static} +transposeTimesTimes(double[], double[], double[]): double
        {static} +timesTranspose(double[], double[]): double[]
        {static} +transposeTimesTranspose(double[], double[]): double[]
        {static} +transposeDiagonalTimes(double[], double[], double[]): double[]
        {static} +mahalanobisDistance(double[], double[], double[]): double
        {static} +getDiagonal(double[]): double[]
        {static} +normalizeColumns(double[]): void
        {static} +appendColumns(double[], double[]): double[]
        {static} +orthonormalize(double[]): double[]
        {static} +solve(double[], double[]): double[]
        {static} +solve(double[], double[]): double[]
        {static} +inverse(double[]): double[]
        {static} +normF(double[]): double
        {static} +hashCode(double[]): int
        {static} +equals(double[], double[]): boolean
        {static} +almostEquals(double[], double[], double): boolean
        {static} +almostEquals(double[], double[]): boolean
        {static} +almostEquals(double[], double[], double): boolean
        {static} +almostEquals(double[], double[]): boolean
        {static} +getRowDimensionality(double[]): int
        {static} +getColumnDimensionality(double[]): int
        {static} +angle(double[], double[]): double
        {static} +angle(double[], double[], double[]): double
    }

    center footer UMLDoclet 2.0.19, PlantUML 1.2022.8
@enduml

PlantUML version 1.2022.8(Sun Sep 25 11:00:33 CEST 2022)
(APACHE source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: de
Country: DE
--></g></svg>